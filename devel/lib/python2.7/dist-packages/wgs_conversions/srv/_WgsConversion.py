# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wgs_conversions/WgsConversionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WgsConversionRequest(genpy.Message):
  _md5sum = "47cb49bdb6735f0c43c724ada8933741"
  _type = "wgs_conversions/WgsConversionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[3] lla
float64[3] xyz
float64[3] enu
float64[9] xyz_cov
float64[9] enu_cov
float64[3] ref_lla
"""
  __slots__ = ['lla','xyz','enu','xyz_cov','enu_cov','ref_lla']
  _slot_types = ['float64[3]','float64[3]','float64[3]','float64[9]','float64[9]','float64[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lla,xyz,enu,xyz_cov,enu_cov,ref_lla

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WgsConversionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lla is None:
        self.lla = [0.] * 3
      if self.xyz is None:
        self.xyz = [0.] * 3
      if self.enu is None:
        self.enu = [0.] * 3
      if self.xyz_cov is None:
        self.xyz_cov = [0.] * 9
      if self.enu_cov is None:
        self.enu_cov = [0.] * 9
      if self.ref_lla is None:
        self.ref_lla = [0.] * 3
    else:
      self.lla = [0.] * 3
      self.xyz = [0.] * 3
      self.enu = [0.] * 3
      self.xyz_cov = [0.] * 9
      self.enu_cov = [0.] * 9
      self.ref_lla = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.lla))
      buff.write(_get_struct_3d().pack(*self.xyz))
      buff.write(_get_struct_3d().pack(*self.enu))
      buff.write(_get_struct_9d().pack(*self.xyz_cov))
      buff.write(_get_struct_9d().pack(*self.enu_cov))
      buff.write(_get_struct_3d().pack(*self.ref_lla))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 24
      self.lla = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.enu = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.xyz_cov = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.enu_cov = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 24
      self.ref_lla = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.lla.tostring())
      buff.write(self.xyz.tostring())
      buff.write(self.enu.tostring())
      buff.write(self.xyz_cov.tostring())
      buff.write(self.enu_cov.tostring())
      buff.write(self.ref_lla.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 24
      self.lla = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.enu = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 72
      self.xyz_cov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.enu_cov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.ref_lla = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wgs_conversions/WgsConversionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WgsConversionResponse(genpy.Message):
  _md5sum = "c2cd2fea05ac4d6f35c95ca205c8b8ce"
  _type = "wgs_conversions/WgsConversionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[3] lla
float64[3] xyz
float64[3] enu
float64[9] xyz_cov
float64[9] enu_cov
"""
  __slots__ = ['lla','xyz','enu','xyz_cov','enu_cov']
  _slot_types = ['float64[3]','float64[3]','float64[3]','float64[9]','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lla,xyz,enu,xyz_cov,enu_cov

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WgsConversionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lla is None:
        self.lla = [0.] * 3
      if self.xyz is None:
        self.xyz = [0.] * 3
      if self.enu is None:
        self.enu = [0.] * 3
      if self.xyz_cov is None:
        self.xyz_cov = [0.] * 9
      if self.enu_cov is None:
        self.enu_cov = [0.] * 9
    else:
      self.lla = [0.] * 3
      self.xyz = [0.] * 3
      self.enu = [0.] * 3
      self.xyz_cov = [0.] * 9
      self.enu_cov = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.lla))
      buff.write(_get_struct_3d().pack(*self.xyz))
      buff.write(_get_struct_3d().pack(*self.enu))
      buff.write(_get_struct_9d().pack(*self.xyz_cov))
      buff.write(_get_struct_9d().pack(*self.enu_cov))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 24
      self.lla = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.enu = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.xyz_cov = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.enu_cov = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.lla.tostring())
      buff.write(self.xyz.tostring())
      buff.write(self.enu.tostring())
      buff.write(self.xyz_cov.tostring())
      buff.write(self.enu_cov.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 24
      self.lla = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.enu = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 72
      self.xyz_cov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.enu_cov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class WgsConversion(object):
  _type          = 'wgs_conversions/WgsConversion'
  _md5sum = 'ea85c4235117ae109ef1fb9d826c2e78'
  _request_class  = WgsConversionRequest
  _response_class = WgsConversionResponse
