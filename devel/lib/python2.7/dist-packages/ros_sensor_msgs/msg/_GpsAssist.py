# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/GpsAssist.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class GpsAssist(genpy.Message):
  _md5sum = "c2447862b19affe79c50f6956a1e26a6"
  _type = "ros_sensor_msgs/GpsAssist"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """LlhPosition             position
bool                    position_valid
CpuTimeOffset           cpu_time_offset
GpsEphemeris[]          ephemerides
GpsAlmanac[]            almanac
UtcIonosphere           utc_iono
bool                    utc_iono_valid
bool                    include_precise_time

#float64                 utc_system_time_offset
#GpsTime                 gps_time
#bool                    gps_time_valid
================================================================================
MSG: ros_sensor_msgs/LlhPosition
# # LlhPosition

float64                  latitude   # [deg]
float64                  longitude  # [deg]
float64                  altitude   # [m]
uint16                   horizontalAccuracy
uint16                   verticalAccuracy
================================================================================
MSG: ros_sensor_msgs/CpuTimeOffset
bool    valid
float64 secondsOffset
================================================================================
MSG: ros_sensor_msgs/GpsEphemeris
## Gps Ephemeris subframes for one satellite

uint16      prn
uint8[30]   subframe1
uint8[30]   subframe2
uint8[30]   subframe3
================================================================================
MSG: ros_sensor_msgs/GpsAlmanac

uint16      prn
uint16      reference_week
uint8[30]   subframe
================================================================================
MSG: ros_sensor_msgs/UtcIonosphere
## Subframe of UTC and Ionospheric Parameters

uint8[30]   subframe



"""
  __slots__ = ['position','position_valid','cpu_time_offset','ephemerides','almanac','utc_iono','utc_iono_valid','include_precise_time']
  _slot_types = ['ros_sensor_msgs/LlhPosition','bool','ros_sensor_msgs/CpuTimeOffset','ros_sensor_msgs/GpsEphemeris[]','ros_sensor_msgs/GpsAlmanac[]','ros_sensor_msgs/UtcIonosphere','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,position_valid,cpu_time_offset,ephemerides,almanac,utc_iono,utc_iono_valid,include_precise_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsAssist, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = ros_sensor_msgs.msg.LlhPosition()
      if self.position_valid is None:
        self.position_valid = False
      if self.cpu_time_offset is None:
        self.cpu_time_offset = ros_sensor_msgs.msg.CpuTimeOffset()
      if self.ephemerides is None:
        self.ephemerides = []
      if self.almanac is None:
        self.almanac = []
      if self.utc_iono is None:
        self.utc_iono = ros_sensor_msgs.msg.UtcIonosphere()
      if self.utc_iono_valid is None:
        self.utc_iono_valid = False
      if self.include_precise_time is None:
        self.include_precise_time = False
    else:
      self.position = ros_sensor_msgs.msg.LlhPosition()
      self.position_valid = False
      self.cpu_time_offset = ros_sensor_msgs.msg.CpuTimeOffset()
      self.ephemerides = []
      self.almanac = []
      self.utc_iono = ros_sensor_msgs.msg.UtcIonosphere()
      self.utc_iono_valid = False
      self.include_precise_time = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2H2Bd().pack(_x.position.latitude, _x.position.longitude, _x.position.altitude, _x.position.horizontalAccuracy, _x.position.verticalAccuracy, _x.position_valid, _x.cpu_time_offset.valid, _x.cpu_time_offset.secondsOffset))
      length = len(self.ephemerides)
      buff.write(_struct_I.pack(length))
      for val1 in self.ephemerides:
        buff.write(_get_struct_H().pack(val1.prn))
        _x = val1.subframe1
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
        _x = val1.subframe2
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
        _x = val1.subframe3
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
      length = len(self.almanac)
      buff.write(_struct_I.pack(length))
      for val1 in self.almanac:
        _x = val1
        buff.write(_get_struct_2H().pack(_x.prn, _x.reference_week))
        _x = val1.subframe
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
      _x = self.utc_iono.subframe
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.utc_iono_valid, _x.include_precise_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = ros_sensor_msgs.msg.LlhPosition()
      if self.cpu_time_offset is None:
        self.cpu_time_offset = ros_sensor_msgs.msg.CpuTimeOffset()
      if self.ephemerides is None:
        self.ephemerides = None
      if self.almanac is None:
        self.almanac = None
      if self.utc_iono is None:
        self.utc_iono = ros_sensor_msgs.msg.UtcIonosphere()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.position.latitude, _x.position.longitude, _x.position.altitude, _x.position.horizontalAccuracy, _x.position.verticalAccuracy, _x.position_valid, _x.cpu_time_offset.valid, _x.cpu_time_offset.secondsOffset,) = _get_struct_3d2H2Bd().unpack(str[start:end])
      self.position_valid = bool(self.position_valid)
      self.cpu_time_offset.valid = bool(self.cpu_time_offset.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ephemerides = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.GpsEphemeris()
        start = end
        end += 2
        (val1.prn,) = _get_struct_H().unpack(str[start:end])
        start = end
        end += 30
        val1.subframe1 = str[start:end]
        start = end
        end += 30
        val1.subframe2 = str[start:end]
        start = end
        end += 30
        val1.subframe3 = str[start:end]
        self.ephemerides.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.almanac = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.GpsAlmanac()
        _x = val1
        start = end
        end += 4
        (_x.prn, _x.reference_week,) = _get_struct_2H().unpack(str[start:end])
        start = end
        end += 30
        val1.subframe = str[start:end]
        self.almanac.append(val1)
      start = end
      end += 30
      self.utc_iono.subframe = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.utc_iono_valid, _x.include_precise_time,) = _get_struct_2B().unpack(str[start:end])
      self.utc_iono_valid = bool(self.utc_iono_valid)
      self.include_precise_time = bool(self.include_precise_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2H2Bd().pack(_x.position.latitude, _x.position.longitude, _x.position.altitude, _x.position.horizontalAccuracy, _x.position.verticalAccuracy, _x.position_valid, _x.cpu_time_offset.valid, _x.cpu_time_offset.secondsOffset))
      length = len(self.ephemerides)
      buff.write(_struct_I.pack(length))
      for val1 in self.ephemerides:
        buff.write(_get_struct_H().pack(val1.prn))
        _x = val1.subframe1
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
        _x = val1.subframe2
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
        _x = val1.subframe3
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
      length = len(self.almanac)
      buff.write(_struct_I.pack(length))
      for val1 in self.almanac:
        _x = val1
        buff.write(_get_struct_2H().pack(_x.prn, _x.reference_week))
        _x = val1.subframe
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_30B().pack(*_x))
        else:
          buff.write(_get_struct_30s().pack(_x))
      _x = self.utc_iono.subframe
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.utc_iono_valid, _x.include_precise_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = ros_sensor_msgs.msg.LlhPosition()
      if self.cpu_time_offset is None:
        self.cpu_time_offset = ros_sensor_msgs.msg.CpuTimeOffset()
      if self.ephemerides is None:
        self.ephemerides = None
      if self.almanac is None:
        self.almanac = None
      if self.utc_iono is None:
        self.utc_iono = ros_sensor_msgs.msg.UtcIonosphere()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.position.latitude, _x.position.longitude, _x.position.altitude, _x.position.horizontalAccuracy, _x.position.verticalAccuracy, _x.position_valid, _x.cpu_time_offset.valid, _x.cpu_time_offset.secondsOffset,) = _get_struct_3d2H2Bd().unpack(str[start:end])
      self.position_valid = bool(self.position_valid)
      self.cpu_time_offset.valid = bool(self.cpu_time_offset.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ephemerides = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.GpsEphemeris()
        start = end
        end += 2
        (val1.prn,) = _get_struct_H().unpack(str[start:end])
        start = end
        end += 30
        val1.subframe1 = str[start:end]
        start = end
        end += 30
        val1.subframe2 = str[start:end]
        start = end
        end += 30
        val1.subframe3 = str[start:end]
        self.ephemerides.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.almanac = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.GpsAlmanac()
        _x = val1
        start = end
        end += 4
        (_x.prn, _x.reference_week,) = _get_struct_2H().unpack(str[start:end])
        start = end
        end += 30
        val1.subframe = str[start:end]
        self.almanac.append(val1)
      start = end
      end += 30
      self.utc_iono.subframe = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.utc_iono_valid, _x.include_precise_time,) = _get_struct_2B().unpack(str[start:end])
      self.utc_iono_valid = bool(self.utc_iono_valid)
      self.include_precise_time = bool(self.include_precise_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2H2Bd = None
def _get_struct_3d2H2Bd():
    global _struct_3d2H2Bd
    if _struct_3d2H2Bd is None:
        _struct_3d2H2Bd = struct.Struct("<3d2H2Bd")
    return _struct_3d2H2Bd
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_30s = None
def _get_struct_30s():
    global _struct_30s
    if _struct_30s is None:
        _struct_30s = struct.Struct("<30s")
    return _struct_30s
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_30B = None
def _get_struct_30B():
    global _struct_30B
    if _struct_30B is None:
        _struct_30B = struct.Struct("<30B")
    return _struct_30B
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
