# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/RepoStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg
import std_msgs.msg

class RepoStatus(genpy.Message):
  _md5sum = "73c189982339de9347415b23f31f460b"
  _type = "ros_sensor_msgs/RepoStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header   header
Tags              tags
NodeStatus        localNode
NodeStatus[]      remoteNodes
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ros_sensor_msgs/Tags
## Header structure for user defined data messages

GpsTime        gpsTime
SensorType     sensor
ReceiverType   receiver   # String to specify GNSS receiver type
KeyStatus      key
string         sensorName
SourceType     source
bool           dataValid
AssuranceLevel assuranceLevel
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: ros_sensor_msgs/SensorType
## Sensor Type

uint8 SensorTypeUnknown = 0
uint8 SensorTypeGps     = 1
uint8 SensorTypeGlonass = 2
uint8 SensorTypeGalileo = 4
uint8 SensorTypeImu     = 8
uint8 SensorRfRange     = 16
uint8 SensorTypeVision  = 32

uint8 type
================================================================================
MSG: ros_sensor_msgs/ReceiverType
uint8 RECEIVER_TYPE_UBLOX = 0
uint8 RECEIVER_TYPE_NOVATEL = 1
uint8 RECEIVER_TYPE_DAGR = 2
uint8 RECEIVER_TYPE_MICROGRAM = 3
uint8 RECEIVER_TYPE_TRUTRAK = 4
uint8 RECEIVER_TYPE_GSSIP = 5
uint8 RECEIVER_TYPE_OTHER = 14
uint8 RECEIVER_TYPE_UNKNOWN = 15
uint8 type
================================================================================
MSG: ros_sensor_msgs/KeyStatus
## KeyStatus

uint8 UnauthorizedNotKeyed = 0
uint8 AuthorizedNotKeyed   = 1
uint8 Keyed                = 2

uint8 status
================================================================================
MSG: ros_sensor_msgs/SourceType
## Source of data

uint8 SourceTypeUnknown  = 0
uint8 SourceTypeReceiver = 1
uint8 SourceTypeNetwork  = 2
uint8 SourceTypeRinex    = 3
uint8 SourceTypeAny      = 99

uint8 type
================================================================================
MSG: ros_sensor_msgs/AssuranceLevel
uint8  Normal   = 0
uint8  Unknown  = 1
uint8  Warning  = 2
uint8  Attack   = 3

uint8 level
================================================================================
MSG: ros_sensor_msgs/NodeStatus
std_msgs/Header       header
Tags                  tags
FixType               fix
uint8                 numSatellitesAvailable
uint16                timeSinceLastFix     # in seconds [s]
AvlSatelliteData      availableEphemeris   # bit field
AvlSatelliteData      availableAlmanac     # bit field
bool                  utcIonoAvailable
NetworkTimeOffset     networkTimeOffset
CpuTimeOffset         computerTimeOffset
AssuranceLevel        assurance
AssuranceCheckValue[] assuranceCheckVal
bool                  isStale
================================================================================
MSG: ros_sensor_msgs/FixType
## Fix Type

uint8 FixTypeNone = 0
uint8 FixTypeDeadReckoning = 1
uint8 FixType2D = 2
uint8 FixType3D = 3
uint8 FixTypeDRand3D = 4 ## Dead reckoning and GPS fix
uint8 FixTypeTimeOnly = 5
uint8 FixTypeStatic = 9

uint8 type
================================================================================
MSG: ros_sensor_msgs/AvlSatelliteData
uint32    fromReceiver
uint32    fromNetwork
uint32    fromRinex
uint32    fromUnknown
================================================================================
MSG: ros_sensor_msgs/NetworkTimeOffset
  GpsTime timeOfValidity
  bool    dataValid
  int32   networkDifferenceCounts
  int32   networkDriftCounts
  int32   oscillatorFreqEst
  int32   networkDifferenceCmdCounts
  int32   networkDriftCmdCounts
  uint32  networkPpsCount
  uint32  gpsPpsCount
================================================================================
MSG: ros_sensor_msgs/CpuTimeOffset
bool    valid
float64 secondsOffset
================================================================================
MSG: ros_sensor_msgs/AssuranceCheckValue
## An assurance check value for a given prn

uint32    prn
uint32    checkVal"""
  __slots__ = ['header','tags','localNode','remoteNodes']
  _slot_types = ['std_msgs/Header','ros_sensor_msgs/Tags','ros_sensor_msgs/NodeStatus','ros_sensor_msgs/NodeStatus[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tags,localNode,remoteNodes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RepoStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.localNode is None:
        self.localNode = ros_sensor_msgs.msg.NodeStatus()
      if self.remoteNodes is None:
        self.remoteNodes = []
    else:
      self.header = std_msgs.msg.Header()
      self.tags = ros_sensor_msgs.msg.Tags()
      self.localNode = ros_sensor_msgs.msg.NodeStatus()
      self.remoteNodes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status))
      _x = self.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3I().pack(_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.localNode.header.seq, _x.localNode.header.stamp.secs, _x.localNode.header.stamp.nsecs))
      _x = self.localNode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.localNode.tags.gpsTime.gps_week, _x.localNode.tags.gpsTime.gps_seconds, _x.localNode.tags.sensor.type, _x.localNode.tags.receiver.type, _x.localNode.tags.key.status))
      _x = self.localNode.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5BH8IBIdB5i2IBdB().pack(_x.localNode.tags.source.type, _x.localNode.tags.dataValid, _x.localNode.tags.assuranceLevel.level, _x.localNode.fix.type, _x.localNode.numSatellitesAvailable, _x.localNode.timeSinceLastFix, _x.localNode.availableEphemeris.fromReceiver, _x.localNode.availableEphemeris.fromNetwork, _x.localNode.availableEphemeris.fromRinex, _x.localNode.availableEphemeris.fromUnknown, _x.localNode.availableAlmanac.fromReceiver, _x.localNode.availableAlmanac.fromNetwork, _x.localNode.availableAlmanac.fromRinex, _x.localNode.availableAlmanac.fromUnknown, _x.localNode.utcIonoAvailable, _x.localNode.networkTimeOffset.timeOfValidity.gps_week, _x.localNode.networkTimeOffset.timeOfValidity.gps_seconds, _x.localNode.networkTimeOffset.dataValid, _x.localNode.networkTimeOffset.networkDifferenceCounts, _x.localNode.networkTimeOffset.networkDriftCounts, _x.localNode.networkTimeOffset.oscillatorFreqEst, _x.localNode.networkTimeOffset.networkDifferenceCmdCounts, _x.localNode.networkTimeOffset.networkDriftCmdCounts, _x.localNode.networkTimeOffset.networkPpsCount, _x.localNode.networkTimeOffset.gpsPpsCount, _x.localNode.computerTimeOffset.valid, _x.localNode.computerTimeOffset.secondsOffset, _x.localNode.assurance.level))
      length = len(self.localNode.assuranceCheckVal)
      buff.write(_struct_I.pack(length))
      for val1 in self.localNode.assuranceCheckVal:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
      buff.write(_get_struct_B().pack(self.localNode.isStale))
      length = len(self.remoteNodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.remoteNodes:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.tags
        _v4 = _v3.gpsTime
        _x = _v4
        buff.write(_get_struct_Id().pack(_x.gps_week, _x.gps_seconds))
        _v5 = _v3.sensor
        buff.write(_get_struct_B().pack(_v5.type))
        _v6 = _v3.receiver
        buff.write(_get_struct_B().pack(_v6.type))
        _v7 = _v3.key
        buff.write(_get_struct_B().pack(_v7.status))
        _x = _v3.sensorName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v8 = _v3.source
        buff.write(_get_struct_B().pack(_v8.type))
        buff.write(_get_struct_B().pack(_v3.dataValid))
        _v9 = _v3.assuranceLevel
        buff.write(_get_struct_B().pack(_v9.level))
        _v10 = val1.fix
        buff.write(_get_struct_B().pack(_v10.type))
        _x = val1
        buff.write(_get_struct_BH().pack(_x.numSatellitesAvailable, _x.timeSinceLastFix))
        _v11 = val1.availableEphemeris
        _x = _v11
        buff.write(_get_struct_4I().pack(_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown))
        _v12 = val1.availableAlmanac
        _x = _v12
        buff.write(_get_struct_4I().pack(_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown))
        buff.write(_get_struct_B().pack(val1.utcIonoAvailable))
        _v13 = val1.networkTimeOffset
        _v14 = _v13.timeOfValidity
        _x = _v14
        buff.write(_get_struct_Id().pack(_x.gps_week, _x.gps_seconds))
        _x = _v13
        buff.write(_get_struct_B5i2I().pack(_x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount))
        _v15 = val1.computerTimeOffset
        _x = _v15
        buff.write(_get_struct_Bd().pack(_x.valid, _x.secondsOffset))
        _v16 = val1.assurance
        buff.write(_get_struct_B().pack(_v16.level))
        length = len(val1.assuranceCheckVal)
        buff.write(_struct_I.pack(length))
        for val2 in val1.assuranceCheckVal:
          _x = val2
          buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
        buff.write(_get_struct_B().pack(val1.isStale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.localNode is None:
        self.localNode = ros_sensor_msgs.msg.NodeStatus()
      if self.remoteNodes is None:
        self.remoteNodes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.localNode.header.seq, _x.localNode.header.stamp.secs, _x.localNode.header.stamp.nsecs,) = _get_struct_3B3I().unpack(str[start:end])
      self.tags.dataValid = bool(self.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localNode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.localNode.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.localNode.tags.gpsTime.gps_week, _x.localNode.tags.gpsTime.gps_seconds, _x.localNode.tags.sensor.type, _x.localNode.tags.receiver.type, _x.localNode.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localNode.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.localNode.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 91
      (_x.localNode.tags.source.type, _x.localNode.tags.dataValid, _x.localNode.tags.assuranceLevel.level, _x.localNode.fix.type, _x.localNode.numSatellitesAvailable, _x.localNode.timeSinceLastFix, _x.localNode.availableEphemeris.fromReceiver, _x.localNode.availableEphemeris.fromNetwork, _x.localNode.availableEphemeris.fromRinex, _x.localNode.availableEphemeris.fromUnknown, _x.localNode.availableAlmanac.fromReceiver, _x.localNode.availableAlmanac.fromNetwork, _x.localNode.availableAlmanac.fromRinex, _x.localNode.availableAlmanac.fromUnknown, _x.localNode.utcIonoAvailable, _x.localNode.networkTimeOffset.timeOfValidity.gps_week, _x.localNode.networkTimeOffset.timeOfValidity.gps_seconds, _x.localNode.networkTimeOffset.dataValid, _x.localNode.networkTimeOffset.networkDifferenceCounts, _x.localNode.networkTimeOffset.networkDriftCounts, _x.localNode.networkTimeOffset.oscillatorFreqEst, _x.localNode.networkTimeOffset.networkDifferenceCmdCounts, _x.localNode.networkTimeOffset.networkDriftCmdCounts, _x.localNode.networkTimeOffset.networkPpsCount, _x.localNode.networkTimeOffset.gpsPpsCount, _x.localNode.computerTimeOffset.valid, _x.localNode.computerTimeOffset.secondsOffset, _x.localNode.assurance.level,) = _get_struct_5BH8IBIdB5i2IBdB().unpack(str[start:end])
      self.localNode.tags.dataValid = bool(self.localNode.tags.dataValid)
      self.localNode.utcIonoAvailable = bool(self.localNode.utcIonoAvailable)
      self.localNode.networkTimeOffset.dataValid = bool(self.localNode.networkTimeOffset.dataValid)
      self.localNode.computerTimeOffset.valid = bool(self.localNode.computerTimeOffset.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localNode.assuranceCheckVal = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.AssuranceCheckValue()
        _x = val1
        start = end
        end += 8
        (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
        self.localNode.assuranceCheckVal.append(val1)
      start = end
      end += 1
      (self.localNode.isStale,) = _get_struct_B().unpack(str[start:end])
      self.localNode.isStale = bool(self.localNode.isStale)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.remoteNodes = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.NodeStatus()
        _v17 = val1.header
        start = end
        end += 4
        (_v17.seq,) = _get_struct_I().unpack(str[start:end])
        _v18 = _v17.stamp
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v17.frame_id = str[start:end].decode('utf-8')
        else:
          _v17.frame_id = str[start:end]
        _v19 = val1.tags
        _v20 = _v19.gpsTime
        _x = _v20
        start = end
        end += 12
        (_x.gps_week, _x.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
        _v21 = _v19.sensor
        start = end
        end += 1
        (_v21.type,) = _get_struct_B().unpack(str[start:end])
        _v22 = _v19.receiver
        start = end
        end += 1
        (_v22.type,) = _get_struct_B().unpack(str[start:end])
        _v23 = _v19.key
        start = end
        end += 1
        (_v23.status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.sensorName = str[start:end].decode('utf-8')
        else:
          _v19.sensorName = str[start:end]
        _v24 = _v19.source
        start = end
        end += 1
        (_v24.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 1
        (_v19.dataValid,) = _get_struct_B().unpack(str[start:end])
        _v19.dataValid = bool(_v19.dataValid)
        _v25 = _v19.assuranceLevel
        start = end
        end += 1
        (_v25.level,) = _get_struct_B().unpack(str[start:end])
        _v26 = val1.fix
        start = end
        end += 1
        (_v26.type,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.numSatellitesAvailable, _x.timeSinceLastFix,) = _get_struct_BH().unpack(str[start:end])
        _v27 = val1.availableEphemeris
        _x = _v27
        start = end
        end += 16
        (_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown,) = _get_struct_4I().unpack(str[start:end])
        _v28 = val1.availableAlmanac
        _x = _v28
        start = end
        end += 16
        (_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown,) = _get_struct_4I().unpack(str[start:end])
        start = end
        end += 1
        (val1.utcIonoAvailable,) = _get_struct_B().unpack(str[start:end])
        val1.utcIonoAvailable = bool(val1.utcIonoAvailable)
        _v29 = val1.networkTimeOffset
        _v30 = _v29.timeOfValidity
        _x = _v30
        start = end
        end += 12
        (_x.gps_week, _x.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
        _x = _v29
        start = end
        end += 29
        (_x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount,) = _get_struct_B5i2I().unpack(str[start:end])
        _v29.dataValid = bool(_v29.dataValid)
        _v31 = val1.computerTimeOffset
        _x = _v31
        start = end
        end += 9
        (_x.valid, _x.secondsOffset,) = _get_struct_Bd().unpack(str[start:end])
        _v31.valid = bool(_v31.valid)
        _v32 = val1.assurance
        start = end
        end += 1
        (_v32.level,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.assuranceCheckVal = []
        for i in range(0, length):
          val2 = ros_sensor_msgs.msg.AssuranceCheckValue()
          _x = val2
          start = end
          end += 8
          (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
          val1.assuranceCheckVal.append(val2)
        start = end
        end += 1
        (val1.isStale,) = _get_struct_B().unpack(str[start:end])
        val1.isStale = bool(val1.isStale)
        self.remoteNodes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status))
      _x = self.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3I().pack(_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.localNode.header.seq, _x.localNode.header.stamp.secs, _x.localNode.header.stamp.nsecs))
      _x = self.localNode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.localNode.tags.gpsTime.gps_week, _x.localNode.tags.gpsTime.gps_seconds, _x.localNode.tags.sensor.type, _x.localNode.tags.receiver.type, _x.localNode.tags.key.status))
      _x = self.localNode.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5BH8IBIdB5i2IBdB().pack(_x.localNode.tags.source.type, _x.localNode.tags.dataValid, _x.localNode.tags.assuranceLevel.level, _x.localNode.fix.type, _x.localNode.numSatellitesAvailable, _x.localNode.timeSinceLastFix, _x.localNode.availableEphemeris.fromReceiver, _x.localNode.availableEphemeris.fromNetwork, _x.localNode.availableEphemeris.fromRinex, _x.localNode.availableEphemeris.fromUnknown, _x.localNode.availableAlmanac.fromReceiver, _x.localNode.availableAlmanac.fromNetwork, _x.localNode.availableAlmanac.fromRinex, _x.localNode.availableAlmanac.fromUnknown, _x.localNode.utcIonoAvailable, _x.localNode.networkTimeOffset.timeOfValidity.gps_week, _x.localNode.networkTimeOffset.timeOfValidity.gps_seconds, _x.localNode.networkTimeOffset.dataValid, _x.localNode.networkTimeOffset.networkDifferenceCounts, _x.localNode.networkTimeOffset.networkDriftCounts, _x.localNode.networkTimeOffset.oscillatorFreqEst, _x.localNode.networkTimeOffset.networkDifferenceCmdCounts, _x.localNode.networkTimeOffset.networkDriftCmdCounts, _x.localNode.networkTimeOffset.networkPpsCount, _x.localNode.networkTimeOffset.gpsPpsCount, _x.localNode.computerTimeOffset.valid, _x.localNode.computerTimeOffset.secondsOffset, _x.localNode.assurance.level))
      length = len(self.localNode.assuranceCheckVal)
      buff.write(_struct_I.pack(length))
      for val1 in self.localNode.assuranceCheckVal:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
      buff.write(_get_struct_B().pack(self.localNode.isStale))
      length = len(self.remoteNodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.remoteNodes:
        _v33 = val1.header
        buff.write(_get_struct_I().pack(_v33.seq))
        _v34 = _v33.stamp
        _x = _v34
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v33.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v35 = val1.tags
        _v36 = _v35.gpsTime
        _x = _v36
        buff.write(_get_struct_Id().pack(_x.gps_week, _x.gps_seconds))
        _v37 = _v35.sensor
        buff.write(_get_struct_B().pack(_v37.type))
        _v38 = _v35.receiver
        buff.write(_get_struct_B().pack(_v38.type))
        _v39 = _v35.key
        buff.write(_get_struct_B().pack(_v39.status))
        _x = _v35.sensorName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v40 = _v35.source
        buff.write(_get_struct_B().pack(_v40.type))
        buff.write(_get_struct_B().pack(_v35.dataValid))
        _v41 = _v35.assuranceLevel
        buff.write(_get_struct_B().pack(_v41.level))
        _v42 = val1.fix
        buff.write(_get_struct_B().pack(_v42.type))
        _x = val1
        buff.write(_get_struct_BH().pack(_x.numSatellitesAvailable, _x.timeSinceLastFix))
        _v43 = val1.availableEphemeris
        _x = _v43
        buff.write(_get_struct_4I().pack(_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown))
        _v44 = val1.availableAlmanac
        _x = _v44
        buff.write(_get_struct_4I().pack(_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown))
        buff.write(_get_struct_B().pack(val1.utcIonoAvailable))
        _v45 = val1.networkTimeOffset
        _v46 = _v45.timeOfValidity
        _x = _v46
        buff.write(_get_struct_Id().pack(_x.gps_week, _x.gps_seconds))
        _x = _v45
        buff.write(_get_struct_B5i2I().pack(_x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount))
        _v47 = val1.computerTimeOffset
        _x = _v47
        buff.write(_get_struct_Bd().pack(_x.valid, _x.secondsOffset))
        _v48 = val1.assurance
        buff.write(_get_struct_B().pack(_v48.level))
        length = len(val1.assuranceCheckVal)
        buff.write(_struct_I.pack(length))
        for val2 in val1.assuranceCheckVal:
          _x = val2
          buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
        buff.write(_get_struct_B().pack(val1.isStale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.localNode is None:
        self.localNode = ros_sensor_msgs.msg.NodeStatus()
      if self.remoteNodes is None:
        self.remoteNodes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.localNode.header.seq, _x.localNode.header.stamp.secs, _x.localNode.header.stamp.nsecs,) = _get_struct_3B3I().unpack(str[start:end])
      self.tags.dataValid = bool(self.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localNode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.localNode.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.localNode.tags.gpsTime.gps_week, _x.localNode.tags.gpsTime.gps_seconds, _x.localNode.tags.sensor.type, _x.localNode.tags.receiver.type, _x.localNode.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localNode.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.localNode.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 91
      (_x.localNode.tags.source.type, _x.localNode.tags.dataValid, _x.localNode.tags.assuranceLevel.level, _x.localNode.fix.type, _x.localNode.numSatellitesAvailable, _x.localNode.timeSinceLastFix, _x.localNode.availableEphemeris.fromReceiver, _x.localNode.availableEphemeris.fromNetwork, _x.localNode.availableEphemeris.fromRinex, _x.localNode.availableEphemeris.fromUnknown, _x.localNode.availableAlmanac.fromReceiver, _x.localNode.availableAlmanac.fromNetwork, _x.localNode.availableAlmanac.fromRinex, _x.localNode.availableAlmanac.fromUnknown, _x.localNode.utcIonoAvailable, _x.localNode.networkTimeOffset.timeOfValidity.gps_week, _x.localNode.networkTimeOffset.timeOfValidity.gps_seconds, _x.localNode.networkTimeOffset.dataValid, _x.localNode.networkTimeOffset.networkDifferenceCounts, _x.localNode.networkTimeOffset.networkDriftCounts, _x.localNode.networkTimeOffset.oscillatorFreqEst, _x.localNode.networkTimeOffset.networkDifferenceCmdCounts, _x.localNode.networkTimeOffset.networkDriftCmdCounts, _x.localNode.networkTimeOffset.networkPpsCount, _x.localNode.networkTimeOffset.gpsPpsCount, _x.localNode.computerTimeOffset.valid, _x.localNode.computerTimeOffset.secondsOffset, _x.localNode.assurance.level,) = _get_struct_5BH8IBIdB5i2IBdB().unpack(str[start:end])
      self.localNode.tags.dataValid = bool(self.localNode.tags.dataValid)
      self.localNode.utcIonoAvailable = bool(self.localNode.utcIonoAvailable)
      self.localNode.networkTimeOffset.dataValid = bool(self.localNode.networkTimeOffset.dataValid)
      self.localNode.computerTimeOffset.valid = bool(self.localNode.computerTimeOffset.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localNode.assuranceCheckVal = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.AssuranceCheckValue()
        _x = val1
        start = end
        end += 8
        (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
        self.localNode.assuranceCheckVal.append(val1)
      start = end
      end += 1
      (self.localNode.isStale,) = _get_struct_B().unpack(str[start:end])
      self.localNode.isStale = bool(self.localNode.isStale)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.remoteNodes = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.NodeStatus()
        _v49 = val1.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8')
        else:
          _v49.frame_id = str[start:end]
        _v51 = val1.tags
        _v52 = _v51.gpsTime
        _x = _v52
        start = end
        end += 12
        (_x.gps_week, _x.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
        _v53 = _v51.sensor
        start = end
        end += 1
        (_v53.type,) = _get_struct_B().unpack(str[start:end])
        _v54 = _v51.receiver
        start = end
        end += 1
        (_v54.type,) = _get_struct_B().unpack(str[start:end])
        _v55 = _v51.key
        start = end
        end += 1
        (_v55.status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v51.sensorName = str[start:end].decode('utf-8')
        else:
          _v51.sensorName = str[start:end]
        _v56 = _v51.source
        start = end
        end += 1
        (_v56.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 1
        (_v51.dataValid,) = _get_struct_B().unpack(str[start:end])
        _v51.dataValid = bool(_v51.dataValid)
        _v57 = _v51.assuranceLevel
        start = end
        end += 1
        (_v57.level,) = _get_struct_B().unpack(str[start:end])
        _v58 = val1.fix
        start = end
        end += 1
        (_v58.type,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.numSatellitesAvailable, _x.timeSinceLastFix,) = _get_struct_BH().unpack(str[start:end])
        _v59 = val1.availableEphemeris
        _x = _v59
        start = end
        end += 16
        (_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown,) = _get_struct_4I().unpack(str[start:end])
        _v60 = val1.availableAlmanac
        _x = _v60
        start = end
        end += 16
        (_x.fromReceiver, _x.fromNetwork, _x.fromRinex, _x.fromUnknown,) = _get_struct_4I().unpack(str[start:end])
        start = end
        end += 1
        (val1.utcIonoAvailable,) = _get_struct_B().unpack(str[start:end])
        val1.utcIonoAvailable = bool(val1.utcIonoAvailable)
        _v61 = val1.networkTimeOffset
        _v62 = _v61.timeOfValidity
        _x = _v62
        start = end
        end += 12
        (_x.gps_week, _x.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
        _x = _v61
        start = end
        end += 29
        (_x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount,) = _get_struct_B5i2I().unpack(str[start:end])
        _v61.dataValid = bool(_v61.dataValid)
        _v63 = val1.computerTimeOffset
        _x = _v63
        start = end
        end += 9
        (_x.valid, _x.secondsOffset,) = _get_struct_Bd().unpack(str[start:end])
        _v63.valid = bool(_v63.valid)
        _v64 = val1.assurance
        start = end
        end += 1
        (_v64.level,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.assuranceCheckVal = []
        for i in range(0, length):
          val2 = ros_sensor_msgs.msg.AssuranceCheckValue()
          _x = val2
          start = end
          end += 8
          (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
          val1.assuranceCheckVal.append(val2)
        start = end
        end += 1
        (val1.isStale,) = _get_struct_B().unpack(str[start:end])
        val1.isStale = bool(val1.isStale)
        self.remoteNodes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BH = None
def _get_struct_BH():
    global _struct_BH
    if _struct_BH is None:
        _struct_BH = struct.Struct("<BH")
    return _struct_BH
_struct_B5i2I = None
def _get_struct_B5i2I():
    global _struct_B5i2I
    if _struct_B5i2I is None:
        _struct_B5i2I = struct.Struct("<B5i2I")
    return _struct_B5i2I
_struct_3B3I = None
def _get_struct_3B3I():
    global _struct_3B3I
    if _struct_3B3I is None:
        _struct_3B3I = struct.Struct("<3B3I")
    return _struct_3B3I
_struct_Id3B = None
def _get_struct_Id3B():
    global _struct_Id3B
    if _struct_Id3B is None:
        _struct_Id3B = struct.Struct("<Id3B")
    return _struct_Id3B
_struct_5BH8IBIdB5i2IBdB = None
def _get_struct_5BH8IBIdB5i2IBdB():
    global _struct_5BH8IBIdB5i2IBdB
    if _struct_5BH8IBIdB5i2IBdB is None:
        _struct_5BH8IBIdB5i2IBdB = struct.Struct("<5BH8IBIdB5i2IBdB")
    return _struct_5BH8IBIdB5i2IBdB
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
