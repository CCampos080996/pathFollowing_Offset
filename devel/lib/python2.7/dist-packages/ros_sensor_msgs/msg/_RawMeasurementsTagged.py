# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/RawMeasurementsTagged.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg
import std_msgs.msg

class RawMeasurementsTagged(genpy.Message):
  _md5sum = "f7fe5e22f5b398264f349131119cd903"
  _type = "ros_sensor_msgs/RawMeasurementsTagged"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """## Raw measurements for a single channel with header

std_msgs/Header   header
Tags              tags
RawMeasurement[]  measurements
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ros_sensor_msgs/Tags
## Header structure for user defined data messages

GpsTime        gpsTime
SensorType     sensor
ReceiverType   receiver   # String to specify GNSS receiver type
KeyStatus      key
string         sensorName
SourceType     source
bool           dataValid
AssuranceLevel assuranceLevel
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: ros_sensor_msgs/SensorType
## Sensor Type

uint8 SensorTypeUnknown = 0
uint8 SensorTypeGps     = 1
uint8 SensorTypeGlonass = 2
uint8 SensorTypeGalileo = 4
uint8 SensorTypeImu     = 8
uint8 SensorRfRange     = 16
uint8 SensorTypeVision  = 32

uint8 type
================================================================================
MSG: ros_sensor_msgs/ReceiverType
uint8 RECEIVER_TYPE_UBLOX = 0
uint8 RECEIVER_TYPE_NOVATEL = 1
uint8 RECEIVER_TYPE_DAGR = 2
uint8 RECEIVER_TYPE_MICROGRAM = 3
uint8 RECEIVER_TYPE_TRUTRAK = 4
uint8 RECEIVER_TYPE_GSSIP = 5
uint8 RECEIVER_TYPE_OTHER = 14
uint8 RECEIVER_TYPE_UNKNOWN = 15
uint8 type
================================================================================
MSG: ros_sensor_msgs/KeyStatus
## KeyStatus

uint8 UnauthorizedNotKeyed = 0
uint8 AuthorizedNotKeyed   = 1
uint8 Keyed                = 2

uint8 status
================================================================================
MSG: ros_sensor_msgs/SourceType
## Source of data

uint8 SourceTypeUnknown  = 0
uint8 SourceTypeReceiver = 1
uint8 SourceTypeNetwork  = 2
uint8 SourceTypeRinex    = 3
uint8 SourceTypeAny      = 99

uint8 type
================================================================================
MSG: ros_sensor_msgs/AssuranceLevel
uint8  Normal   = 0
uint8  Unknown  = 1
uint8  Warning  = 2
uint8  Attack   = 3

uint8 level
================================================================================
MSG: ros_sensor_msgs/RawMeasurement
## Raw measurements for a single channel

uint16        prn                     # GPS [1-32], GLONASS may be negative
float64       pseudorange             # [m]
float32		  pseudorange_variance	  # [m^2]
FrequencyType frequency               # 
float64       carrier_phase           # [m]
float32		  carrier_phase_variance  # [m^2]
float64       doppler                 # [Hz]
float32       doppler_variance		  # [Hz^2]
float64       carrier_to_noise        # [db-Hz]
bool          loss_of_lock            # True - indicates likely loss of
                                      # carrier lock in previous interval
================================================================================
MSG: ros_sensor_msgs/FrequencyType
## Frequency Type

uint8 FrequencyTypeUnknown      = 0
uint8 FrequencyTypeL1           = 1
uint8 FrequencyTypeL2           = 2
uint8 FrequencyTypeL5           = 3
uint8 FrequencyTypeGalileoE1    = 4
uint8 FrequencyTypeGalileoE5    = 5
uint8 FrequencyTypeGalileoE6    = 6
uint8 FrequencyTypeGalileoC     = 7
uint8 FrequencyTypeGlonassL1F   = 8
uint8 FrequencyTypeGlonassL2F   = 9
uint8 FrequencyTypeGlonassL1C   = 10
uint8 FrequencyTypeGlonassL2C   = 11
uint8 FrequencyTypeGlonassL3C   = 12

uint8 type"""
  __slots__ = ['header','tags','measurements']
  _slot_types = ['std_msgs/Header','ros_sensor_msgs/Tags','ros_sensor_msgs/RawMeasurement[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tags,measurements

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawMeasurementsTagged, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.measurements is None:
        self.measurements = []
    else:
      self.header = std_msgs.msg.Header()
      self.tags = ros_sensor_msgs.msg.Tags()
      self.measurements = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status))
      _x = self.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level))
      length = len(self.measurements)
      buff.write(_struct_I.pack(length))
      for val1 in self.measurements:
        _x = val1
        buff.write(_get_struct_Hdf().pack(_x.prn, _x.pseudorange, _x.pseudorange_variance))
        _v1 = val1.frequency
        buff.write(_get_struct_B().pack(_v1.type))
        _x = val1
        buff.write(_get_struct_dfdfdB().pack(_x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.measurements is None:
        self.measurements = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level,) = _get_struct_3B().unpack(str[start:end])
      self.tags.dataValid = bool(self.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.measurements = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.RawMeasurement()
        _x = val1
        start = end
        end += 14
        (_x.prn, _x.pseudorange, _x.pseudorange_variance,) = _get_struct_Hdf().unpack(str[start:end])
        _v2 = val1.frequency
        start = end
        end += 1
        (_v2.type,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 33
        (_x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock,) = _get_struct_dfdfdB().unpack(str[start:end])
        val1.loss_of_lock = bool(val1.loss_of_lock)
        self.measurements.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status))
      _x = self.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level))
      length = len(self.measurements)
      buff.write(_struct_I.pack(length))
      for val1 in self.measurements:
        _x = val1
        buff.write(_get_struct_Hdf().pack(_x.prn, _x.pseudorange, _x.pseudorange_variance))
        _v3 = val1.frequency
        buff.write(_get_struct_B().pack(_v3.type))
        _x = val1
        buff.write(_get_struct_dfdfdB().pack(_x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.measurements is None:
        self.measurements = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level,) = _get_struct_3B().unpack(str[start:end])
      self.tags.dataValid = bool(self.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.measurements = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.RawMeasurement()
        _x = val1
        start = end
        end += 14
        (_x.prn, _x.pseudorange, _x.pseudorange_variance,) = _get_struct_Hdf().unpack(str[start:end])
        _v4 = val1.frequency
        start = end
        end += 1
        (_v4.type,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 33
        (_x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock,) = _get_struct_dfdfdB().unpack(str[start:end])
        val1.loss_of_lock = bool(val1.loss_of_lock)
        self.measurements.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Id3B = None
def _get_struct_Id3B():
    global _struct_Id3B
    if _struct_Id3B is None:
        _struct_Id3B = struct.Struct("<Id3B")
    return _struct_Id3B
_struct_dfdfdB = None
def _get_struct_dfdfdB():
    global _struct_dfdfdB
    if _struct_dfdfdB is None:
        _struct_dfdfdB = struct.Struct("<dfdfdB")
    return _struct_dfdfdB
_struct_Hdf = None
def _get_struct_Hdf():
    global _struct_Hdf
    if _struct_Hdf is None:
        _struct_Hdf = struct.Struct("<Hdf")
    return _struct_Hdf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
