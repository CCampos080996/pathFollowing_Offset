# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/DualNodeAssuranceData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg
import std_msgs.msg

class DualNodeAssuranceData(genpy.Message):
  _md5sum = "ba2e6008c14c1601b60697a2dd872ffa"
  _type = "ros_sensor_msgs/DualNodeAssuranceData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """  string             remoteNodeIp
  LlhPositionTagged  remotePosition
  RfRangeStamped     rfRange
  float64            nodeRange
  AssuranceLevel     rangeCheckAssuranceLevel
  PrnDifference[]    singleDifferences
  uint32             basePrn
  PrnDifference[]    doubleDifferences
  AssuranceLevel     diffCheckAssuranceLevel
================================================================================
MSG: ros_sensor_msgs/LlhPositionTagged
## LlhPositionTagged

std_msgs/Header   header
Tags              tags
LlhPosition       llhPosition
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ros_sensor_msgs/Tags
## Header structure for user defined data messages

GpsTime        gpsTime
SensorType     sensor
ReceiverType   receiver   # String to specify GNSS receiver type
KeyStatus      key
string         sensorName
SourceType     source
bool           dataValid
AssuranceLevel assuranceLevel
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: ros_sensor_msgs/SensorType
## Sensor Type

uint8 SensorTypeUnknown = 0
uint8 SensorTypeGps     = 1
uint8 SensorTypeGlonass = 2
uint8 SensorTypeGalileo = 4
uint8 SensorTypeImu     = 8
uint8 SensorRfRange     = 16
uint8 SensorTypeVision  = 32

uint8 type
================================================================================
MSG: ros_sensor_msgs/ReceiverType
uint8 RECEIVER_TYPE_UBLOX = 0
uint8 RECEIVER_TYPE_NOVATEL = 1
uint8 RECEIVER_TYPE_DAGR = 2
uint8 RECEIVER_TYPE_MICROGRAM = 3
uint8 RECEIVER_TYPE_TRUTRAK = 4
uint8 RECEIVER_TYPE_GSSIP = 5
uint8 RECEIVER_TYPE_OTHER = 14
uint8 RECEIVER_TYPE_UNKNOWN = 15
uint8 type
================================================================================
MSG: ros_sensor_msgs/KeyStatus
## KeyStatus

uint8 UnauthorizedNotKeyed = 0
uint8 AuthorizedNotKeyed   = 1
uint8 Keyed                = 2

uint8 status
================================================================================
MSG: ros_sensor_msgs/SourceType
## Source of data

uint8 SourceTypeUnknown  = 0
uint8 SourceTypeReceiver = 1
uint8 SourceTypeNetwork  = 2
uint8 SourceTypeRinex    = 3
uint8 SourceTypeAny      = 99

uint8 type
================================================================================
MSG: ros_sensor_msgs/AssuranceLevel
uint8  Normal   = 0
uint8  Unknown  = 1
uint8  Warning  = 2
uint8  Attack   = 3

uint8 level
================================================================================
MSG: ros_sensor_msgs/LlhPosition
# # LlhPosition

float64                  latitude   # [deg]
float64                  longitude  # [deg]
float64                  altitude   # [m]
uint16                   horizontalAccuracy
uint16                   verticalAccuracy
================================================================================
MSG: ros_sensor_msgs/RfRangeStamped
# Range to specified object
std_msgs/Header   header
RfRange           range
================================================================================
MSG: ros_sensor_msgs/RfRange
# Range to specified object
float64 range
float64 rangeRate
float64 rangeVariance
float64 rangeRateVariance
uint32  timestamp
uint32  sourceId
uint32  destId
uint16  rssi
uint16  quality

================================================================================
MSG: ros_sensor_msgs/PrnDifference
uint32   prn
float64  difference"""
  __slots__ = ['remoteNodeIp','remotePosition','rfRange','nodeRange','rangeCheckAssuranceLevel','singleDifferences','basePrn','doubleDifferences','diffCheckAssuranceLevel']
  _slot_types = ['string','ros_sensor_msgs/LlhPositionTagged','ros_sensor_msgs/RfRangeStamped','float64','ros_sensor_msgs/AssuranceLevel','ros_sensor_msgs/PrnDifference[]','uint32','ros_sensor_msgs/PrnDifference[]','ros_sensor_msgs/AssuranceLevel']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       remoteNodeIp,remotePosition,rfRange,nodeRange,rangeCheckAssuranceLevel,singleDifferences,basePrn,doubleDifferences,diffCheckAssuranceLevel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DualNodeAssuranceData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.remoteNodeIp is None:
        self.remoteNodeIp = ''
      if self.remotePosition is None:
        self.remotePosition = ros_sensor_msgs.msg.LlhPositionTagged()
      if self.rfRange is None:
        self.rfRange = ros_sensor_msgs.msg.RfRangeStamped()
      if self.nodeRange is None:
        self.nodeRange = 0.
      if self.rangeCheckAssuranceLevel is None:
        self.rangeCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      if self.singleDifferences is None:
        self.singleDifferences = []
      if self.basePrn is None:
        self.basePrn = 0
      if self.doubleDifferences is None:
        self.doubleDifferences = []
      if self.diffCheckAssuranceLevel is None:
        self.diffCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
    else:
      self.remoteNodeIp = ''
      self.remotePosition = ros_sensor_msgs.msg.LlhPositionTagged()
      self.rfRange = ros_sensor_msgs.msg.RfRangeStamped()
      self.nodeRange = 0.
      self.rangeCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      self.singleDifferences = []
      self.basePrn = 0
      self.doubleDifferences = []
      self.diffCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.remoteNodeIp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.remotePosition.header.seq, _x.remotePosition.header.stamp.secs, _x.remotePosition.header.stamp.nsecs))
      _x = self.remotePosition.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.remotePosition.tags.gpsTime.gps_week, _x.remotePosition.tags.gpsTime.gps_seconds, _x.remotePosition.tags.sensor.type, _x.remotePosition.tags.receiver.type, _x.remotePosition.tags.key.status))
      _x = self.remotePosition.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3d2H3I().pack(_x.remotePosition.tags.source.type, _x.remotePosition.tags.dataValid, _x.remotePosition.tags.assuranceLevel.level, _x.remotePosition.llhPosition.latitude, _x.remotePosition.llhPosition.longitude, _x.remotePosition.llhPosition.altitude, _x.remotePosition.llhPosition.horizontalAccuracy, _x.remotePosition.llhPosition.verticalAccuracy, _x.rfRange.header.seq, _x.rfRange.header.stamp.secs, _x.rfRange.header.stamp.nsecs))
      _x = self.rfRange.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d3I2HdB().pack(_x.rfRange.range.range, _x.rfRange.range.rangeRate, _x.rfRange.range.rangeVariance, _x.rfRange.range.rangeRateVariance, _x.rfRange.range.timestamp, _x.rfRange.range.sourceId, _x.rfRange.range.destId, _x.rfRange.range.rssi, _x.rfRange.range.quality, _x.nodeRange, _x.rangeCheckAssuranceLevel.level))
      length = len(self.singleDifferences)
      buff.write(_struct_I.pack(length))
      for val1 in self.singleDifferences:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_I().pack(self.basePrn))
      length = len(self.doubleDifferences)
      buff.write(_struct_I.pack(length))
      for val1 in self.doubleDifferences:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.diffCheckAssuranceLevel.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.remotePosition is None:
        self.remotePosition = ros_sensor_msgs.msg.LlhPositionTagged()
      if self.rfRange is None:
        self.rfRange = ros_sensor_msgs.msg.RfRangeStamped()
      if self.rangeCheckAssuranceLevel is None:
        self.rangeCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      if self.singleDifferences is None:
        self.singleDifferences = None
      if self.doubleDifferences is None:
        self.doubleDifferences = None
      if self.diffCheckAssuranceLevel is None:
        self.diffCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remoteNodeIp = str[start:end].decode('utf-8')
      else:
        self.remoteNodeIp = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.remotePosition.header.seq, _x.remotePosition.header.stamp.secs, _x.remotePosition.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remotePosition.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.remotePosition.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.remotePosition.tags.gpsTime.gps_week, _x.remotePosition.tags.gpsTime.gps_seconds, _x.remotePosition.tags.sensor.type, _x.remotePosition.tags.receiver.type, _x.remotePosition.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remotePosition.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.remotePosition.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.remotePosition.tags.source.type, _x.remotePosition.tags.dataValid, _x.remotePosition.tags.assuranceLevel.level, _x.remotePosition.llhPosition.latitude, _x.remotePosition.llhPosition.longitude, _x.remotePosition.llhPosition.altitude, _x.remotePosition.llhPosition.horizontalAccuracy, _x.remotePosition.llhPosition.verticalAccuracy, _x.rfRange.header.seq, _x.rfRange.header.stamp.secs, _x.rfRange.header.stamp.nsecs,) = _get_struct_3B3d2H3I().unpack(str[start:end])
      self.remotePosition.tags.dataValid = bool(self.remotePosition.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rfRange.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rfRange.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.rfRange.range.range, _x.rfRange.range.rangeRate, _x.rfRange.range.rangeVariance, _x.rfRange.range.rangeRateVariance, _x.rfRange.range.timestamp, _x.rfRange.range.sourceId, _x.rfRange.range.destId, _x.rfRange.range.rssi, _x.rfRange.range.quality, _x.nodeRange, _x.rangeCheckAssuranceLevel.level,) = _get_struct_4d3I2HdB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.singleDifferences = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.singleDifferences.append(val1)
      start = end
      end += 4
      (self.basePrn,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.doubleDifferences = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.doubleDifferences.append(val1)
      start = end
      end += 1
      (self.diffCheckAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.remoteNodeIp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.remotePosition.header.seq, _x.remotePosition.header.stamp.secs, _x.remotePosition.header.stamp.nsecs))
      _x = self.remotePosition.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.remotePosition.tags.gpsTime.gps_week, _x.remotePosition.tags.gpsTime.gps_seconds, _x.remotePosition.tags.sensor.type, _x.remotePosition.tags.receiver.type, _x.remotePosition.tags.key.status))
      _x = self.remotePosition.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3d2H3I().pack(_x.remotePosition.tags.source.type, _x.remotePosition.tags.dataValid, _x.remotePosition.tags.assuranceLevel.level, _x.remotePosition.llhPosition.latitude, _x.remotePosition.llhPosition.longitude, _x.remotePosition.llhPosition.altitude, _x.remotePosition.llhPosition.horizontalAccuracy, _x.remotePosition.llhPosition.verticalAccuracy, _x.rfRange.header.seq, _x.rfRange.header.stamp.secs, _x.rfRange.header.stamp.nsecs))
      _x = self.rfRange.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d3I2HdB().pack(_x.rfRange.range.range, _x.rfRange.range.rangeRate, _x.rfRange.range.rangeVariance, _x.rfRange.range.rangeRateVariance, _x.rfRange.range.timestamp, _x.rfRange.range.sourceId, _x.rfRange.range.destId, _x.rfRange.range.rssi, _x.rfRange.range.quality, _x.nodeRange, _x.rangeCheckAssuranceLevel.level))
      length = len(self.singleDifferences)
      buff.write(_struct_I.pack(length))
      for val1 in self.singleDifferences:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_I().pack(self.basePrn))
      length = len(self.doubleDifferences)
      buff.write(_struct_I.pack(length))
      for val1 in self.doubleDifferences:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.diffCheckAssuranceLevel.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.remotePosition is None:
        self.remotePosition = ros_sensor_msgs.msg.LlhPositionTagged()
      if self.rfRange is None:
        self.rfRange = ros_sensor_msgs.msg.RfRangeStamped()
      if self.rangeCheckAssuranceLevel is None:
        self.rangeCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      if self.singleDifferences is None:
        self.singleDifferences = None
      if self.doubleDifferences is None:
        self.doubleDifferences = None
      if self.diffCheckAssuranceLevel is None:
        self.diffCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remoteNodeIp = str[start:end].decode('utf-8')
      else:
        self.remoteNodeIp = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.remotePosition.header.seq, _x.remotePosition.header.stamp.secs, _x.remotePosition.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remotePosition.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.remotePosition.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.remotePosition.tags.gpsTime.gps_week, _x.remotePosition.tags.gpsTime.gps_seconds, _x.remotePosition.tags.sensor.type, _x.remotePosition.tags.receiver.type, _x.remotePosition.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remotePosition.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.remotePosition.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.remotePosition.tags.source.type, _x.remotePosition.tags.dataValid, _x.remotePosition.tags.assuranceLevel.level, _x.remotePosition.llhPosition.latitude, _x.remotePosition.llhPosition.longitude, _x.remotePosition.llhPosition.altitude, _x.remotePosition.llhPosition.horizontalAccuracy, _x.remotePosition.llhPosition.verticalAccuracy, _x.rfRange.header.seq, _x.rfRange.header.stamp.secs, _x.rfRange.header.stamp.nsecs,) = _get_struct_3B3d2H3I().unpack(str[start:end])
      self.remotePosition.tags.dataValid = bool(self.remotePosition.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rfRange.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rfRange.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.rfRange.range.range, _x.rfRange.range.rangeRate, _x.rfRange.range.rangeVariance, _x.rfRange.range.rangeRateVariance, _x.rfRange.range.timestamp, _x.rfRange.range.sourceId, _x.rfRange.range.destId, _x.rfRange.range.rssi, _x.rfRange.range.quality, _x.nodeRange, _x.rangeCheckAssuranceLevel.level,) = _get_struct_4d3I2HdB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.singleDifferences = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.singleDifferences.append(val1)
      start = end
      end += 4
      (self.basePrn,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.doubleDifferences = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.doubleDifferences.append(val1)
      start = end
      end += 1
      (self.diffCheckAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_4d3I2HdB = None
def _get_struct_4d3I2HdB():
    global _struct_4d3I2HdB
    if _struct_4d3I2HdB is None:
        _struct_4d3I2HdB = struct.Struct("<4d3I2HdB")
    return _struct_4d3I2HdB
_struct_Id3B = None
def _get_struct_Id3B():
    global _struct_Id3B
    if _struct_Id3B is None:
        _struct_Id3B = struct.Struct("<Id3B")
    return _struct_Id3B
_struct_3B3d2H3I = None
def _get_struct_3B3d2H3I():
    global _struct_3B3d2H3I
    if _struct_3B3d2H3I is None:
        _struct_3B3d2H3I = struct.Struct("<3B3d2H3I")
    return _struct_3B3d2H3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
