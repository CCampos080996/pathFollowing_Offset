# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/NetworkTimeOffset.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class NetworkTimeOffset(genpy.Message):
  _md5sum = "412c840c046eb987aa756fb5be2c7955"
  _type = "ros_sensor_msgs/NetworkTimeOffset"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """  GpsTime timeOfValidity
  bool    dataValid
  int32   networkDifferenceCounts
  int32   networkDriftCounts
  int32   oscillatorFreqEst
  int32   networkDifferenceCmdCounts
  int32   networkDriftCmdCounts
  uint32  networkPpsCount
  uint32  gpsPpsCount
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]"""
  __slots__ = ['timeOfValidity','dataValid','networkDifferenceCounts','networkDriftCounts','oscillatorFreqEst','networkDifferenceCmdCounts','networkDriftCmdCounts','networkPpsCount','gpsPpsCount']
  _slot_types = ['ros_sensor_msgs/GpsTime','bool','int32','int32','int32','int32','int32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeOfValidity,dataValid,networkDifferenceCounts,networkDriftCounts,oscillatorFreqEst,networkDifferenceCmdCounts,networkDriftCmdCounts,networkPpsCount,gpsPpsCount

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NetworkTimeOffset, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timeOfValidity is None:
        self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      if self.dataValid is None:
        self.dataValid = False
      if self.networkDifferenceCounts is None:
        self.networkDifferenceCounts = 0
      if self.networkDriftCounts is None:
        self.networkDriftCounts = 0
      if self.oscillatorFreqEst is None:
        self.oscillatorFreqEst = 0
      if self.networkDifferenceCmdCounts is None:
        self.networkDifferenceCmdCounts = 0
      if self.networkDriftCmdCounts is None:
        self.networkDriftCmdCounts = 0
      if self.networkPpsCount is None:
        self.networkPpsCount = 0
      if self.gpsPpsCount is None:
        self.gpsPpsCount = 0
    else:
      self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      self.dataValid = False
      self.networkDifferenceCounts = 0
      self.networkDriftCounts = 0
      self.oscillatorFreqEst = 0
      self.networkDifferenceCmdCounts = 0
      self.networkDriftCmdCounts = 0
      self.networkPpsCount = 0
      self.gpsPpsCount = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IdB5i2I().pack(_x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timeOfValidity is None:
        self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount,) = _get_struct_IdB5i2I().unpack(str[start:end])
      self.dataValid = bool(self.dataValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IdB5i2I().pack(_x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timeOfValidity is None:
        self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.dataValid, _x.networkDifferenceCounts, _x.networkDriftCounts, _x.oscillatorFreqEst, _x.networkDifferenceCmdCounts, _x.networkDriftCmdCounts, _x.networkPpsCount, _x.gpsPpsCount,) = _get_struct_IdB5i2I().unpack(str[start:end])
      self.dataValid = bool(self.dataValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IdB5i2I = None
def _get_struct_IdB5i2I():
    global _struct_IdB5i2I
    if _struct_IdB5i2I is None:
        _struct_IdB5i2I = struct.Struct("<IdB5i2I")
    return _struct_IdB5i2I
