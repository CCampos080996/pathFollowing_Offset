# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/AssuranceState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg
import std_msgs.msg

class AssuranceState(genpy.Message):
  _md5sum = "1b5a45d7bfb7095220320d230d9c3c4a"
  _type = "ros_sensor_msgs/AssuranceState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """  std_msgs/Header            header
  LlhPositionTagged          localPosition
  DualNodeAssuranceData[]    dualNodeData
  SingleNodeAssuranceData    singleNodeData
  AssuranceCheckValue[]      prnAssuranceValues
  AssuranceLevel             assuranceLevel
  float64                    filteredLevel
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ros_sensor_msgs/LlhPositionTagged
## LlhPositionTagged

std_msgs/Header   header
Tags              tags
LlhPosition       llhPosition
================================================================================
MSG: ros_sensor_msgs/Tags
## Header structure for user defined data messages

GpsTime        gpsTime
SensorType     sensor
ReceiverType   receiver   # String to specify GNSS receiver type
KeyStatus      key
string         sensorName
SourceType     source
bool           dataValid
AssuranceLevel assuranceLevel
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: ros_sensor_msgs/SensorType
## Sensor Type

uint8 SensorTypeUnknown = 0
uint8 SensorTypeGps     = 1
uint8 SensorTypeGlonass = 2
uint8 SensorTypeGalileo = 4
uint8 SensorTypeImu     = 8
uint8 SensorRfRange     = 16
uint8 SensorTypeVision  = 32

uint8 type
================================================================================
MSG: ros_sensor_msgs/ReceiverType
uint8 RECEIVER_TYPE_UBLOX = 0
uint8 RECEIVER_TYPE_NOVATEL = 1
uint8 RECEIVER_TYPE_DAGR = 2
uint8 RECEIVER_TYPE_MICROGRAM = 3
uint8 RECEIVER_TYPE_TRUTRAK = 4
uint8 RECEIVER_TYPE_GSSIP = 5
uint8 RECEIVER_TYPE_OTHER = 14
uint8 RECEIVER_TYPE_UNKNOWN = 15
uint8 type
================================================================================
MSG: ros_sensor_msgs/KeyStatus
## KeyStatus

uint8 UnauthorizedNotKeyed = 0
uint8 AuthorizedNotKeyed   = 1
uint8 Keyed                = 2

uint8 status
================================================================================
MSG: ros_sensor_msgs/SourceType
## Source of data

uint8 SourceTypeUnknown  = 0
uint8 SourceTypeReceiver = 1
uint8 SourceTypeNetwork  = 2
uint8 SourceTypeRinex    = 3
uint8 SourceTypeAny      = 99

uint8 type
================================================================================
MSG: ros_sensor_msgs/AssuranceLevel
uint8  Normal   = 0
uint8  Unknown  = 1
uint8  Warning  = 2
uint8  Attack   = 3

uint8 level
================================================================================
MSG: ros_sensor_msgs/LlhPosition
# # LlhPosition

float64                  latitude   # [deg]
float64                  longitude  # [deg]
float64                  altitude   # [m]
uint16                   horizontalAccuracy
uint16                   verticalAccuracy
================================================================================
MSG: ros_sensor_msgs/DualNodeAssuranceData
  string             remoteNodeIp
  LlhPositionTagged  remotePosition
  RfRangeStamped     rfRange
  float64            nodeRange
  AssuranceLevel     rangeCheckAssuranceLevel
  PrnDifference[]    singleDifferences
  uint32             basePrn
  PrnDifference[]    doubleDifferences
  AssuranceLevel     diffCheckAssuranceLevel
================================================================================
MSG: ros_sensor_msgs/RfRangeStamped
# Range to specified object
std_msgs/Header   header
RfRange           range
================================================================================
MSG: ros_sensor_msgs/RfRange
# Range to specified object
float64 range
float64 rangeRate
float64 rangeVariance
float64 rangeRateVariance
uint32  timestamp
uint32  sourceId
uint32  destId
uint16  rssi
uint16  quality

================================================================================
MSG: ros_sensor_msgs/PrnDifference
uint32   prn
float64  difference
================================================================================
MSG: ros_sensor_msgs/SingleNodeAssuranceData
PrnDifference[]  pseudoDopplerDiffs
AssuranceLevel   pseudoDopplerDiffAssuranceLevel
PrnDifference[]  carrierToNoiseCheckData
AssuranceLevel   cnoCheckAssuranceLevel
================================================================================
MSG: ros_sensor_msgs/AssuranceCheckValue
## An assurance check value for a given prn

uint32    prn
uint32    checkVal"""
  __slots__ = ['header','localPosition','dualNodeData','singleNodeData','prnAssuranceValues','assuranceLevel','filteredLevel']
  _slot_types = ['std_msgs/Header','ros_sensor_msgs/LlhPositionTagged','ros_sensor_msgs/DualNodeAssuranceData[]','ros_sensor_msgs/SingleNodeAssuranceData','ros_sensor_msgs/AssuranceCheckValue[]','ros_sensor_msgs/AssuranceLevel','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,localPosition,dualNodeData,singleNodeData,prnAssuranceValues,assuranceLevel,filteredLevel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AssuranceState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.localPosition is None:
        self.localPosition = ros_sensor_msgs.msg.LlhPositionTagged()
      if self.dualNodeData is None:
        self.dualNodeData = []
      if self.singleNodeData is None:
        self.singleNodeData = ros_sensor_msgs.msg.SingleNodeAssuranceData()
      if self.prnAssuranceValues is None:
        self.prnAssuranceValues = []
      if self.assuranceLevel is None:
        self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      if self.filteredLevel is None:
        self.filteredLevel = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.localPosition = ros_sensor_msgs.msg.LlhPositionTagged()
      self.dualNodeData = []
      self.singleNodeData = ros_sensor_msgs.msg.SingleNodeAssuranceData()
      self.prnAssuranceValues = []
      self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      self.filteredLevel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.localPosition.header.seq, _x.localPosition.header.stamp.secs, _x.localPosition.header.stamp.nsecs))
      _x = self.localPosition.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.localPosition.tags.gpsTime.gps_week, _x.localPosition.tags.gpsTime.gps_seconds, _x.localPosition.tags.sensor.type, _x.localPosition.tags.receiver.type, _x.localPosition.tags.key.status))
      _x = self.localPosition.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3d2H().pack(_x.localPosition.tags.source.type, _x.localPosition.tags.dataValid, _x.localPosition.tags.assuranceLevel.level, _x.localPosition.llhPosition.latitude, _x.localPosition.llhPosition.longitude, _x.localPosition.llhPosition.altitude, _x.localPosition.llhPosition.horizontalAccuracy, _x.localPosition.llhPosition.verticalAccuracy))
      length = len(self.dualNodeData)
      buff.write(_struct_I.pack(length))
      for val1 in self.dualNodeData:
        _x = val1.remoteNodeIp
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.remotePosition
        _v2 = _v1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.tags
        _v5 = _v4.gpsTime
        _x = _v5
        buff.write(_get_struct_Id().pack(_x.gps_week, _x.gps_seconds))
        _v6 = _v4.sensor
        buff.write(_get_struct_B().pack(_v6.type))
        _v7 = _v4.receiver
        buff.write(_get_struct_B().pack(_v7.type))
        _v8 = _v4.key
        buff.write(_get_struct_B().pack(_v8.status))
        _x = _v4.sensorName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v9 = _v4.source
        buff.write(_get_struct_B().pack(_v9.type))
        buff.write(_get_struct_B().pack(_v4.dataValid))
        _v10 = _v4.assuranceLevel
        buff.write(_get_struct_B().pack(_v10.level))
        _v11 = _v1.llhPosition
        _x = _v11
        buff.write(_get_struct_3d2H().pack(_x.latitude, _x.longitude, _x.altitude, _x.horizontalAccuracy, _x.verticalAccuracy))
        _v12 = val1.rfRange
        _v13 = _v12.header
        buff.write(_get_struct_I().pack(_v13.seq))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v15 = _v12.range
        _x = _v15
        buff.write(_get_struct_4d3I2H().pack(_x.range, _x.rangeRate, _x.rangeVariance, _x.rangeRateVariance, _x.timestamp, _x.sourceId, _x.destId, _x.rssi, _x.quality))
        buff.write(_get_struct_d().pack(val1.nodeRange))
        _v16 = val1.rangeCheckAssuranceLevel
        buff.write(_get_struct_B().pack(_v16.level))
        length = len(val1.singleDifferences)
        buff.write(_struct_I.pack(length))
        for val2 in val1.singleDifferences:
          _x = val2
          buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
        buff.write(_get_struct_I().pack(val1.basePrn))
        length = len(val1.doubleDifferences)
        buff.write(_struct_I.pack(length))
        for val2 in val1.doubleDifferences:
          _x = val2
          buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
        _v17 = val1.diffCheckAssuranceLevel
        buff.write(_get_struct_B().pack(_v17.level))
      length = len(self.singleNodeData.pseudoDopplerDiffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.singleNodeData.pseudoDopplerDiffs:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.singleNodeData.pseudoDopplerDiffAssuranceLevel.level))
      length = len(self.singleNodeData.carrierToNoiseCheckData)
      buff.write(_struct_I.pack(length))
      for val1 in self.singleNodeData.carrierToNoiseCheckData:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.singleNodeData.cnoCheckAssuranceLevel.level))
      length = len(self.prnAssuranceValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.prnAssuranceValues:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
      _x = self
      buff.write(_get_struct_Bd().pack(_x.assuranceLevel.level, _x.filteredLevel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.localPosition is None:
        self.localPosition = ros_sensor_msgs.msg.LlhPositionTagged()
      if self.dualNodeData is None:
        self.dualNodeData = None
      if self.singleNodeData is None:
        self.singleNodeData = ros_sensor_msgs.msg.SingleNodeAssuranceData()
      if self.prnAssuranceValues is None:
        self.prnAssuranceValues = None
      if self.assuranceLevel is None:
        self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.localPosition.header.seq, _x.localPosition.header.stamp.secs, _x.localPosition.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localPosition.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.localPosition.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.localPosition.tags.gpsTime.gps_week, _x.localPosition.tags.gpsTime.gps_seconds, _x.localPosition.tags.sensor.type, _x.localPosition.tags.receiver.type, _x.localPosition.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localPosition.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.localPosition.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.localPosition.tags.source.type, _x.localPosition.tags.dataValid, _x.localPosition.tags.assuranceLevel.level, _x.localPosition.llhPosition.latitude, _x.localPosition.llhPosition.longitude, _x.localPosition.llhPosition.altitude, _x.localPosition.llhPosition.horizontalAccuracy, _x.localPosition.llhPosition.verticalAccuracy,) = _get_struct_3B3d2H().unpack(str[start:end])
      self.localPosition.tags.dataValid = bool(self.localPosition.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dualNodeData = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.DualNodeAssuranceData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.remoteNodeIp = str[start:end].decode('utf-8')
        else:
          val1.remoteNodeIp = str[start:end]
        _v18 = val1.remotePosition
        _v19 = _v18.header
        start = end
        end += 4
        (_v19.seq,) = _get_struct_I().unpack(str[start:end])
        _v20 = _v19.stamp
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.frame_id = str[start:end].decode('utf-8')
        else:
          _v19.frame_id = str[start:end]
        _v21 = _v18.tags
        _v22 = _v21.gpsTime
        _x = _v22
        start = end
        end += 12
        (_x.gps_week, _x.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
        _v23 = _v21.sensor
        start = end
        end += 1
        (_v23.type,) = _get_struct_B().unpack(str[start:end])
        _v24 = _v21.receiver
        start = end
        end += 1
        (_v24.type,) = _get_struct_B().unpack(str[start:end])
        _v25 = _v21.key
        start = end
        end += 1
        (_v25.status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.sensorName = str[start:end].decode('utf-8')
        else:
          _v21.sensorName = str[start:end]
        _v26 = _v21.source
        start = end
        end += 1
        (_v26.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 1
        (_v21.dataValid,) = _get_struct_B().unpack(str[start:end])
        _v21.dataValid = bool(_v21.dataValid)
        _v27 = _v21.assuranceLevel
        start = end
        end += 1
        (_v27.level,) = _get_struct_B().unpack(str[start:end])
        _v28 = _v18.llhPosition
        _x = _v28
        start = end
        end += 28
        (_x.latitude, _x.longitude, _x.altitude, _x.horizontalAccuracy, _x.verticalAccuracy,) = _get_struct_3d2H().unpack(str[start:end])
        _v29 = val1.rfRange
        _v30 = _v29.header
        start = end
        end += 4
        (_v30.seq,) = _get_struct_I().unpack(str[start:end])
        _v31 = _v30.stamp
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.frame_id = str[start:end].decode('utf-8')
        else:
          _v30.frame_id = str[start:end]
        _v32 = _v29.range
        _x = _v32
        start = end
        end += 48
        (_x.range, _x.rangeRate, _x.rangeVariance, _x.rangeRateVariance, _x.timestamp, _x.sourceId, _x.destId, _x.rssi, _x.quality,) = _get_struct_4d3I2H().unpack(str[start:end])
        start = end
        end += 8
        (val1.nodeRange,) = _get_struct_d().unpack(str[start:end])
        _v33 = val1.rangeCheckAssuranceLevel
        start = end
        end += 1
        (_v33.level,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.singleDifferences = []
        for i in range(0, length):
          val2 = ros_sensor_msgs.msg.PrnDifference()
          _x = val2
          start = end
          end += 12
          (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
          val1.singleDifferences.append(val2)
        start = end
        end += 4
        (val1.basePrn,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.doubleDifferences = []
        for i in range(0, length):
          val2 = ros_sensor_msgs.msg.PrnDifference()
          _x = val2
          start = end
          end += 12
          (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
          val1.doubleDifferences.append(val2)
        _v34 = val1.diffCheckAssuranceLevel
        start = end
        end += 1
        (_v34.level,) = _get_struct_B().unpack(str[start:end])
        self.dualNodeData.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.singleNodeData.pseudoDopplerDiffs = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.singleNodeData.pseudoDopplerDiffs.append(val1)
      start = end
      end += 1
      (self.singleNodeData.pseudoDopplerDiffAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.singleNodeData.carrierToNoiseCheckData = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.singleNodeData.carrierToNoiseCheckData.append(val1)
      start = end
      end += 1
      (self.singleNodeData.cnoCheckAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prnAssuranceValues = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.AssuranceCheckValue()
        _x = val1
        start = end
        end += 8
        (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
        self.prnAssuranceValues.append(val1)
      _x = self
      start = end
      end += 9
      (_x.assuranceLevel.level, _x.filteredLevel,) = _get_struct_Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.localPosition.header.seq, _x.localPosition.header.stamp.secs, _x.localPosition.header.stamp.nsecs))
      _x = self.localPosition.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.localPosition.tags.gpsTime.gps_week, _x.localPosition.tags.gpsTime.gps_seconds, _x.localPosition.tags.sensor.type, _x.localPosition.tags.receiver.type, _x.localPosition.tags.key.status))
      _x = self.localPosition.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3d2H().pack(_x.localPosition.tags.source.type, _x.localPosition.tags.dataValid, _x.localPosition.tags.assuranceLevel.level, _x.localPosition.llhPosition.latitude, _x.localPosition.llhPosition.longitude, _x.localPosition.llhPosition.altitude, _x.localPosition.llhPosition.horizontalAccuracy, _x.localPosition.llhPosition.verticalAccuracy))
      length = len(self.dualNodeData)
      buff.write(_struct_I.pack(length))
      for val1 in self.dualNodeData:
        _x = val1.remoteNodeIp
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v35 = val1.remotePosition
        _v36 = _v35.header
        buff.write(_get_struct_I().pack(_v36.seq))
        _v37 = _v36.stamp
        _x = _v37
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v36.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v38 = _v35.tags
        _v39 = _v38.gpsTime
        _x = _v39
        buff.write(_get_struct_Id().pack(_x.gps_week, _x.gps_seconds))
        _v40 = _v38.sensor
        buff.write(_get_struct_B().pack(_v40.type))
        _v41 = _v38.receiver
        buff.write(_get_struct_B().pack(_v41.type))
        _v42 = _v38.key
        buff.write(_get_struct_B().pack(_v42.status))
        _x = _v38.sensorName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v43 = _v38.source
        buff.write(_get_struct_B().pack(_v43.type))
        buff.write(_get_struct_B().pack(_v38.dataValid))
        _v44 = _v38.assuranceLevel
        buff.write(_get_struct_B().pack(_v44.level))
        _v45 = _v35.llhPosition
        _x = _v45
        buff.write(_get_struct_3d2H().pack(_x.latitude, _x.longitude, _x.altitude, _x.horizontalAccuracy, _x.verticalAccuracy))
        _v46 = val1.rfRange
        _v47 = _v46.header
        buff.write(_get_struct_I().pack(_v47.seq))
        _v48 = _v47.stamp
        _x = _v48
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v47.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v49 = _v46.range
        _x = _v49
        buff.write(_get_struct_4d3I2H().pack(_x.range, _x.rangeRate, _x.rangeVariance, _x.rangeRateVariance, _x.timestamp, _x.sourceId, _x.destId, _x.rssi, _x.quality))
        buff.write(_get_struct_d().pack(val1.nodeRange))
        _v50 = val1.rangeCheckAssuranceLevel
        buff.write(_get_struct_B().pack(_v50.level))
        length = len(val1.singleDifferences)
        buff.write(_struct_I.pack(length))
        for val2 in val1.singleDifferences:
          _x = val2
          buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
        buff.write(_get_struct_I().pack(val1.basePrn))
        length = len(val1.doubleDifferences)
        buff.write(_struct_I.pack(length))
        for val2 in val1.doubleDifferences:
          _x = val2
          buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
        _v51 = val1.diffCheckAssuranceLevel
        buff.write(_get_struct_B().pack(_v51.level))
      length = len(self.singleNodeData.pseudoDopplerDiffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.singleNodeData.pseudoDopplerDiffs:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.singleNodeData.pseudoDopplerDiffAssuranceLevel.level))
      length = len(self.singleNodeData.carrierToNoiseCheckData)
      buff.write(_struct_I.pack(length))
      for val1 in self.singleNodeData.carrierToNoiseCheckData:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.singleNodeData.cnoCheckAssuranceLevel.level))
      length = len(self.prnAssuranceValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.prnAssuranceValues:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
      _x = self
      buff.write(_get_struct_Bd().pack(_x.assuranceLevel.level, _x.filteredLevel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.localPosition is None:
        self.localPosition = ros_sensor_msgs.msg.LlhPositionTagged()
      if self.dualNodeData is None:
        self.dualNodeData = None
      if self.singleNodeData is None:
        self.singleNodeData = ros_sensor_msgs.msg.SingleNodeAssuranceData()
      if self.prnAssuranceValues is None:
        self.prnAssuranceValues = None
      if self.assuranceLevel is None:
        self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.localPosition.header.seq, _x.localPosition.header.stamp.secs, _x.localPosition.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localPosition.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.localPosition.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.localPosition.tags.gpsTime.gps_week, _x.localPosition.tags.gpsTime.gps_seconds, _x.localPosition.tags.sensor.type, _x.localPosition.tags.receiver.type, _x.localPosition.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localPosition.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.localPosition.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.localPosition.tags.source.type, _x.localPosition.tags.dataValid, _x.localPosition.tags.assuranceLevel.level, _x.localPosition.llhPosition.latitude, _x.localPosition.llhPosition.longitude, _x.localPosition.llhPosition.altitude, _x.localPosition.llhPosition.horizontalAccuracy, _x.localPosition.llhPosition.verticalAccuracy,) = _get_struct_3B3d2H().unpack(str[start:end])
      self.localPosition.tags.dataValid = bool(self.localPosition.tags.dataValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dualNodeData = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.DualNodeAssuranceData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.remoteNodeIp = str[start:end].decode('utf-8')
        else:
          val1.remoteNodeIp = str[start:end]
        _v52 = val1.remotePosition
        _v53 = _v52.header
        start = end
        end += 4
        (_v53.seq,) = _get_struct_I().unpack(str[start:end])
        _v54 = _v53.stamp
        _x = _v54
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v53.frame_id = str[start:end].decode('utf-8')
        else:
          _v53.frame_id = str[start:end]
        _v55 = _v52.tags
        _v56 = _v55.gpsTime
        _x = _v56
        start = end
        end += 12
        (_x.gps_week, _x.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
        _v57 = _v55.sensor
        start = end
        end += 1
        (_v57.type,) = _get_struct_B().unpack(str[start:end])
        _v58 = _v55.receiver
        start = end
        end += 1
        (_v58.type,) = _get_struct_B().unpack(str[start:end])
        _v59 = _v55.key
        start = end
        end += 1
        (_v59.status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.sensorName = str[start:end].decode('utf-8')
        else:
          _v55.sensorName = str[start:end]
        _v60 = _v55.source
        start = end
        end += 1
        (_v60.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 1
        (_v55.dataValid,) = _get_struct_B().unpack(str[start:end])
        _v55.dataValid = bool(_v55.dataValid)
        _v61 = _v55.assuranceLevel
        start = end
        end += 1
        (_v61.level,) = _get_struct_B().unpack(str[start:end])
        _v62 = _v52.llhPosition
        _x = _v62
        start = end
        end += 28
        (_x.latitude, _x.longitude, _x.altitude, _x.horizontalAccuracy, _x.verticalAccuracy,) = _get_struct_3d2H().unpack(str[start:end])
        _v63 = val1.rfRange
        _v64 = _v63.header
        start = end
        end += 4
        (_v64.seq,) = _get_struct_I().unpack(str[start:end])
        _v65 = _v64.stamp
        _x = _v65
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v64.frame_id = str[start:end].decode('utf-8')
        else:
          _v64.frame_id = str[start:end]
        _v66 = _v63.range
        _x = _v66
        start = end
        end += 48
        (_x.range, _x.rangeRate, _x.rangeVariance, _x.rangeRateVariance, _x.timestamp, _x.sourceId, _x.destId, _x.rssi, _x.quality,) = _get_struct_4d3I2H().unpack(str[start:end])
        start = end
        end += 8
        (val1.nodeRange,) = _get_struct_d().unpack(str[start:end])
        _v67 = val1.rangeCheckAssuranceLevel
        start = end
        end += 1
        (_v67.level,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.singleDifferences = []
        for i in range(0, length):
          val2 = ros_sensor_msgs.msg.PrnDifference()
          _x = val2
          start = end
          end += 12
          (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
          val1.singleDifferences.append(val2)
        start = end
        end += 4
        (val1.basePrn,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.doubleDifferences = []
        for i in range(0, length):
          val2 = ros_sensor_msgs.msg.PrnDifference()
          _x = val2
          start = end
          end += 12
          (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
          val1.doubleDifferences.append(val2)
        _v68 = val1.diffCheckAssuranceLevel
        start = end
        end += 1
        (_v68.level,) = _get_struct_B().unpack(str[start:end])
        self.dualNodeData.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.singleNodeData.pseudoDopplerDiffs = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.singleNodeData.pseudoDopplerDiffs.append(val1)
      start = end
      end += 1
      (self.singleNodeData.pseudoDopplerDiffAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.singleNodeData.carrierToNoiseCheckData = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.singleNodeData.carrierToNoiseCheckData.append(val1)
      start = end
      end += 1
      (self.singleNodeData.cnoCheckAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prnAssuranceValues = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.AssuranceCheckValue()
        _x = val1
        start = end
        end += 8
        (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
        self.prnAssuranceValues.append(val1)
      _x = self
      start = end
      end += 9
      (_x.assuranceLevel.level, _x.filteredLevel,) = _get_struct_Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d3I2H = None
def _get_struct_4d3I2H():
    global _struct_4d3I2H
    if _struct_4d3I2H is None:
        _struct_4d3I2H = struct.Struct("<4d3I2H")
    return _struct_4d3I2H
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_Id3B = None
def _get_struct_Id3B():
    global _struct_Id3B
    if _struct_Id3B is None:
        _struct_Id3B = struct.Struct("<Id3B")
    return _struct_Id3B
_struct_3B3d2H = None
def _get_struct_3B3d2H():
    global _struct_3B3d2H
    if _struct_3B3d2H is None:
        _struct_3B3d2H = struct.Struct("<3B3d2H")
    return _struct_3B3d2H
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d2H = None
def _get_struct_3d2H():
    global _struct_3d2H
    if _struct_3d2H is None:
        _struct_3d2H = struct.Struct("<3d2H")
    return _struct_3d2H
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
