# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/CmdGpsAssist.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CmdGpsAssist(genpy.Message):
  _md5sum = "9888cfe375cffb0c1d61c05b99896408"
  _type = "ros_sensor_msgs/CmdGpsAssist"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool assist_time
bool assist_position
bool assist_gps_ephemeris
bool assist_gps_almanac
bool assist_gps_utc_iono
bool assist_precise_time"""
  __slots__ = ['assist_time','assist_position','assist_gps_ephemeris','assist_gps_almanac','assist_gps_utc_iono','assist_precise_time']
  _slot_types = ['bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       assist_time,assist_position,assist_gps_ephemeris,assist_gps_almanac,assist_gps_utc_iono,assist_precise_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CmdGpsAssist, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.assist_time is None:
        self.assist_time = False
      if self.assist_position is None:
        self.assist_position = False
      if self.assist_gps_ephemeris is None:
        self.assist_gps_ephemeris = False
      if self.assist_gps_almanac is None:
        self.assist_gps_almanac = False
      if self.assist_gps_utc_iono is None:
        self.assist_gps_utc_iono = False
      if self.assist_precise_time is None:
        self.assist_precise_time = False
    else:
      self.assist_time = False
      self.assist_position = False
      self.assist_gps_ephemeris = False
      self.assist_gps_almanac = False
      self.assist_gps_utc_iono = False
      self.assist_precise_time = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.assist_time, _x.assist_position, _x.assist_gps_ephemeris, _x.assist_gps_almanac, _x.assist_gps_utc_iono, _x.assist_precise_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.assist_time, _x.assist_position, _x.assist_gps_ephemeris, _x.assist_gps_almanac, _x.assist_gps_utc_iono, _x.assist_precise_time,) = _get_struct_6B().unpack(str[start:end])
      self.assist_time = bool(self.assist_time)
      self.assist_position = bool(self.assist_position)
      self.assist_gps_ephemeris = bool(self.assist_gps_ephemeris)
      self.assist_gps_almanac = bool(self.assist_gps_almanac)
      self.assist_gps_utc_iono = bool(self.assist_gps_utc_iono)
      self.assist_precise_time = bool(self.assist_precise_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.assist_time, _x.assist_position, _x.assist_gps_ephemeris, _x.assist_gps_almanac, _x.assist_gps_utc_iono, _x.assist_precise_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.assist_time, _x.assist_position, _x.assist_gps_ephemeris, _x.assist_gps_almanac, _x.assist_gps_utc_iono, _x.assist_precise_time,) = _get_struct_6B().unpack(str[start:end])
      self.assist_time = bool(self.assist_time)
      self.assist_position = bool(self.assist_position)
      self.assist_gps_ephemeris = bool(self.assist_gps_ephemeris)
      self.assist_gps_almanac = bool(self.assist_gps_almanac)
      self.assist_gps_utc_iono = bool(self.assist_gps_utc_iono)
      self.assist_precise_time = bool(self.assist_precise_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
