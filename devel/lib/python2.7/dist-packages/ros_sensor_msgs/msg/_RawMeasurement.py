# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/RawMeasurement.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class RawMeasurement(genpy.Message):
  _md5sum = "beb1d4f15a4abead550e7439d0f65ebb"
  _type = "ros_sensor_msgs/RawMeasurement"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## Raw measurements for a single channel

uint16        prn                     # GPS [1-32], GLONASS may be negative
float64       pseudorange             # [m]
float32		  pseudorange_variance	  # [m^2]
FrequencyType frequency               # 
float64       carrier_phase           # [m]
float32		  carrier_phase_variance  # [m^2]
float64       doppler                 # [Hz]
float32       doppler_variance		  # [Hz^2]
float64       carrier_to_noise        # [db-Hz]
bool          loss_of_lock            # True - indicates likely loss of
                                      # carrier lock in previous interval
================================================================================
MSG: ros_sensor_msgs/FrequencyType
## Frequency Type

uint8 FrequencyTypeUnknown      = 0
uint8 FrequencyTypeL1           = 1
uint8 FrequencyTypeL2           = 2
uint8 FrequencyTypeL5           = 3
uint8 FrequencyTypeGalileoE1    = 4
uint8 FrequencyTypeGalileoE5    = 5
uint8 FrequencyTypeGalileoE6    = 6
uint8 FrequencyTypeGalileoC     = 7
uint8 FrequencyTypeGlonassL1F   = 8
uint8 FrequencyTypeGlonassL2F   = 9
uint8 FrequencyTypeGlonassL1C   = 10
uint8 FrequencyTypeGlonassL2C   = 11
uint8 FrequencyTypeGlonassL3C   = 12

uint8 type"""
  __slots__ = ['prn','pseudorange','pseudorange_variance','frequency','carrier_phase','carrier_phase_variance','doppler','doppler_variance','carrier_to_noise','loss_of_lock']
  _slot_types = ['uint16','float64','float32','ros_sensor_msgs/FrequencyType','float64','float32','float64','float32','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,pseudorange,pseudorange_variance,frequency,carrier_phase,carrier_phase_variance,doppler,doppler_variance,carrier_to_noise,loss_of_lock

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawMeasurement, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = 0
      if self.pseudorange is None:
        self.pseudorange = 0.
      if self.pseudorange_variance is None:
        self.pseudorange_variance = 0.
      if self.frequency is None:
        self.frequency = ros_sensor_msgs.msg.FrequencyType()
      if self.carrier_phase is None:
        self.carrier_phase = 0.
      if self.carrier_phase_variance is None:
        self.carrier_phase_variance = 0.
      if self.doppler is None:
        self.doppler = 0.
      if self.doppler_variance is None:
        self.doppler_variance = 0.
      if self.carrier_to_noise is None:
        self.carrier_to_noise = 0.
      if self.loss_of_lock is None:
        self.loss_of_lock = False
    else:
      self.prn = 0
      self.pseudorange = 0.
      self.pseudorange_variance = 0.
      self.frequency = ros_sensor_msgs.msg.FrequencyType()
      self.carrier_phase = 0.
      self.carrier_phase_variance = 0.
      self.doppler = 0.
      self.doppler_variance = 0.
      self.carrier_to_noise = 0.
      self.loss_of_lock = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HdfBdfdfdB().pack(_x.prn, _x.pseudorange, _x.pseudorange_variance, _x.frequency.type, _x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.frequency is None:
        self.frequency = ros_sensor_msgs.msg.FrequencyType()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.prn, _x.pseudorange, _x.pseudorange_variance, _x.frequency.type, _x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock,) = _get_struct_HdfBdfdfdB().unpack(str[start:end])
      self.loss_of_lock = bool(self.loss_of_lock)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HdfBdfdfdB().pack(_x.prn, _x.pseudorange, _x.pseudorange_variance, _x.frequency.type, _x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.frequency is None:
        self.frequency = ros_sensor_msgs.msg.FrequencyType()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.prn, _x.pseudorange, _x.pseudorange_variance, _x.frequency.type, _x.carrier_phase, _x.carrier_phase_variance, _x.doppler, _x.doppler_variance, _x.carrier_to_noise, _x.loss_of_lock,) = _get_struct_HdfBdfdfdB().unpack(str[start:end])
      self.loss_of_lock = bool(self.loss_of_lock)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HdfBdfdfdB = None
def _get_struct_HdfBdfdfdB():
    global _struct_HdfBdfdfdB
    if _struct_HdfBdfdfdB is None:
        _struct_HdfBdfdfdB = struct.Struct("<HdfBdfdfdB")
    return _struct_HdfBdfdfdB
