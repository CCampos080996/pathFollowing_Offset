# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/GnssFix.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class GnssFix(genpy.Message):
  _md5sum = "6e5620648cab804bd0f37c21067cabe9"
  _type = "ros_sensor_msgs/GnssFix"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
FixStatus                fixStatus
GpsTime                  timeOfValidity
LlhPosition              llhPosition
EnuVelocity              enuVelocity          
float64[9] 				 positionCovariance

uint8 COVARIANCE_TYPE_UNKNOWN = 0
uint8 COVARIANCE_TYPE_APPROXIMATED = 1
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2
uint8 COVARIANCE_TYPE_KNOWN = 3
uint8 position_covariance_type
================================================================================
MSG: ros_sensor_msgs/FixStatus
# # FixStatus

FixType fix
uint32  numSvs
float64  ttff
================================================================================
MSG: ros_sensor_msgs/FixType
## Fix Type

uint8 FixTypeNone = 0
uint8 FixTypeDeadReckoning = 1
uint8 FixType2D = 2
uint8 FixType3D = 3
uint8 FixTypeDRand3D = 4 ## Dead reckoning and GPS fix
uint8 FixTypeTimeOnly = 5
uint8 FixTypeStatic = 9

uint8 type
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: ros_sensor_msgs/LlhPosition
# # LlhPosition

float64                  latitude   # [deg]
float64                  longitude  # [deg]
float64                  altitude   # [m]
uint16                   horizontalAccuracy
uint16                   verticalAccuracy
================================================================================
MSG: ros_sensor_msgs/EnuVelocity
float64					 eastVelocity
float64                  northVelocity
float64                  upVelocity
float32                  horizontalAccuracy
float32                  verticalAccuracy    """
  # Pseudo-constants
  COVARIANCE_TYPE_UNKNOWN = 0
  COVARIANCE_TYPE_APPROXIMATED = 1
  COVARIANCE_TYPE_DIAGONAL_KNOWN = 2
  COVARIANCE_TYPE_KNOWN = 3

  __slots__ = ['fixStatus','timeOfValidity','llhPosition','enuVelocity','positionCovariance','position_covariance_type']
  _slot_types = ['ros_sensor_msgs/FixStatus','ros_sensor_msgs/GpsTime','ros_sensor_msgs/LlhPosition','ros_sensor_msgs/EnuVelocity','float64[9]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fixStatus,timeOfValidity,llhPosition,enuVelocity,positionCovariance,position_covariance_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssFix, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fixStatus is None:
        self.fixStatus = ros_sensor_msgs.msg.FixStatus()
      if self.timeOfValidity is None:
        self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      if self.llhPosition is None:
        self.llhPosition = ros_sensor_msgs.msg.LlhPosition()
      if self.enuVelocity is None:
        self.enuVelocity = ros_sensor_msgs.msg.EnuVelocity()
      if self.positionCovariance is None:
        self.positionCovariance = [0.] * 9
      if self.position_covariance_type is None:
        self.position_covariance_type = 0
    else:
      self.fixStatus = ros_sensor_msgs.msg.FixStatus()
      self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      self.llhPosition = ros_sensor_msgs.msg.LlhPosition()
      self.enuVelocity = ros_sensor_msgs.msg.EnuVelocity()
      self.positionCovariance = [0.] * 9
      self.position_covariance_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BIdI4d2H3d2f().pack(_x.fixStatus.fix.type, _x.fixStatus.numSvs, _x.fixStatus.ttff, _x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.llhPosition.latitude, _x.llhPosition.longitude, _x.llhPosition.altitude, _x.llhPosition.horizontalAccuracy, _x.llhPosition.verticalAccuracy, _x.enuVelocity.eastVelocity, _x.enuVelocity.northVelocity, _x.enuVelocity.upVelocity, _x.enuVelocity.horizontalAccuracy, _x.enuVelocity.verticalAccuracy))
      buff.write(_get_struct_9d().pack(*self.positionCovariance))
      buff.write(_get_struct_B().pack(self.position_covariance_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.fixStatus is None:
        self.fixStatus = ros_sensor_msgs.msg.FixStatus()
      if self.timeOfValidity is None:
        self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      if self.llhPosition is None:
        self.llhPosition = ros_sensor_msgs.msg.LlhPosition()
      if self.enuVelocity is None:
        self.enuVelocity = ros_sensor_msgs.msg.EnuVelocity()
      end = 0
      _x = self
      start = end
      end += 85
      (_x.fixStatus.fix.type, _x.fixStatus.numSvs, _x.fixStatus.ttff, _x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.llhPosition.latitude, _x.llhPosition.longitude, _x.llhPosition.altitude, _x.llhPosition.horizontalAccuracy, _x.llhPosition.verticalAccuracy, _x.enuVelocity.eastVelocity, _x.enuVelocity.northVelocity, _x.enuVelocity.upVelocity, _x.enuVelocity.horizontalAccuracy, _x.enuVelocity.verticalAccuracy,) = _get_struct_BIdI4d2H3d2f().unpack(str[start:end])
      start = end
      end += 72
      self.positionCovariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 1
      (self.position_covariance_type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BIdI4d2H3d2f().pack(_x.fixStatus.fix.type, _x.fixStatus.numSvs, _x.fixStatus.ttff, _x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.llhPosition.latitude, _x.llhPosition.longitude, _x.llhPosition.altitude, _x.llhPosition.horizontalAccuracy, _x.llhPosition.verticalAccuracy, _x.enuVelocity.eastVelocity, _x.enuVelocity.northVelocity, _x.enuVelocity.upVelocity, _x.enuVelocity.horizontalAccuracy, _x.enuVelocity.verticalAccuracy))
      buff.write(self.positionCovariance.tostring())
      buff.write(_get_struct_B().pack(self.position_covariance_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.fixStatus is None:
        self.fixStatus = ros_sensor_msgs.msg.FixStatus()
      if self.timeOfValidity is None:
        self.timeOfValidity = ros_sensor_msgs.msg.GpsTime()
      if self.llhPosition is None:
        self.llhPosition = ros_sensor_msgs.msg.LlhPosition()
      if self.enuVelocity is None:
        self.enuVelocity = ros_sensor_msgs.msg.EnuVelocity()
      end = 0
      _x = self
      start = end
      end += 85
      (_x.fixStatus.fix.type, _x.fixStatus.numSvs, _x.fixStatus.ttff, _x.timeOfValidity.gps_week, _x.timeOfValidity.gps_seconds, _x.llhPosition.latitude, _x.llhPosition.longitude, _x.llhPosition.altitude, _x.llhPosition.horizontalAccuracy, _x.llhPosition.verticalAccuracy, _x.enuVelocity.eastVelocity, _x.enuVelocity.northVelocity, _x.enuVelocity.upVelocity, _x.enuVelocity.horizontalAccuracy, _x.enuVelocity.verticalAccuracy,) = _get_struct_BIdI4d2H3d2f().unpack(str[start:end])
      start = end
      end += 72
      self.positionCovariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 1
      (self.position_covariance_type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BIdI4d2H3d2f = None
def _get_struct_BIdI4d2H3d2f():
    global _struct_BIdI4d2H3d2f
    if _struct_BIdI4d2H3d2f is None:
        _struct_BIdI4d2H3d2f = struct.Struct("<BIdI4d2H3d2f")
    return _struct_BIdI4d2H3d2f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
