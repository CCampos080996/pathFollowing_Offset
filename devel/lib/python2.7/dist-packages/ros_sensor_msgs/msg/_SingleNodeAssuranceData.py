# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/SingleNodeAssuranceData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class SingleNodeAssuranceData(genpy.Message):
  _md5sum = "4197bc43f12a41cc3da00c30445631eb"
  _type = "ros_sensor_msgs/SingleNodeAssuranceData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """PrnDifference[]  pseudoDopplerDiffs
AssuranceLevel   pseudoDopplerDiffAssuranceLevel
PrnDifference[]  carrierToNoiseCheckData
AssuranceLevel   cnoCheckAssuranceLevel
================================================================================
MSG: ros_sensor_msgs/PrnDifference
uint32   prn
float64  difference
================================================================================
MSG: ros_sensor_msgs/AssuranceLevel
uint8  Normal   = 0
uint8  Unknown  = 1
uint8  Warning  = 2
uint8  Attack   = 3

uint8 level"""
  __slots__ = ['pseudoDopplerDiffs','pseudoDopplerDiffAssuranceLevel','carrierToNoiseCheckData','cnoCheckAssuranceLevel']
  _slot_types = ['ros_sensor_msgs/PrnDifference[]','ros_sensor_msgs/AssuranceLevel','ros_sensor_msgs/PrnDifference[]','ros_sensor_msgs/AssuranceLevel']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pseudoDopplerDiffs,pseudoDopplerDiffAssuranceLevel,carrierToNoiseCheckData,cnoCheckAssuranceLevel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SingleNodeAssuranceData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pseudoDopplerDiffs is None:
        self.pseudoDopplerDiffs = []
      if self.pseudoDopplerDiffAssuranceLevel is None:
        self.pseudoDopplerDiffAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      if self.carrierToNoiseCheckData is None:
        self.carrierToNoiseCheckData = []
      if self.cnoCheckAssuranceLevel is None:
        self.cnoCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
    else:
      self.pseudoDopplerDiffs = []
      self.pseudoDopplerDiffAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      self.carrierToNoiseCheckData = []
      self.cnoCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.pseudoDopplerDiffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.pseudoDopplerDiffs:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.pseudoDopplerDiffAssuranceLevel.level))
      length = len(self.carrierToNoiseCheckData)
      buff.write(_struct_I.pack(length))
      for val1 in self.carrierToNoiseCheckData:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.cnoCheckAssuranceLevel.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pseudoDopplerDiffs is None:
        self.pseudoDopplerDiffs = None
      if self.pseudoDopplerDiffAssuranceLevel is None:
        self.pseudoDopplerDiffAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      if self.carrierToNoiseCheckData is None:
        self.carrierToNoiseCheckData = None
      if self.cnoCheckAssuranceLevel is None:
        self.cnoCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pseudoDopplerDiffs = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.pseudoDopplerDiffs.append(val1)
      start = end
      end += 1
      (self.pseudoDopplerDiffAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.carrierToNoiseCheckData = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.carrierToNoiseCheckData.append(val1)
      start = end
      end += 1
      (self.cnoCheckAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.pseudoDopplerDiffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.pseudoDopplerDiffs:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.pseudoDopplerDiffAssuranceLevel.level))
      length = len(self.carrierToNoiseCheckData)
      buff.write(_struct_I.pack(length))
      for val1 in self.carrierToNoiseCheckData:
        _x = val1
        buff.write(_get_struct_Id().pack(_x.prn, _x.difference))
      buff.write(_get_struct_B().pack(self.cnoCheckAssuranceLevel.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pseudoDopplerDiffs is None:
        self.pseudoDopplerDiffs = None
      if self.pseudoDopplerDiffAssuranceLevel is None:
        self.pseudoDopplerDiffAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      if self.carrierToNoiseCheckData is None:
        self.carrierToNoiseCheckData = None
      if self.cnoCheckAssuranceLevel is None:
        self.cnoCheckAssuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pseudoDopplerDiffs = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.pseudoDopplerDiffs.append(val1)
      start = end
      end += 1
      (self.pseudoDopplerDiffAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.carrierToNoiseCheckData = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.PrnDifference()
        _x = val1
        start = end
        end += 12
        (_x.prn, _x.difference,) = _get_struct_Id().unpack(str[start:end])
        self.carrierToNoiseCheckData.append(val1)
      start = end
      end += 1
      (self.cnoCheckAssuranceLevel.level,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
