# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/GpsEphemeris.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GpsEphemeris(genpy.Message):
  _md5sum = "572e67f241916f12c8e2d567d3205ad7"
  _type = "ros_sensor_msgs/GpsEphemeris"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## Gps Ephemeris subframes for one satellite

uint16      prn
uint8[30]   subframe1
uint8[30]   subframe2
uint8[30]   subframe3"""
  __slots__ = ['prn','subframe1','subframe2','subframe3']
  _slot_types = ['uint16','uint8[30]','uint8[30]','uint8[30]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,subframe1,subframe2,subframe3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsEphemeris, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = 0
      if self.subframe1 is None:
        self.subframe1 = b'\0'*30
      if self.subframe2 is None:
        self.subframe2 = b'\0'*30
      if self.subframe3 is None:
        self.subframe3 = b'\0'*30
    else:
      self.prn = 0
      self.subframe1 = b'\0'*30
      self.subframe2 = b'\0'*30
      self.subframe3 = b'\0'*30

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_H().pack(self.prn))
      _x = self.subframe1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self.subframe2
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self.subframe3
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 2
      (self.prn,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 30
      self.subframe1 = str[start:end]
      start = end
      end += 30
      self.subframe2 = str[start:end]
      start = end
      end += 30
      self.subframe3 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_H().pack(self.prn))
      _x = self.subframe1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self.subframe2
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
      _x = self.subframe3
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_30B().pack(*_x))
      else:
        buff.write(_get_struct_30s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.prn,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 30
      self.subframe1 = str[start:end]
      start = end
      end += 30
      self.subframe2 = str[start:end]
      start = end
      end += 30
      self.subframe3 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_30B = None
def _get_struct_30B():
    global _struct_30B
    if _struct_30B is None:
        _struct_30B = struct.Struct("<30B")
    return _struct_30B
_struct_30s = None
def _get_struct_30s():
    global _struct_30s
    if _struct_30s is None:
        _struct_30s = struct.Struct("<30s")
    return _struct_30s
