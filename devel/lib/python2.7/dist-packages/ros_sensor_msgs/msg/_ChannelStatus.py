# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/ChannelStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class ChannelStatus(genpy.Message):
  _md5sum = "10bf0cee067be1677c1f456497b33d3b"
  _type = "ros_sensor_msgs/ChannelStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """###Channel Status

uint32         prn
uint32         receiverChannel
uint32         carrierToNoise   # db-Hz
float32        azimuth
float32        elevation
TrackingStatus tracking
CodeType       code
FrequencyType  frequency
bool           usedInSolution
================================================================================
MSG: ros_sensor_msgs/TrackingStatus
## Tracking Status

uint8 Idle                        = 0
uint8 SearchingCa                 = 1
uint8 SearchingPy                 = 2
uint8 CodeLock                    = 3
uint8 CarrierLock                 = 4
uint8 CarrierTrackDataCollect     = 5
uint8 SequentialResynchronization = 6
uint8 Reacquisition               = 7
uint8 Unusable                    = 8

uint8 status
================================================================================
MSG: ros_sensor_msgs/CodeType
## Code Type

uint8 CodeTypeUnknown         = 0
uint8 CodeTypeGpsCa           = 1
uint8 CodeTypeGpsP            = 2
uint8 CodeTypeGpsPCodeless    = 3
uint8 CodeTypeGpsY            = 4
uint8 CodeTypeGpsC            = 5
uint8 CodeTypeGpsCCodeless    = 6
uint8 CodeTypeGpsM            = 8
uint8 CodeTypeGpsMPrime       = 9

uint8 CodeTypeGlonass  = 16
uint8 CodeTypeGalileo  = 32

uint8 type
================================================================================
MSG: ros_sensor_msgs/FrequencyType
## Frequency Type

uint8 FrequencyTypeUnknown      = 0
uint8 FrequencyTypeL1           = 1
uint8 FrequencyTypeL2           = 2
uint8 FrequencyTypeL5           = 3
uint8 FrequencyTypeGalileoE1    = 4
uint8 FrequencyTypeGalileoE5    = 5
uint8 FrequencyTypeGalileoE6    = 6
uint8 FrequencyTypeGalileoC     = 7
uint8 FrequencyTypeGlonassL1F   = 8
uint8 FrequencyTypeGlonassL2F   = 9
uint8 FrequencyTypeGlonassL1C   = 10
uint8 FrequencyTypeGlonassL2C   = 11
uint8 FrequencyTypeGlonassL3C   = 12

uint8 type"""
  __slots__ = ['prn','receiverChannel','carrierToNoise','azimuth','elevation','tracking','code','frequency','usedInSolution']
  _slot_types = ['uint32','uint32','uint32','float32','float32','ros_sensor_msgs/TrackingStatus','ros_sensor_msgs/CodeType','ros_sensor_msgs/FrequencyType','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,receiverChannel,carrierToNoise,azimuth,elevation,tracking,code,frequency,usedInSolution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChannelStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = 0
      if self.receiverChannel is None:
        self.receiverChannel = 0
      if self.carrierToNoise is None:
        self.carrierToNoise = 0
      if self.azimuth is None:
        self.azimuth = 0.
      if self.elevation is None:
        self.elevation = 0.
      if self.tracking is None:
        self.tracking = ros_sensor_msgs.msg.TrackingStatus()
      if self.code is None:
        self.code = ros_sensor_msgs.msg.CodeType()
      if self.frequency is None:
        self.frequency = ros_sensor_msgs.msg.FrequencyType()
      if self.usedInSolution is None:
        self.usedInSolution = False
    else:
      self.prn = 0
      self.receiverChannel = 0
      self.carrierToNoise = 0
      self.azimuth = 0.
      self.elevation = 0.
      self.tracking = ros_sensor_msgs.msg.TrackingStatus()
      self.code = ros_sensor_msgs.msg.CodeType()
      self.frequency = ros_sensor_msgs.msg.FrequencyType()
      self.usedInSolution = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I2f4B().pack(_x.prn, _x.receiverChannel, _x.carrierToNoise, _x.azimuth, _x.elevation, _x.tracking.status, _x.code.type, _x.frequency.type, _x.usedInSolution))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tracking is None:
        self.tracking = ros_sensor_msgs.msg.TrackingStatus()
      if self.code is None:
        self.code = ros_sensor_msgs.msg.CodeType()
      if self.frequency is None:
        self.frequency = ros_sensor_msgs.msg.FrequencyType()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.prn, _x.receiverChannel, _x.carrierToNoise, _x.azimuth, _x.elevation, _x.tracking.status, _x.code.type, _x.frequency.type, _x.usedInSolution,) = _get_struct_3I2f4B().unpack(str[start:end])
      self.usedInSolution = bool(self.usedInSolution)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I2f4B().pack(_x.prn, _x.receiverChannel, _x.carrierToNoise, _x.azimuth, _x.elevation, _x.tracking.status, _x.code.type, _x.frequency.type, _x.usedInSolution))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tracking is None:
        self.tracking = ros_sensor_msgs.msg.TrackingStatus()
      if self.code is None:
        self.code = ros_sensor_msgs.msg.CodeType()
      if self.frequency is None:
        self.frequency = ros_sensor_msgs.msg.FrequencyType()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.prn, _x.receiverChannel, _x.carrierToNoise, _x.azimuth, _x.elevation, _x.tracking.status, _x.code.type, _x.frequency.type, _x.usedInSolution,) = _get_struct_3I2f4B().unpack(str[start:end])
      self.usedInSolution = bool(self.usedInSolution)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I2f4B = None
def _get_struct_3I2f4B():
    global _struct_3I2f4B
    if _struct_3I2f4B is None:
        _struct_3I2f4B = struct.Struct("<3I2f4B")
    return _struct_3I2f4B
