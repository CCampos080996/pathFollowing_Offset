# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/AtmosphericCorrection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AtmosphericCorrection(genpy.Message):
  _md5sum = "92e3c73c19da61c0e7d80415c20426e9"
  _type = "ros_sensor_msgs/AtmosphericCorrection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## The GPS atmospheric correction 

uint16  prn                    # GPS [1-32], GLONASS may be negative
float64 ionosphereCorrectionL1 # Pseudorange ionosphere correction (carrier correction has opposite sign) [m]
float64 ionosphereCorrectionL2 # Pseudorange ionosphere correction (carrier correction has opposite sign) [m]
float64 troposphereCorrection  # Troposphere correction [m]"""
  __slots__ = ['prn','ionosphereCorrectionL1','ionosphereCorrectionL2','troposphereCorrection']
  _slot_types = ['uint16','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,ionosphereCorrectionL1,ionosphereCorrectionL2,troposphereCorrection

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AtmosphericCorrection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = 0
      if self.ionosphereCorrectionL1 is None:
        self.ionosphereCorrectionL1 = 0.
      if self.ionosphereCorrectionL2 is None:
        self.ionosphereCorrectionL2 = 0.
      if self.troposphereCorrection is None:
        self.troposphereCorrection = 0.
    else:
      self.prn = 0
      self.ionosphereCorrectionL1 = 0.
      self.ionosphereCorrectionL2 = 0.
      self.troposphereCorrection = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H3d().pack(_x.prn, _x.ionosphereCorrectionL1, _x.ionosphereCorrectionL2, _x.troposphereCorrection))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.prn, _x.ionosphereCorrectionL1, _x.ionosphereCorrectionL2, _x.troposphereCorrection,) = _get_struct_H3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H3d().pack(_x.prn, _x.ionosphereCorrectionL1, _x.ionosphereCorrectionL2, _x.troposphereCorrection))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.prn, _x.ionosphereCorrectionL1, _x.ionosphereCorrectionL2, _x.troposphereCorrection,) = _get_struct_H3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H3d = None
def _get_struct_H3d():
    global _struct_H3d
    if _struct_H3d is None:
        _struct_H3d = struct.Struct("<H3d")
    return _struct_H3d
