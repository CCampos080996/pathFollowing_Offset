# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/NodeStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg
import std_msgs.msg

class NodeStatus(genpy.Message):
  _md5sum = "278b370fcaf1e9224bd8b33acea7e9ca"
  _type = "ros_sensor_msgs/NodeStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header       header
Tags                  tags
FixType               fix
uint8                 numSatellitesAvailable
uint16                timeSinceLastFix     # in seconds [s]
AvlSatelliteData      availableEphemeris   # bit field
AvlSatelliteData      availableAlmanac     # bit field
bool                  utcIonoAvailable
NetworkTimeOffset     networkTimeOffset
CpuTimeOffset         computerTimeOffset
AssuranceLevel        assurance
AssuranceCheckValue[] assuranceCheckVal
bool                  isStale
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ros_sensor_msgs/Tags
## Header structure for user defined data messages

GpsTime        gpsTime
SensorType     sensor
ReceiverType   receiver   # String to specify GNSS receiver type
KeyStatus      key
string         sensorName
SourceType     source
bool           dataValid
AssuranceLevel assuranceLevel
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: ros_sensor_msgs/SensorType
## Sensor Type

uint8 SensorTypeUnknown = 0
uint8 SensorTypeGps     = 1
uint8 SensorTypeGlonass = 2
uint8 SensorTypeGalileo = 4
uint8 SensorTypeImu     = 8
uint8 SensorRfRange     = 16
uint8 SensorTypeVision  = 32

uint8 type
================================================================================
MSG: ros_sensor_msgs/ReceiverType
uint8 RECEIVER_TYPE_UBLOX = 0
uint8 RECEIVER_TYPE_NOVATEL = 1
uint8 RECEIVER_TYPE_DAGR = 2
uint8 RECEIVER_TYPE_MICROGRAM = 3
uint8 RECEIVER_TYPE_TRUTRAK = 4
uint8 RECEIVER_TYPE_GSSIP = 5
uint8 RECEIVER_TYPE_OTHER = 14
uint8 RECEIVER_TYPE_UNKNOWN = 15
uint8 type
================================================================================
MSG: ros_sensor_msgs/KeyStatus
## KeyStatus

uint8 UnauthorizedNotKeyed = 0
uint8 AuthorizedNotKeyed   = 1
uint8 Keyed                = 2

uint8 status
================================================================================
MSG: ros_sensor_msgs/SourceType
## Source of data

uint8 SourceTypeUnknown  = 0
uint8 SourceTypeReceiver = 1
uint8 SourceTypeNetwork  = 2
uint8 SourceTypeRinex    = 3
uint8 SourceTypeAny      = 99

uint8 type
================================================================================
MSG: ros_sensor_msgs/AssuranceLevel
uint8  Normal   = 0
uint8  Unknown  = 1
uint8  Warning  = 2
uint8  Attack   = 3

uint8 level
================================================================================
MSG: ros_sensor_msgs/FixType
## Fix Type

uint8 FixTypeNone = 0
uint8 FixTypeDeadReckoning = 1
uint8 FixType2D = 2
uint8 FixType3D = 3
uint8 FixTypeDRand3D = 4 ## Dead reckoning and GPS fix
uint8 FixTypeTimeOnly = 5
uint8 FixTypeStatic = 9

uint8 type
================================================================================
MSG: ros_sensor_msgs/AvlSatelliteData
uint32    fromReceiver
uint32    fromNetwork
uint32    fromRinex
uint32    fromUnknown
================================================================================
MSG: ros_sensor_msgs/NetworkTimeOffset
  GpsTime timeOfValidity
  bool    dataValid
  int32   networkDifferenceCounts
  int32   networkDriftCounts
  int32   oscillatorFreqEst
  int32   networkDifferenceCmdCounts
  int32   networkDriftCmdCounts
  uint32  networkPpsCount
  uint32  gpsPpsCount
================================================================================
MSG: ros_sensor_msgs/CpuTimeOffset
bool    valid
float64 secondsOffset
================================================================================
MSG: ros_sensor_msgs/AssuranceCheckValue
## An assurance check value for a given prn

uint32    prn
uint32    checkVal"""
  __slots__ = ['header','tags','fix','numSatellitesAvailable','timeSinceLastFix','availableEphemeris','availableAlmanac','utcIonoAvailable','networkTimeOffset','computerTimeOffset','assurance','assuranceCheckVal','isStale']
  _slot_types = ['std_msgs/Header','ros_sensor_msgs/Tags','ros_sensor_msgs/FixType','uint8','uint16','ros_sensor_msgs/AvlSatelliteData','ros_sensor_msgs/AvlSatelliteData','bool','ros_sensor_msgs/NetworkTimeOffset','ros_sensor_msgs/CpuTimeOffset','ros_sensor_msgs/AssuranceLevel','ros_sensor_msgs/AssuranceCheckValue[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tags,fix,numSatellitesAvailable,timeSinceLastFix,availableEphemeris,availableAlmanac,utcIonoAvailable,networkTimeOffset,computerTimeOffset,assurance,assuranceCheckVal,isStale

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NodeStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.fix is None:
        self.fix = ros_sensor_msgs.msg.FixType()
      if self.numSatellitesAvailable is None:
        self.numSatellitesAvailable = 0
      if self.timeSinceLastFix is None:
        self.timeSinceLastFix = 0
      if self.availableEphemeris is None:
        self.availableEphemeris = ros_sensor_msgs.msg.AvlSatelliteData()
      if self.availableAlmanac is None:
        self.availableAlmanac = ros_sensor_msgs.msg.AvlSatelliteData()
      if self.utcIonoAvailable is None:
        self.utcIonoAvailable = False
      if self.networkTimeOffset is None:
        self.networkTimeOffset = ros_sensor_msgs.msg.NetworkTimeOffset()
      if self.computerTimeOffset is None:
        self.computerTimeOffset = ros_sensor_msgs.msg.CpuTimeOffset()
      if self.assurance is None:
        self.assurance = ros_sensor_msgs.msg.AssuranceLevel()
      if self.assuranceCheckVal is None:
        self.assuranceCheckVal = []
      if self.isStale is None:
        self.isStale = False
    else:
      self.header = std_msgs.msg.Header()
      self.tags = ros_sensor_msgs.msg.Tags()
      self.fix = ros_sensor_msgs.msg.FixType()
      self.numSatellitesAvailable = 0
      self.timeSinceLastFix = 0
      self.availableEphemeris = ros_sensor_msgs.msg.AvlSatelliteData()
      self.availableAlmanac = ros_sensor_msgs.msg.AvlSatelliteData()
      self.utcIonoAvailable = False
      self.networkTimeOffset = ros_sensor_msgs.msg.NetworkTimeOffset()
      self.computerTimeOffset = ros_sensor_msgs.msg.CpuTimeOffset()
      self.assurance = ros_sensor_msgs.msg.AssuranceLevel()
      self.assuranceCheckVal = []
      self.isStale = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status))
      _x = self.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5BH8IBIdB5i2IBdB().pack(_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.fix.type, _x.numSatellitesAvailable, _x.timeSinceLastFix, _x.availableEphemeris.fromReceiver, _x.availableEphemeris.fromNetwork, _x.availableEphemeris.fromRinex, _x.availableEphemeris.fromUnknown, _x.availableAlmanac.fromReceiver, _x.availableAlmanac.fromNetwork, _x.availableAlmanac.fromRinex, _x.availableAlmanac.fromUnknown, _x.utcIonoAvailable, _x.networkTimeOffset.timeOfValidity.gps_week, _x.networkTimeOffset.timeOfValidity.gps_seconds, _x.networkTimeOffset.dataValid, _x.networkTimeOffset.networkDifferenceCounts, _x.networkTimeOffset.networkDriftCounts, _x.networkTimeOffset.oscillatorFreqEst, _x.networkTimeOffset.networkDifferenceCmdCounts, _x.networkTimeOffset.networkDriftCmdCounts, _x.networkTimeOffset.networkPpsCount, _x.networkTimeOffset.gpsPpsCount, _x.computerTimeOffset.valid, _x.computerTimeOffset.secondsOffset, _x.assurance.level))
      length = len(self.assuranceCheckVal)
      buff.write(_struct_I.pack(length))
      for val1 in self.assuranceCheckVal:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
      buff.write(_get_struct_B().pack(self.isStale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.fix is None:
        self.fix = ros_sensor_msgs.msg.FixType()
      if self.availableEphemeris is None:
        self.availableEphemeris = ros_sensor_msgs.msg.AvlSatelliteData()
      if self.availableAlmanac is None:
        self.availableAlmanac = ros_sensor_msgs.msg.AvlSatelliteData()
      if self.networkTimeOffset is None:
        self.networkTimeOffset = ros_sensor_msgs.msg.NetworkTimeOffset()
      if self.computerTimeOffset is None:
        self.computerTimeOffset = ros_sensor_msgs.msg.CpuTimeOffset()
      if self.assurance is None:
        self.assurance = ros_sensor_msgs.msg.AssuranceLevel()
      if self.assuranceCheckVal is None:
        self.assuranceCheckVal = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 91
      (_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.fix.type, _x.numSatellitesAvailable, _x.timeSinceLastFix, _x.availableEphemeris.fromReceiver, _x.availableEphemeris.fromNetwork, _x.availableEphemeris.fromRinex, _x.availableEphemeris.fromUnknown, _x.availableAlmanac.fromReceiver, _x.availableAlmanac.fromNetwork, _x.availableAlmanac.fromRinex, _x.availableAlmanac.fromUnknown, _x.utcIonoAvailable, _x.networkTimeOffset.timeOfValidity.gps_week, _x.networkTimeOffset.timeOfValidity.gps_seconds, _x.networkTimeOffset.dataValid, _x.networkTimeOffset.networkDifferenceCounts, _x.networkTimeOffset.networkDriftCounts, _x.networkTimeOffset.oscillatorFreqEst, _x.networkTimeOffset.networkDifferenceCmdCounts, _x.networkTimeOffset.networkDriftCmdCounts, _x.networkTimeOffset.networkPpsCount, _x.networkTimeOffset.gpsPpsCount, _x.computerTimeOffset.valid, _x.computerTimeOffset.secondsOffset, _x.assurance.level,) = _get_struct_5BH8IBIdB5i2IBdB().unpack(str[start:end])
      self.tags.dataValid = bool(self.tags.dataValid)
      self.utcIonoAvailable = bool(self.utcIonoAvailable)
      self.networkTimeOffset.dataValid = bool(self.networkTimeOffset.dataValid)
      self.computerTimeOffset.valid = bool(self.computerTimeOffset.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.assuranceCheckVal = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.AssuranceCheckValue()
        _x = val1
        start = end
        end += 8
        (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
        self.assuranceCheckVal.append(val1)
      start = end
      end += 1
      (self.isStale,) = _get_struct_B().unpack(str[start:end])
      self.isStale = bool(self.isStale)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status))
      _x = self.tags.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5BH8IBIdB5i2IBdB().pack(_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.fix.type, _x.numSatellitesAvailable, _x.timeSinceLastFix, _x.availableEphemeris.fromReceiver, _x.availableEphemeris.fromNetwork, _x.availableEphemeris.fromRinex, _x.availableEphemeris.fromUnknown, _x.availableAlmanac.fromReceiver, _x.availableAlmanac.fromNetwork, _x.availableAlmanac.fromRinex, _x.availableAlmanac.fromUnknown, _x.utcIonoAvailable, _x.networkTimeOffset.timeOfValidity.gps_week, _x.networkTimeOffset.timeOfValidity.gps_seconds, _x.networkTimeOffset.dataValid, _x.networkTimeOffset.networkDifferenceCounts, _x.networkTimeOffset.networkDriftCounts, _x.networkTimeOffset.oscillatorFreqEst, _x.networkTimeOffset.networkDifferenceCmdCounts, _x.networkTimeOffset.networkDriftCmdCounts, _x.networkTimeOffset.networkPpsCount, _x.networkTimeOffset.gpsPpsCount, _x.computerTimeOffset.valid, _x.computerTimeOffset.secondsOffset, _x.assurance.level))
      length = len(self.assuranceCheckVal)
      buff.write(_struct_I.pack(length))
      for val1 in self.assuranceCheckVal:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.prn, _x.checkVal))
      buff.write(_get_struct_B().pack(self.isStale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tags is None:
        self.tags = ros_sensor_msgs.msg.Tags()
      if self.fix is None:
        self.fix = ros_sensor_msgs.msg.FixType()
      if self.availableEphemeris is None:
        self.availableEphemeris = ros_sensor_msgs.msg.AvlSatelliteData()
      if self.availableAlmanac is None:
        self.availableAlmanac = ros_sensor_msgs.msg.AvlSatelliteData()
      if self.networkTimeOffset is None:
        self.networkTimeOffset = ros_sensor_msgs.msg.NetworkTimeOffset()
      if self.computerTimeOffset is None:
        self.computerTimeOffset = ros_sensor_msgs.msg.CpuTimeOffset()
      if self.assurance is None:
        self.assurance = ros_sensor_msgs.msg.AssuranceLevel()
      if self.assuranceCheckVal is None:
        self.assuranceCheckVal = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.tags.gpsTime.gps_week, _x.tags.gpsTime.gps_seconds, _x.tags.sensor.type, _x.tags.receiver.type, _x.tags.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tags.sensorName = str[start:end].decode('utf-8')
      else:
        self.tags.sensorName = str[start:end]
      _x = self
      start = end
      end += 91
      (_x.tags.source.type, _x.tags.dataValid, _x.tags.assuranceLevel.level, _x.fix.type, _x.numSatellitesAvailable, _x.timeSinceLastFix, _x.availableEphemeris.fromReceiver, _x.availableEphemeris.fromNetwork, _x.availableEphemeris.fromRinex, _x.availableEphemeris.fromUnknown, _x.availableAlmanac.fromReceiver, _x.availableAlmanac.fromNetwork, _x.availableAlmanac.fromRinex, _x.availableAlmanac.fromUnknown, _x.utcIonoAvailable, _x.networkTimeOffset.timeOfValidity.gps_week, _x.networkTimeOffset.timeOfValidity.gps_seconds, _x.networkTimeOffset.dataValid, _x.networkTimeOffset.networkDifferenceCounts, _x.networkTimeOffset.networkDriftCounts, _x.networkTimeOffset.oscillatorFreqEst, _x.networkTimeOffset.networkDifferenceCmdCounts, _x.networkTimeOffset.networkDriftCmdCounts, _x.networkTimeOffset.networkPpsCount, _x.networkTimeOffset.gpsPpsCount, _x.computerTimeOffset.valid, _x.computerTimeOffset.secondsOffset, _x.assurance.level,) = _get_struct_5BH8IBIdB5i2IBdB().unpack(str[start:end])
      self.tags.dataValid = bool(self.tags.dataValid)
      self.utcIonoAvailable = bool(self.utcIonoAvailable)
      self.networkTimeOffset.dataValid = bool(self.networkTimeOffset.dataValid)
      self.computerTimeOffset.valid = bool(self.computerTimeOffset.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.assuranceCheckVal = []
      for i in range(0, length):
        val1 = ros_sensor_msgs.msg.AssuranceCheckValue()
        _x = val1
        start = end
        end += 8
        (_x.prn, _x.checkVal,) = _get_struct_2I().unpack(str[start:end])
        self.assuranceCheckVal.append(val1)
      start = end
      end += 1
      (self.isStale,) = _get_struct_B().unpack(str[start:end])
      self.isStale = bool(self.isStale)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Id3B = None
def _get_struct_Id3B():
    global _struct_Id3B
    if _struct_Id3B is None:
        _struct_Id3B = struct.Struct("<Id3B")
    return _struct_Id3B
_struct_5BH8IBIdB5i2IBdB = None
def _get_struct_5BH8IBIdB5i2IBdB():
    global _struct_5BH8IBIdB5i2IBdB
    if _struct_5BH8IBIdB5i2IBdB is None:
        _struct_5BH8IBIdB5i2IBdB = struct.Struct("<5BH8IBIdB5i2IBdB")
    return _struct_5BH8IBIdB5i2IBdB
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
