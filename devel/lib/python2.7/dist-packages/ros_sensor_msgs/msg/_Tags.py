# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/Tags.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class Tags(genpy.Message):
  _md5sum = "2af7cb470f851fdf59b411eaf3a14b0c"
  _type = "ros_sensor_msgs/Tags"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## Header structure for user defined data messages

GpsTime        gpsTime
SensorType     sensor
ReceiverType   receiver   # String to specify GNSS receiver type
KeyStatus      key
string         sensorName
SourceType     source
bool           dataValid
AssuranceLevel assuranceLevel
================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: ros_sensor_msgs/SensorType
## Sensor Type

uint8 SensorTypeUnknown = 0
uint8 SensorTypeGps     = 1
uint8 SensorTypeGlonass = 2
uint8 SensorTypeGalileo = 4
uint8 SensorTypeImu     = 8
uint8 SensorRfRange     = 16
uint8 SensorTypeVision  = 32

uint8 type
================================================================================
MSG: ros_sensor_msgs/ReceiverType
uint8 RECEIVER_TYPE_UBLOX = 0
uint8 RECEIVER_TYPE_NOVATEL = 1
uint8 RECEIVER_TYPE_DAGR = 2
uint8 RECEIVER_TYPE_MICROGRAM = 3
uint8 RECEIVER_TYPE_TRUTRAK = 4
uint8 RECEIVER_TYPE_GSSIP = 5
uint8 RECEIVER_TYPE_OTHER = 14
uint8 RECEIVER_TYPE_UNKNOWN = 15
uint8 type
================================================================================
MSG: ros_sensor_msgs/KeyStatus
## KeyStatus

uint8 UnauthorizedNotKeyed = 0
uint8 AuthorizedNotKeyed   = 1
uint8 Keyed                = 2

uint8 status
================================================================================
MSG: ros_sensor_msgs/SourceType
## Source of data

uint8 SourceTypeUnknown  = 0
uint8 SourceTypeReceiver = 1
uint8 SourceTypeNetwork  = 2
uint8 SourceTypeRinex    = 3
uint8 SourceTypeAny      = 99

uint8 type
================================================================================
MSG: ros_sensor_msgs/AssuranceLevel
uint8  Normal   = 0
uint8  Unknown  = 1
uint8  Warning  = 2
uint8  Attack   = 3

uint8 level"""
  __slots__ = ['gpsTime','sensor','receiver','key','sensorName','source','dataValid','assuranceLevel']
  _slot_types = ['ros_sensor_msgs/GpsTime','ros_sensor_msgs/SensorType','ros_sensor_msgs/ReceiverType','ros_sensor_msgs/KeyStatus','string','ros_sensor_msgs/SourceType','bool','ros_sensor_msgs/AssuranceLevel']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gpsTime,sensor,receiver,key,sensorName,source,dataValid,assuranceLevel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tags, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      if self.sensor is None:
        self.sensor = ros_sensor_msgs.msg.SensorType()
      if self.receiver is None:
        self.receiver = ros_sensor_msgs.msg.ReceiverType()
      if self.key is None:
        self.key = ros_sensor_msgs.msg.KeyStatus()
      if self.sensorName is None:
        self.sensorName = ''
      if self.source is None:
        self.source = ros_sensor_msgs.msg.SourceType()
      if self.dataValid is None:
        self.dataValid = False
      if self.assuranceLevel is None:
        self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
    else:
      self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      self.sensor = ros_sensor_msgs.msg.SensorType()
      self.receiver = ros_sensor_msgs.msg.ReceiverType()
      self.key = ros_sensor_msgs.msg.KeyStatus()
      self.sensorName = ''
      self.source = ros_sensor_msgs.msg.SourceType()
      self.dataValid = False
      self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.sensor.type, _x.receiver.type, _x.key.status))
      _x = self.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.source.type, _x.dataValid, _x.assuranceLevel.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      if self.sensor is None:
        self.sensor = ros_sensor_msgs.msg.SensorType()
      if self.receiver is None:
        self.receiver = ros_sensor_msgs.msg.ReceiverType()
      if self.key is None:
        self.key = ros_sensor_msgs.msg.KeyStatus()
      if self.source is None:
        self.source = ros_sensor_msgs.msg.SourceType()
      if self.assuranceLevel is None:
        self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.sensor.type, _x.receiver.type, _x.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sensorName = str[start:end].decode('utf-8')
      else:
        self.sensorName = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.source.type, _x.dataValid, _x.assuranceLevel.level,) = _get_struct_3B().unpack(str[start:end])
      self.dataValid = bool(self.dataValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Id3B().pack(_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.sensor.type, _x.receiver.type, _x.key.status))
      _x = self.sensorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.source.type, _x.dataValid, _x.assuranceLevel.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      if self.sensor is None:
        self.sensor = ros_sensor_msgs.msg.SensorType()
      if self.receiver is None:
        self.receiver = ros_sensor_msgs.msg.ReceiverType()
      if self.key is None:
        self.key = ros_sensor_msgs.msg.KeyStatus()
      if self.source is None:
        self.source = ros_sensor_msgs.msg.SourceType()
      if self.assuranceLevel is None:
        self.assuranceLevel = ros_sensor_msgs.msg.AssuranceLevel()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.sensor.type, _x.receiver.type, _x.key.status,) = _get_struct_Id3B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sensorName = str[start:end].decode('utf-8')
      else:
        self.sensorName = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.source.type, _x.dataValid, _x.assuranceLevel.level,) = _get_struct_3B().unpack(str[start:end])
      self.dataValid = bool(self.dataValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_Id3B = None
def _get_struct_Id3B():
    global _struct_Id3B
    if _struct_Id3B is None:
        _struct_Id3B = struct.Struct("<Id3B")
    return _struct_Id3B
