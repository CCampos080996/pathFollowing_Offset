# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/CmdGpsAssistSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg

class CmdGpsAssistSrvRequest(genpy.Message):
  _md5sum = "dbb57e1d99c69fb9537031facc1018c7"
  _type = "ros_sensor_msgs/CmdGpsAssistSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """CmdGpsAssist assist

================================================================================
MSG: ros_sensor_msgs/CmdGpsAssist
bool assist_time
bool assist_position
bool assist_gps_ephemeris
bool assist_gps_almanac
bool assist_gps_utc_iono
bool assist_precise_time"""
  __slots__ = ['assist']
  _slot_types = ['ros_sensor_msgs/CmdGpsAssist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       assist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CmdGpsAssistSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.assist is None:
        self.assist = ros_sensor_msgs.msg.CmdGpsAssist()
    else:
      self.assist = ros_sensor_msgs.msg.CmdGpsAssist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.assist.assist_time, _x.assist.assist_position, _x.assist.assist_gps_ephemeris, _x.assist.assist_gps_almanac, _x.assist.assist_gps_utc_iono, _x.assist.assist_precise_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.assist is None:
        self.assist = ros_sensor_msgs.msg.CmdGpsAssist()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.assist.assist_time, _x.assist.assist_position, _x.assist.assist_gps_ephemeris, _x.assist.assist_gps_almanac, _x.assist.assist_gps_utc_iono, _x.assist.assist_precise_time,) = _get_struct_6B().unpack(str[start:end])
      self.assist.assist_time = bool(self.assist.assist_time)
      self.assist.assist_position = bool(self.assist.assist_position)
      self.assist.assist_gps_ephemeris = bool(self.assist.assist_gps_ephemeris)
      self.assist.assist_gps_almanac = bool(self.assist.assist_gps_almanac)
      self.assist.assist_gps_utc_iono = bool(self.assist.assist_gps_utc_iono)
      self.assist.assist_precise_time = bool(self.assist.assist_precise_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.assist.assist_time, _x.assist.assist_position, _x.assist.assist_gps_ephemeris, _x.assist.assist_gps_almanac, _x.assist.assist_gps_utc_iono, _x.assist.assist_precise_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.assist is None:
        self.assist = ros_sensor_msgs.msg.CmdGpsAssist()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.assist.assist_time, _x.assist.assist_position, _x.assist.assist_gps_ephemeris, _x.assist.assist_gps_almanac, _x.assist.assist_gps_utc_iono, _x.assist.assist_precise_time,) = _get_struct_6B().unpack(str[start:end])
      self.assist.assist_time = bool(self.assist.assist_time)
      self.assist.assist_position = bool(self.assist.assist_position)
      self.assist.assist_gps_ephemeris = bool(self.assist.assist_gps_ephemeris)
      self.assist.assist_gps_almanac = bool(self.assist.assist_gps_almanac)
      self.assist.assist_gps_utc_iono = bool(self.assist.assist_gps_utc_iono)
      self.assist.assist_precise_time = bool(self.assist.assist_precise_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sensor_msgs/CmdGpsAssistSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CmdGpsAssistSrvResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "ros_sensor_msgs/CmdGpsAssistSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CmdGpsAssistSrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class CmdGpsAssistSrv(object):
  _type          = 'ros_sensor_msgs/CmdGpsAssistSrv'
  _md5sum = '6bdb59dd737011607cc3575b372fe7eb'
  _request_class  = CmdGpsAssistSrvRequest
  _response_class = CmdGpsAssistSrvResponse
