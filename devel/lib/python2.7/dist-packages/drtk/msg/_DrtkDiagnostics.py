# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drtk/DrtkDiagnostics.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sensor_msgs.msg
import std_msgs.msg

class DrtkDiagnostics(genpy.Message):
  _md5sum = "3b3d08a7eca2c863ebc178a9aab483f7"
  _type = "drtk/DrtkDiagnostics"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """## DrtkDiagnostics

std_msgs/Header   header
ros_sensor_msgs/GpsTime  gpsTime

float64[32]                  sdFloatIntegerAmbiguitiesL1
float64[32]                  sdFloatIntegerAmbiguitiesL2

# float64[32]                  sdFloatIntegerAmbiguitiesCovarianceL1
# float64[32]                  sdFloatIntegerAmbiguitiesCovarianceL2

uint16 numAvailableSvs

float64 lambdaRatio
float64 lockedLambdaRatio

uint32 basePrn
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]"""
  __slots__ = ['header','gpsTime','sdFloatIntegerAmbiguitiesL1','sdFloatIntegerAmbiguitiesL2','numAvailableSvs','lambdaRatio','lockedLambdaRatio','basePrn']
  _slot_types = ['std_msgs/Header','ros_sensor_msgs/GpsTime','float64[32]','float64[32]','uint16','float64','float64','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,gpsTime,sdFloatIntegerAmbiguitiesL1,sdFloatIntegerAmbiguitiesL2,numAvailableSvs,lambdaRatio,lockedLambdaRatio,basePrn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DrtkDiagnostics, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      if self.sdFloatIntegerAmbiguitiesL1 is None:
        self.sdFloatIntegerAmbiguitiesL1 = [0.] * 32
      if self.sdFloatIntegerAmbiguitiesL2 is None:
        self.sdFloatIntegerAmbiguitiesL2 = [0.] * 32
      if self.numAvailableSvs is None:
        self.numAvailableSvs = 0
      if self.lambdaRatio is None:
        self.lambdaRatio = 0.
      if self.lockedLambdaRatio is None:
        self.lockedLambdaRatio = 0.
      if self.basePrn is None:
        self.basePrn = 0
    else:
      self.header = std_msgs.msg.Header()
      self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      self.sdFloatIntegerAmbiguitiesL1 = [0.] * 32
      self.sdFloatIntegerAmbiguitiesL2 = [0.] * 32
      self.numAvailableSvs = 0
      self.lambdaRatio = 0.
      self.lockedLambdaRatio = 0.
      self.basePrn = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id().pack(_x.gpsTime.gps_week, _x.gpsTime.gps_seconds))
      buff.write(_get_struct_32d().pack(*self.sdFloatIntegerAmbiguitiesL1))
      buff.write(_get_struct_32d().pack(*self.sdFloatIntegerAmbiguitiesL2))
      _x = self
      buff.write(_get_struct_H2dI().pack(_x.numAvailableSvs, _x.lambdaRatio, _x.lockedLambdaRatio, _x.basePrn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.gpsTime.gps_week, _x.gpsTime.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 256
      self.sdFloatIntegerAmbiguitiesL1 = _get_struct_32d().unpack(str[start:end])
      start = end
      end += 256
      self.sdFloatIntegerAmbiguitiesL2 = _get_struct_32d().unpack(str[start:end])
      _x = self
      start = end
      end += 22
      (_x.numAvailableSvs, _x.lambdaRatio, _x.lockedLambdaRatio, _x.basePrn,) = _get_struct_H2dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id().pack(_x.gpsTime.gps_week, _x.gpsTime.gps_seconds))
      buff.write(self.sdFloatIntegerAmbiguitiesL1.tostring())
      buff.write(self.sdFloatIntegerAmbiguitiesL2.tostring())
      _x = self
      buff.write(_get_struct_H2dI().pack(_x.numAvailableSvs, _x.lambdaRatio, _x.lockedLambdaRatio, _x.basePrn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.gpsTime.gps_week, _x.gpsTime.gps_seconds,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 256
      self.sdFloatIntegerAmbiguitiesL1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=32)
      start = end
      end += 256
      self.sdFloatIntegerAmbiguitiesL2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=32)
      _x = self
      start = end
      end += 22
      (_x.numAvailableSvs, _x.lambdaRatio, _x.lockedLambdaRatio, _x.basePrn,) = _get_struct_H2dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H2dI = None
def _get_struct_H2dI():
    global _struct_H2dI
    if _struct_H2dI is None:
        _struct_H2dI = struct.Struct("<H2dI")
    return _struct_H2dI
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_32d = None
def _get_struct_32d():
    global _struct_32d
    if _struct_32d is None:
        _struct_32d = struct.Struct("<32d")
    return _struct_32d
