# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tdcp/TdcpDiagnostics.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ros_sensor_msgs.msg
import std_msgs.msg

class TdcpDiagnostics(genpy.Message):
  _md5sum = "29abe80c51328853cd49a1acdc38a46c"
  _type = "tdcp/TdcpDiagnostics"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """## TdcpDiagnostics

std_msgs/Header          header
ros_sensor_msgs/GpsTime  gpsTime

uint16 numAvailableSvs
uint16 numPsrSolSvs
uint16 numTdcpSolSvs

geometry_msgs/Vector3 spsDeltaPosition

float32 faultCheckVariable1
float32 faultCheckVariable2

float32 sampleTime
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ros_sensor_msgs/GpsTime
## GPS time structure
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)
float64         gps_seconds     # GPS seconds into week [sec]
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','gpsTime','numAvailableSvs','numPsrSolSvs','numTdcpSolSvs','spsDeltaPosition','faultCheckVariable1','faultCheckVariable2','sampleTime']
  _slot_types = ['std_msgs/Header','ros_sensor_msgs/GpsTime','uint16','uint16','uint16','geometry_msgs/Vector3','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,gpsTime,numAvailableSvs,numPsrSolSvs,numTdcpSolSvs,spsDeltaPosition,faultCheckVariable1,faultCheckVariable2,sampleTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TdcpDiagnostics, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      if self.numAvailableSvs is None:
        self.numAvailableSvs = 0
      if self.numPsrSolSvs is None:
        self.numPsrSolSvs = 0
      if self.numTdcpSolSvs is None:
        self.numTdcpSolSvs = 0
      if self.spsDeltaPosition is None:
        self.spsDeltaPosition = geometry_msgs.msg.Vector3()
      if self.faultCheckVariable1 is None:
        self.faultCheckVariable1 = 0.
      if self.faultCheckVariable2 is None:
        self.faultCheckVariable2 = 0.
      if self.sampleTime is None:
        self.sampleTime = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      self.numAvailableSvs = 0
      self.numPsrSolSvs = 0
      self.numTdcpSolSvs = 0
      self.spsDeltaPosition = geometry_msgs.msg.Vector3()
      self.faultCheckVariable1 = 0.
      self.faultCheckVariable2 = 0.
      self.sampleTime = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3H3d3f().pack(_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.numAvailableSvs, _x.numPsrSolSvs, _x.numTdcpSolSvs, _x.spsDeltaPosition.x, _x.spsDeltaPosition.y, _x.spsDeltaPosition.z, _x.faultCheckVariable1, _x.faultCheckVariable2, _x.sampleTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      if self.spsDeltaPosition is None:
        self.spsDeltaPosition = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.numAvailableSvs, _x.numPsrSolSvs, _x.numTdcpSolSvs, _x.spsDeltaPosition.x, _x.spsDeltaPosition.y, _x.spsDeltaPosition.z, _x.faultCheckVariable1, _x.faultCheckVariable2, _x.sampleTime,) = _get_struct_Id3H3d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Id3H3d3f().pack(_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.numAvailableSvs, _x.numPsrSolSvs, _x.numTdcpSolSvs, _x.spsDeltaPosition.x, _x.spsDeltaPosition.y, _x.spsDeltaPosition.z, _x.faultCheckVariable1, _x.faultCheckVariable2, _x.sampleTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpsTime is None:
        self.gpsTime = ros_sensor_msgs.msg.GpsTime()
      if self.spsDeltaPosition is None:
        self.spsDeltaPosition = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.gpsTime.gps_week, _x.gpsTime.gps_seconds, _x.numAvailableSvs, _x.numPsrSolSvs, _x.numTdcpSolSvs, _x.spsDeltaPosition.x, _x.spsDeltaPosition.y, _x.spsDeltaPosition.z, _x.faultCheckVariable1, _x.faultCheckVariable2, _x.sampleTime,) = _get_struct_Id3H3d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Id3H3d3f = None
def _get_struct_Id3H3d3f():
    global _struct_Id3H3d3f
    if _struct_Id3H3d3f is None:
        _struct_Id3H3d3f = struct.Struct("<Id3H3d3f")
    return _struct_Id3H3d3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
