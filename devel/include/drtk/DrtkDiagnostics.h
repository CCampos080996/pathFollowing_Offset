// Generated by gencpp from file drtk/DrtkDiagnostics.msg
// DO NOT EDIT!


#ifndef DRTK_MESSAGE_DRTKDIAGNOSTICS_H
#define DRTK_MESSAGE_DRTKDIAGNOSTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_sensor_msgs/GpsTime.h>

namespace drtk
{
template <class ContainerAllocator>
struct DrtkDiagnostics_
{
  typedef DrtkDiagnostics_<ContainerAllocator> Type;

  DrtkDiagnostics_()
    : header()
    , gpsTime()
    , sdFloatIntegerAmbiguitiesL1()
    , sdFloatIntegerAmbiguitiesL2()
    , numAvailableSvs(0)
    , lambdaRatio(0.0)
    , lockedLambdaRatio(0.0)
    , basePrn(0)  {
      sdFloatIntegerAmbiguitiesL1.assign(0.0);

      sdFloatIntegerAmbiguitiesL2.assign(0.0);
  }
  DrtkDiagnostics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gpsTime(_alloc)
    , sdFloatIntegerAmbiguitiesL1()
    , sdFloatIntegerAmbiguitiesL2()
    , numAvailableSvs(0)
    , lambdaRatio(0.0)
    , lockedLambdaRatio(0.0)
    , basePrn(0)  {
  (void)_alloc;
      sdFloatIntegerAmbiguitiesL1.assign(0.0);

      sdFloatIntegerAmbiguitiesL2.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_sensor_msgs::GpsTime_<ContainerAllocator>  _gpsTime_type;
  _gpsTime_type gpsTime;

   typedef boost::array<double, 32>  _sdFloatIntegerAmbiguitiesL1_type;
  _sdFloatIntegerAmbiguitiesL1_type sdFloatIntegerAmbiguitiesL1;

   typedef boost::array<double, 32>  _sdFloatIntegerAmbiguitiesL2_type;
  _sdFloatIntegerAmbiguitiesL2_type sdFloatIntegerAmbiguitiesL2;

   typedef uint16_t _numAvailableSvs_type;
  _numAvailableSvs_type numAvailableSvs;

   typedef double _lambdaRatio_type;
  _lambdaRatio_type lambdaRatio;

   typedef double _lockedLambdaRatio_type;
  _lockedLambdaRatio_type lockedLambdaRatio;

   typedef uint32_t _basePrn_type;
  _basePrn_type basePrn;





  typedef boost::shared_ptr< ::drtk::DrtkDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drtk::DrtkDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct DrtkDiagnostics_

typedef ::drtk::DrtkDiagnostics_<std::allocator<void> > DrtkDiagnostics;

typedef boost::shared_ptr< ::drtk::DrtkDiagnostics > DrtkDiagnosticsPtr;
typedef boost::shared_ptr< ::drtk::DrtkDiagnostics const> DrtkDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drtk::DrtkDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drtk::DrtkDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drtk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'drtk': ['/home/christian/lateralOffset/src/drtk/msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drtk::DrtkDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drtk::DrtkDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drtk::DrtkDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b3d08a7eca2c863ebc178a9aab483f7";
  }

  static const char* value(const ::drtk::DrtkDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b3d08a7eca2c863ULL;
  static const uint64_t static_value2 = 0xebc178a9aab483f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drtk/DrtkDiagnostics";
  }

  static const char* value(const ::drtk::DrtkDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## DrtkDiagnostics\n\
\n\
std_msgs/Header   header\n\
ros_sensor_msgs/GpsTime  gpsTime\n\
\n\
float64[32]                  sdFloatIntegerAmbiguitiesL1\n\
float64[32]                  sdFloatIntegerAmbiguitiesL2\n\
\n\
# float64[32]                  sdFloatIntegerAmbiguitiesCovarianceL1\n\
# float64[32]                  sdFloatIntegerAmbiguitiesCovarianceL2\n\
\n\
uint16 numAvailableSvs\n\
\n\
float64 lambdaRatio\n\
float64 lockedLambdaRatio\n\
\n\
uint32 basePrn\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
";
  }

  static const char* value(const ::drtk::DrtkDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gpsTime);
      stream.next(m.sdFloatIntegerAmbiguitiesL1);
      stream.next(m.sdFloatIntegerAmbiguitiesL2);
      stream.next(m.numAvailableSvs);
      stream.next(m.lambdaRatio);
      stream.next(m.lockedLambdaRatio);
      stream.next(m.basePrn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DrtkDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drtk::DrtkDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drtk::DrtkDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gpsTime: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::GpsTime_<ContainerAllocator> >::stream(s, indent + "  ", v.gpsTime);
    s << indent << "sdFloatIntegerAmbiguitiesL1[]" << std::endl;
    for (size_t i = 0; i < v.sdFloatIntegerAmbiguitiesL1.size(); ++i)
    {
      s << indent << "  sdFloatIntegerAmbiguitiesL1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sdFloatIntegerAmbiguitiesL1[i]);
    }
    s << indent << "sdFloatIntegerAmbiguitiesL2[]" << std::endl;
    for (size_t i = 0; i < v.sdFloatIntegerAmbiguitiesL2.size(); ++i)
    {
      s << indent << "  sdFloatIntegerAmbiguitiesL2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sdFloatIntegerAmbiguitiesL2[i]);
    }
    s << indent << "numAvailableSvs: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.numAvailableSvs);
    s << indent << "lambdaRatio: ";
    Printer<double>::stream(s, indent + "  ", v.lambdaRatio);
    s << indent << "lockedLambdaRatio: ";
    Printer<double>::stream(s, indent + "  ", v.lockedLambdaRatio);
    s << indent << "basePrn: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.basePrn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRTK_MESSAGE_DRTKDIAGNOSTICS_H
