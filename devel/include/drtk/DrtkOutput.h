// Generated by gencpp from file drtk/DrtkOutput.msg
// DO NOT EDIT!


#ifndef DRTK_MESSAGE_DRTKOUTPUT_H
#define DRTK_MESSAGE_DRTKOUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_sensor_msgs/GpsTime.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <drtk/DrtkOutputState.h>

namespace drtk
{
template <class ContainerAllocator>
struct DrtkOutput_
{
  typedef DrtkOutput_<ContainerAllocator> Type;

  DrtkOutput_()
    : header()
    , gpsTime()
    , localPositionEcef()
    , rpvEcef()
    , rpvFixedInteger()
    , rpvFloatInteger()
    , rpvDifferentialPseudorange()
    , rpvPositionDifference()
    , rpvEcefCovariance()
    , rpvFixedIntegerCov()
    , rpvFloatIntegerCov()
    , rpvDifferentialPseudorangeCov()
    , rpvNorm(0.0)
    , rpvFixedIntegerNorm(0.0)
    , rpvFloatIntegerNorm(0.0)
    , rpvDifferentialPseudorangeNorm(0.0)
    , rpvPositionDifferenceNorm(0.0)
    , outputState()  {
      rpvEcefCovariance.assign(0.0);

      rpvFixedIntegerCov.assign(0.0);

      rpvFloatIntegerCov.assign(0.0);

      rpvDifferentialPseudorangeCov.assign(0.0);
  }
  DrtkOutput_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gpsTime(_alloc)
    , localPositionEcef(_alloc)
    , rpvEcef(_alloc)
    , rpvFixedInteger(_alloc)
    , rpvFloatInteger(_alloc)
    , rpvDifferentialPseudorange(_alloc)
    , rpvPositionDifference(_alloc)
    , rpvEcefCovariance()
    , rpvFixedIntegerCov()
    , rpvFloatIntegerCov()
    , rpvDifferentialPseudorangeCov()
    , rpvNorm(0.0)
    , rpvFixedIntegerNorm(0.0)
    , rpvFloatIntegerNorm(0.0)
    , rpvDifferentialPseudorangeNorm(0.0)
    , rpvPositionDifferenceNorm(0.0)
    , outputState(_alloc)  {
  (void)_alloc;
      rpvEcefCovariance.assign(0.0);

      rpvFixedIntegerCov.assign(0.0);

      rpvFloatIntegerCov.assign(0.0);

      rpvDifferentialPseudorangeCov.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_sensor_msgs::GpsTime_<ContainerAllocator>  _gpsTime_type;
  _gpsTime_type gpsTime;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _localPositionEcef_type;
  _localPositionEcef_type localPositionEcef;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpvEcef_type;
  _rpvEcef_type rpvEcef;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpvFixedInteger_type;
  _rpvFixedInteger_type rpvFixedInteger;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpvFloatInteger_type;
  _rpvFloatInteger_type rpvFloatInteger;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpvDifferentialPseudorange_type;
  _rpvDifferentialPseudorange_type rpvDifferentialPseudorange;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpvPositionDifference_type;
  _rpvPositionDifference_type rpvPositionDifference;

   typedef boost::array<float, 9>  _rpvEcefCovariance_type;
  _rpvEcefCovariance_type rpvEcefCovariance;

   typedef boost::array<float, 9>  _rpvFixedIntegerCov_type;
  _rpvFixedIntegerCov_type rpvFixedIntegerCov;

   typedef boost::array<float, 9>  _rpvFloatIntegerCov_type;
  _rpvFloatIntegerCov_type rpvFloatIntegerCov;

   typedef boost::array<float, 9>  _rpvDifferentialPseudorangeCov_type;
  _rpvDifferentialPseudorangeCov_type rpvDifferentialPseudorangeCov;

   typedef float _rpvNorm_type;
  _rpvNorm_type rpvNorm;

   typedef float _rpvFixedIntegerNorm_type;
  _rpvFixedIntegerNorm_type rpvFixedIntegerNorm;

   typedef float _rpvFloatIntegerNorm_type;
  _rpvFloatIntegerNorm_type rpvFloatIntegerNorm;

   typedef float _rpvDifferentialPseudorangeNorm_type;
  _rpvDifferentialPseudorangeNorm_type rpvDifferentialPseudorangeNorm;

   typedef float _rpvPositionDifferenceNorm_type;
  _rpvPositionDifferenceNorm_type rpvPositionDifferenceNorm;

   typedef  ::drtk::DrtkOutputState_<ContainerAllocator>  _outputState_type;
  _outputState_type outputState;





  typedef boost::shared_ptr< ::drtk::DrtkOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drtk::DrtkOutput_<ContainerAllocator> const> ConstPtr;

}; // struct DrtkOutput_

typedef ::drtk::DrtkOutput_<std::allocator<void> > DrtkOutput;

typedef boost::shared_ptr< ::drtk::DrtkOutput > DrtkOutputPtr;
typedef boost::shared_ptr< ::drtk::DrtkOutput const> DrtkOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drtk::DrtkOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drtk::DrtkOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drtk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'drtk': ['/home/christian/lateralOffset/src/drtk/msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drtk::DrtkOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drtk::DrtkOutput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drtk::DrtkOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drtk::DrtkOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drtk::DrtkOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drtk::DrtkOutput_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drtk::DrtkOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "534ac48f552f8772bee2064b837fb96a";
  }

  static const char* value(const ::drtk::DrtkOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x534ac48f552f8772ULL;
  static const uint64_t static_value2 = 0xbee2064b837fb96aULL;
};

template<class ContainerAllocator>
struct DataType< ::drtk::DrtkOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drtk/DrtkOutput";
  }

  static const char* value(const ::drtk::DrtkOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drtk::DrtkOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## DrtkOutput\n\
\n\
std_msgs/Header   header\n\
ros_sensor_msgs/GpsTime  gpsTime\n\
\n\
geometry_msgs/Point      localPositionEcef\n\
\n\
geometry_msgs/Vector3    rpvEcef\n\
geometry_msgs/Vector3    rpvFixedInteger\n\
geometry_msgs/Vector3    rpvFloatInteger\n\
geometry_msgs/Vector3    rpvDifferentialPseudorange\n\
geometry_msgs/Vector3    rpvPositionDifference\n\
\n\
float32[9]               rpvEcefCovariance\n\
float32[9]               rpvFixedIntegerCov\n\
float32[9]               rpvFloatIntegerCov\n\
float32[9]               rpvDifferentialPseudorangeCov\n\
\n\
float32                  rpvNorm\n\
float32                  rpvFixedIntegerNorm\n\
float32                  rpvFloatIntegerNorm\n\
float32                  rpvDifferentialPseudorangeNorm\n\
float32                  rpvPositionDifferenceNorm\n\
\n\
DrtkOutputState          outputState\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: drtk/DrtkOutputState\n\
# DrtkOutputState\n\
\n\
uint8 Unknown = 0\n\
uint8 PositionDifferenceSolution = 1\n\
uint8 PseudorangeOnlySolution = 2\n\
uint8 LowPrecisionSolution = 3\n\
uint8 HighPrecisionSolution = 4 \n\
\n\
uint8 state\n\
";
  }

  static const char* value(const ::drtk::DrtkOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drtk::DrtkOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gpsTime);
      stream.next(m.localPositionEcef);
      stream.next(m.rpvEcef);
      stream.next(m.rpvFixedInteger);
      stream.next(m.rpvFloatInteger);
      stream.next(m.rpvDifferentialPseudorange);
      stream.next(m.rpvPositionDifference);
      stream.next(m.rpvEcefCovariance);
      stream.next(m.rpvFixedIntegerCov);
      stream.next(m.rpvFloatIntegerCov);
      stream.next(m.rpvDifferentialPseudorangeCov);
      stream.next(m.rpvNorm);
      stream.next(m.rpvFixedIntegerNorm);
      stream.next(m.rpvFloatIntegerNorm);
      stream.next(m.rpvDifferentialPseudorangeNorm);
      stream.next(m.rpvPositionDifferenceNorm);
      stream.next(m.outputState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DrtkOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drtk::DrtkOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drtk::DrtkOutput_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gpsTime: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::GpsTime_<ContainerAllocator> >::stream(s, indent + "  ", v.gpsTime);
    s << indent << "localPositionEcef: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.localPositionEcef);
    s << indent << "rpvEcef: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpvEcef);
    s << indent << "rpvFixedInteger: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpvFixedInteger);
    s << indent << "rpvFloatInteger: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpvFloatInteger);
    s << indent << "rpvDifferentialPseudorange: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpvDifferentialPseudorange);
    s << indent << "rpvPositionDifference: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpvPositionDifference);
    s << indent << "rpvEcefCovariance[]" << std::endl;
    for (size_t i = 0; i < v.rpvEcefCovariance.size(); ++i)
    {
      s << indent << "  rpvEcefCovariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpvEcefCovariance[i]);
    }
    s << indent << "rpvFixedIntegerCov[]" << std::endl;
    for (size_t i = 0; i < v.rpvFixedIntegerCov.size(); ++i)
    {
      s << indent << "  rpvFixedIntegerCov[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpvFixedIntegerCov[i]);
    }
    s << indent << "rpvFloatIntegerCov[]" << std::endl;
    for (size_t i = 0; i < v.rpvFloatIntegerCov.size(); ++i)
    {
      s << indent << "  rpvFloatIntegerCov[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpvFloatIntegerCov[i]);
    }
    s << indent << "rpvDifferentialPseudorangeCov[]" << std::endl;
    for (size_t i = 0; i < v.rpvDifferentialPseudorangeCov.size(); ++i)
    {
      s << indent << "  rpvDifferentialPseudorangeCov[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpvDifferentialPseudorangeCov[i]);
    }
    s << indent << "rpvNorm: ";
    Printer<float>::stream(s, indent + "  ", v.rpvNorm);
    s << indent << "rpvFixedIntegerNorm: ";
    Printer<float>::stream(s, indent + "  ", v.rpvFixedIntegerNorm);
    s << indent << "rpvFloatIntegerNorm: ";
    Printer<float>::stream(s, indent + "  ", v.rpvFloatIntegerNorm);
    s << indent << "rpvDifferentialPseudorangeNorm: ";
    Printer<float>::stream(s, indent + "  ", v.rpvDifferentialPseudorangeNorm);
    s << indent << "rpvPositionDifferenceNorm: ";
    Printer<float>::stream(s, indent + "  ", v.rpvPositionDifferenceNorm);
    s << indent << "outputState: ";
    s << std::endl;
    Printer< ::drtk::DrtkOutputState_<ContainerAllocator> >::stream(s, indent + "  ", v.outputState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRTK_MESSAGE_DRTKOUTPUT_H
