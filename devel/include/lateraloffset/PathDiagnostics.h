// Generated by gencpp from file lateraloffset/PathDiagnostics.msg
// DO NOT EDIT!


#ifndef LATERALOFFSET_MESSAGE_PATHDIAGNOSTICS_H
#define LATERALOFFSET_MESSAGE_PATHDIAGNOSTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_sensor_msgs/GpsTime.h>

namespace lateraloffset
{
template <class ContainerAllocator>
struct PathDiagnostics_
{
  typedef PathDiagnostics_<ContainerAllocator> Type;

  PathDiagnostics_()
    : header()
    , gpsTime()
    , lateralOffset(0.0)
    , offsetVariance()
    , curvatureRating(0.0)
    , localBodyFrameRPV()  {
    }
  PathDiagnostics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gpsTime(_alloc)
    , lateralOffset(0.0)
    , offsetVariance(_alloc)
    , curvatureRating(0.0)
    , localBodyFrameRPV(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_sensor_msgs::GpsTime_<ContainerAllocator>  _gpsTime_type;
  _gpsTime_type gpsTime;

   typedef float _lateralOffset_type;
  _lateralOffset_type lateralOffset;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _offsetVariance_type;
  _offsetVariance_type offsetVariance;

   typedef float _curvatureRating_type;
  _curvatureRating_type curvatureRating;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _localBodyFrameRPV_type;
  _localBodyFrameRPV_type localBodyFrameRPV;





  typedef boost::shared_ptr< ::lateraloffset::PathDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lateraloffset::PathDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct PathDiagnostics_

typedef ::lateraloffset::PathDiagnostics_<std::allocator<void> > PathDiagnostics;

typedef boost::shared_ptr< ::lateraloffset::PathDiagnostics > PathDiagnosticsPtr;
typedef boost::shared_ptr< ::lateraloffset::PathDiagnostics const> PathDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lateraloffset::PathDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lateraloffset

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'lateraloffset': ['/home/christian/lateralOffset/src/lateraloffset/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lateraloffset::PathDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lateraloffset::PathDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lateraloffset::PathDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5862f510f0fc37b9f5e8121e6c2f96c";
  }

  static const char* value(const ::lateraloffset::PathDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5862f510f0fc37bULL;
  static const uint64_t static_value2 = 0x9f5e8121e6c2f96cULL;
};

template<class ContainerAllocator>
struct DataType< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lateraloffset/PathDiagnostics";
  }

  static const char* value(const ::lateraloffset::PathDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Diagnostics \n\
\n\
std_msgs/Header          header\n\
ros_sensor_msgs/GpsTime  gpsTime\n\
\n\
float32 lateralOffset\n\
\n\
float32[] offsetVariance\n\
\n\
float32 curvatureRating\n\
float32[] localBodyFrameRPV\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
";
  }

  static const char* value(const ::lateraloffset::PathDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gpsTime);
      stream.next(m.lateralOffset);
      stream.next(m.offsetVariance);
      stream.next(m.curvatureRating);
      stream.next(m.localBodyFrameRPV);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lateraloffset::PathDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lateraloffset::PathDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gpsTime: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::GpsTime_<ContainerAllocator> >::stream(s, indent + "  ", v.gpsTime);
    s << indent << "lateralOffset: ";
    Printer<float>::stream(s, indent + "  ", v.lateralOffset);
    s << indent << "offsetVariance[]" << std::endl;
    for (size_t i = 0; i < v.offsetVariance.size(); ++i)
    {
      s << indent << "  offsetVariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.offsetVariance[i]);
    }
    s << indent << "curvatureRating: ";
    Printer<float>::stream(s, indent + "  ", v.curvatureRating);
    s << indent << "localBodyFrameRPV[]" << std::endl;
    for (size_t i = 0; i < v.localBodyFrameRPV.size(); ++i)
    {
      s << indent << "  localBodyFrameRPV[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.localBodyFrameRPV[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LATERALOFFSET_MESSAGE_PATHDIAGNOSTICS_H
