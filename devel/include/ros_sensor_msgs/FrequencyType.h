// Generated by gencpp from file ros_sensor_msgs/FrequencyType.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_FREQUENCYTYPE_H
#define ROS_SENSOR_MSGS_MESSAGE_FREQUENCYTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct FrequencyType_
{
  typedef FrequencyType_<ContainerAllocator> Type;

  FrequencyType_()
    : type(0)  {
    }
  FrequencyType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;



  enum {
    FrequencyTypeUnknown = 0u,
    FrequencyTypeL1 = 1u,
    FrequencyTypeL2 = 2u,
    FrequencyTypeL5 = 3u,
    FrequencyTypeGalileoE1 = 4u,
    FrequencyTypeGalileoE5 = 5u,
    FrequencyTypeGalileoE6 = 6u,
    FrequencyTypeGalileoC = 7u,
    FrequencyTypeGlonassL1F = 8u,
    FrequencyTypeGlonassL2F = 9u,
    FrequencyTypeGlonassL1C = 10u,
    FrequencyTypeGlonassL2C = 11u,
    FrequencyTypeGlonassL3C = 12u,
  };


  typedef boost::shared_ptr< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> const> ConstPtr;

}; // struct FrequencyType_

typedef ::ros_sensor_msgs::FrequencyType_<std::allocator<void> > FrequencyType;

typedef boost::shared_ptr< ::ros_sensor_msgs::FrequencyType > FrequencyTypePtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::FrequencyType const> FrequencyTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0401b2908f64151d32113b6c4ffdc15a";
  }

  static const char* value(const ::ros_sensor_msgs::FrequencyType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0401b2908f64151dULL;
  static const uint64_t static_value2 = 0x32113b6c4ffdc15aULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/FrequencyType";
  }

  static const char* value(const ::ros_sensor_msgs::FrequencyType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Frequency Type\n\
\n\
uint8 FrequencyTypeUnknown      = 0\n\
uint8 FrequencyTypeL1           = 1\n\
uint8 FrequencyTypeL2           = 2\n\
uint8 FrequencyTypeL5           = 3\n\
uint8 FrequencyTypeGalileoE1    = 4\n\
uint8 FrequencyTypeGalileoE5    = 5\n\
uint8 FrequencyTypeGalileoE6    = 6\n\
uint8 FrequencyTypeGalileoC     = 7\n\
uint8 FrequencyTypeGlonassL1F   = 8\n\
uint8 FrequencyTypeGlonassL2F   = 9\n\
uint8 FrequencyTypeGlonassL1C   = 10\n\
uint8 FrequencyTypeGlonassL2C   = 11\n\
uint8 FrequencyTypeGlonassL3C   = 12\n\
\n\
uint8 type\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::FrequencyType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrequencyType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::FrequencyType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_FREQUENCYTYPE_H
