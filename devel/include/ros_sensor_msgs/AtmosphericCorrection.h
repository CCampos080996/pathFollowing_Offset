// Generated by gencpp from file ros_sensor_msgs/AtmosphericCorrection.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_ATMOSPHERICCORRECTION_H
#define ROS_SENSOR_MSGS_MESSAGE_ATMOSPHERICCORRECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct AtmosphericCorrection_
{
  typedef AtmosphericCorrection_<ContainerAllocator> Type;

  AtmosphericCorrection_()
    : prn(0)
    , ionosphereCorrectionL1(0.0)
    , ionosphereCorrectionL2(0.0)
    , troposphereCorrection(0.0)  {
    }
  AtmosphericCorrection_(const ContainerAllocator& _alloc)
    : prn(0)
    , ionosphereCorrectionL1(0.0)
    , ionosphereCorrectionL2(0.0)
    , troposphereCorrection(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _prn_type;
  _prn_type prn;

   typedef double _ionosphereCorrectionL1_type;
  _ionosphereCorrectionL1_type ionosphereCorrectionL1;

   typedef double _ionosphereCorrectionL2_type;
  _ionosphereCorrectionL2_type ionosphereCorrectionL2;

   typedef double _troposphereCorrection_type;
  _troposphereCorrection_type troposphereCorrection;





  typedef boost::shared_ptr< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> const> ConstPtr;

}; // struct AtmosphericCorrection_

typedef ::ros_sensor_msgs::AtmosphericCorrection_<std::allocator<void> > AtmosphericCorrection;

typedef boost::shared_ptr< ::ros_sensor_msgs::AtmosphericCorrection > AtmosphericCorrectionPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::AtmosphericCorrection const> AtmosphericCorrectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92e3c73c19da61c0e7d80415c20426e9";
  }

  static const char* value(const ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92e3c73c19da61c0ULL;
  static const uint64_t static_value2 = 0xe7d80415c20426e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/AtmosphericCorrection";
  }

  static const char* value(const ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## The GPS atmospheric correction \n\
\n\
uint16  prn                    # GPS [1-32], GLONASS may be negative\n\
float64 ionosphereCorrectionL1 # Pseudorange ionosphere correction (carrier correction has opposite sign) [m]\n\
float64 ionosphereCorrectionL2 # Pseudorange ionosphere correction (carrier correction has opposite sign) [m]\n\
float64 troposphereCorrection  # Troposphere correction [m]\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prn);
      stream.next(m.ionosphereCorrectionL1);
      stream.next(m.ionosphereCorrectionL2);
      stream.next(m.troposphereCorrection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AtmosphericCorrection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::AtmosphericCorrection_<ContainerAllocator>& v)
  {
    s << indent << "prn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.prn);
    s << indent << "ionosphereCorrectionL1: ";
    Printer<double>::stream(s, indent + "  ", v.ionosphereCorrectionL1);
    s << indent << "ionosphereCorrectionL2: ";
    Printer<double>::stream(s, indent + "  ", v.ionosphereCorrectionL2);
    s << indent << "troposphereCorrection: ";
    Printer<double>::stream(s, indent + "  ", v.troposphereCorrection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_ATMOSPHERICCORRECTION_H
