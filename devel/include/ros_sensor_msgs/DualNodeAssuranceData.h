// Generated by gencpp from file ros_sensor_msgs/DualNodeAssuranceData.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_DUALNODEASSURANCEDATA_H
#define ROS_SENSOR_MSGS_MESSAGE_DUALNODEASSURANCEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/LlhPositionTagged.h>
#include <ros_sensor_msgs/RfRangeStamped.h>
#include <ros_sensor_msgs/AssuranceLevel.h>
#include <ros_sensor_msgs/PrnDifference.h>
#include <ros_sensor_msgs/PrnDifference.h>
#include <ros_sensor_msgs/AssuranceLevel.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct DualNodeAssuranceData_
{
  typedef DualNodeAssuranceData_<ContainerAllocator> Type;

  DualNodeAssuranceData_()
    : remoteNodeIp()
    , remotePosition()
    , rfRange()
    , nodeRange(0.0)
    , rangeCheckAssuranceLevel()
    , singleDifferences()
    , basePrn(0)
    , doubleDifferences()
    , diffCheckAssuranceLevel()  {
    }
  DualNodeAssuranceData_(const ContainerAllocator& _alloc)
    : remoteNodeIp(_alloc)
    , remotePosition(_alloc)
    , rfRange(_alloc)
    , nodeRange(0.0)
    , rangeCheckAssuranceLevel(_alloc)
    , singleDifferences(_alloc)
    , basePrn(0)
    , doubleDifferences(_alloc)
    , diffCheckAssuranceLevel(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _remoteNodeIp_type;
  _remoteNodeIp_type remoteNodeIp;

   typedef  ::ros_sensor_msgs::LlhPositionTagged_<ContainerAllocator>  _remotePosition_type;
  _remotePosition_type remotePosition;

   typedef  ::ros_sensor_msgs::RfRangeStamped_<ContainerAllocator>  _rfRange_type;
  _rfRange_type rfRange;

   typedef double _nodeRange_type;
  _nodeRange_type nodeRange;

   typedef  ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator>  _rangeCheckAssuranceLevel_type;
  _rangeCheckAssuranceLevel_type rangeCheckAssuranceLevel;

   typedef std::vector< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::other >  _singleDifferences_type;
  _singleDifferences_type singleDifferences;

   typedef uint32_t _basePrn_type;
  _basePrn_type basePrn;

   typedef std::vector< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::other >  _doubleDifferences_type;
  _doubleDifferences_type doubleDifferences;

   typedef  ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator>  _diffCheckAssuranceLevel_type;
  _diffCheckAssuranceLevel_type diffCheckAssuranceLevel;





  typedef boost::shared_ptr< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> const> ConstPtr;

}; // struct DualNodeAssuranceData_

typedef ::ros_sensor_msgs::DualNodeAssuranceData_<std::allocator<void> > DualNodeAssuranceData;

typedef boost::shared_ptr< ::ros_sensor_msgs::DualNodeAssuranceData > DualNodeAssuranceDataPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::DualNodeAssuranceData const> DualNodeAssuranceDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba2e6008c14c1601b60697a2dd872ffa";
  }

  static const char* value(const ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba2e6008c14c1601ULL;
  static const uint64_t static_value2 = 0xb60697a2dd872ffaULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/DualNodeAssuranceData";
  }

  static const char* value(const ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  string             remoteNodeIp\n\
  LlhPositionTagged  remotePosition\n\
  RfRangeStamped     rfRange\n\
  float64            nodeRange\n\
  AssuranceLevel     rangeCheckAssuranceLevel\n\
  PrnDifference[]    singleDifferences\n\
  uint32             basePrn\n\
  PrnDifference[]    doubleDifferences\n\
  AssuranceLevel     diffCheckAssuranceLevel\n\
================================================================================\n\
MSG: ros_sensor_msgs/LlhPositionTagged\n\
## LlhPositionTagged\n\
\n\
std_msgs/Header   header\n\
Tags              tags\n\
LlhPosition       llhPosition\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/Tags\n\
## Header structure for user defined data messages\n\
\n\
GpsTime        gpsTime\n\
SensorType     sensor\n\
ReceiverType   receiver   # String to specify GNSS receiver type\n\
KeyStatus      key\n\
string         sensorName\n\
SourceType     source\n\
bool           dataValid\n\
AssuranceLevel assuranceLevel\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
================================================================================\n\
MSG: ros_sensor_msgs/SensorType\n\
## Sensor Type\n\
\n\
uint8 SensorTypeUnknown = 0\n\
uint8 SensorTypeGps     = 1\n\
uint8 SensorTypeGlonass = 2\n\
uint8 SensorTypeGalileo = 4\n\
uint8 SensorTypeImu     = 8\n\
uint8 SensorRfRange     = 16\n\
uint8 SensorTypeVision  = 32\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/ReceiverType\n\
uint8 RECEIVER_TYPE_UBLOX = 0\n\
uint8 RECEIVER_TYPE_NOVATEL = 1\n\
uint8 RECEIVER_TYPE_DAGR = 2\n\
uint8 RECEIVER_TYPE_MICROGRAM = 3\n\
uint8 RECEIVER_TYPE_TRUTRAK = 4\n\
uint8 RECEIVER_TYPE_GSSIP = 5\n\
uint8 RECEIVER_TYPE_OTHER = 14\n\
uint8 RECEIVER_TYPE_UNKNOWN = 15\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/KeyStatus\n\
## KeyStatus\n\
\n\
uint8 UnauthorizedNotKeyed = 0\n\
uint8 AuthorizedNotKeyed   = 1\n\
uint8 Keyed                = 2\n\
\n\
uint8 status\n\
================================================================================\n\
MSG: ros_sensor_msgs/SourceType\n\
## Source of data\n\
\n\
uint8 SourceTypeUnknown  = 0\n\
uint8 SourceTypeReceiver = 1\n\
uint8 SourceTypeNetwork  = 2\n\
uint8 SourceTypeRinex    = 3\n\
uint8 SourceTypeAny      = 99\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/AssuranceLevel\n\
uint8  Normal   = 0\n\
uint8  Unknown  = 1\n\
uint8  Warning  = 2\n\
uint8  Attack   = 3\n\
\n\
uint8 level\n\
================================================================================\n\
MSG: ros_sensor_msgs/LlhPosition\n\
# # LlhPosition\n\
\n\
float64                  latitude   # [deg]\n\
float64                  longitude  # [deg]\n\
float64                  altitude   # [m]\n\
uint16                   horizontalAccuracy\n\
uint16                   verticalAccuracy\n\
================================================================================\n\
MSG: ros_sensor_msgs/RfRangeStamped\n\
# Range to specified object\n\
std_msgs/Header   header\n\
RfRange           range\n\
================================================================================\n\
MSG: ros_sensor_msgs/RfRange\n\
# Range to specified object\n\
float64 range\n\
float64 rangeRate\n\
float64 rangeVariance\n\
float64 rangeRateVariance\n\
uint32  timestamp\n\
uint32  sourceId\n\
uint32  destId\n\
uint16  rssi\n\
uint16  quality\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/PrnDifference\n\
uint32   prn\n\
float64  difference\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remoteNodeIp);
      stream.next(m.remotePosition);
      stream.next(m.rfRange);
      stream.next(m.nodeRange);
      stream.next(m.rangeCheckAssuranceLevel);
      stream.next(m.singleDifferences);
      stream.next(m.basePrn);
      stream.next(m.doubleDifferences);
      stream.next(m.diffCheckAssuranceLevel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DualNodeAssuranceData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::DualNodeAssuranceData_<ContainerAllocator>& v)
  {
    s << indent << "remoteNodeIp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.remoteNodeIp);
    s << indent << "remotePosition: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::LlhPositionTagged_<ContainerAllocator> >::stream(s, indent + "  ", v.remotePosition);
    s << indent << "rfRange: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::RfRangeStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.rfRange);
    s << indent << "nodeRange: ";
    Printer<double>::stream(s, indent + "  ", v.nodeRange);
    s << indent << "rangeCheckAssuranceLevel: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator> >::stream(s, indent + "  ", v.rangeCheckAssuranceLevel);
    s << indent << "singleDifferences[]" << std::endl;
    for (size_t i = 0; i < v.singleDifferences.size(); ++i)
    {
      s << indent << "  singleDifferences[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::stream(s, indent + "    ", v.singleDifferences[i]);
    }
    s << indent << "basePrn: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.basePrn);
    s << indent << "doubleDifferences[]" << std::endl;
    for (size_t i = 0; i < v.doubleDifferences.size(); ++i)
    {
      s << indent << "  doubleDifferences[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::stream(s, indent + "    ", v.doubleDifferences[i]);
    }
    s << indent << "diffCheckAssuranceLevel: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator> >::stream(s, indent + "  ", v.diffCheckAssuranceLevel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_DUALNODEASSURANCEDATA_H
