// Generated by gencpp from file ros_sensor_msgs/RfRange.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_RFRANGE_H
#define ROS_SENSOR_MSGS_MESSAGE_RFRANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct RfRange_
{
  typedef RfRange_<ContainerAllocator> Type;

  RfRange_()
    : range(0.0)
    , rangeRate(0.0)
    , rangeVariance(0.0)
    , rangeRateVariance(0.0)
    , timestamp(0)
    , sourceId(0)
    , destId(0)
    , rssi(0)
    , quality(0)  {
    }
  RfRange_(const ContainerAllocator& _alloc)
    : range(0.0)
    , rangeRate(0.0)
    , rangeVariance(0.0)
    , rangeRateVariance(0.0)
    , timestamp(0)
    , sourceId(0)
    , destId(0)
    , rssi(0)
    , quality(0)  {
  (void)_alloc;
    }



   typedef double _range_type;
  _range_type range;

   typedef double _rangeRate_type;
  _rangeRate_type rangeRate;

   typedef double _rangeVariance_type;
  _rangeVariance_type rangeVariance;

   typedef double _rangeRateVariance_type;
  _rangeRateVariance_type rangeRateVariance;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint32_t _sourceId_type;
  _sourceId_type sourceId;

   typedef uint32_t _destId_type;
  _destId_type destId;

   typedef uint16_t _rssi_type;
  _rssi_type rssi;

   typedef uint16_t _quality_type;
  _quality_type quality;





  typedef boost::shared_ptr< ::ros_sensor_msgs::RfRange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::RfRange_<ContainerAllocator> const> ConstPtr;

}; // struct RfRange_

typedef ::ros_sensor_msgs::RfRange_<std::allocator<void> > RfRange;

typedef boost::shared_ptr< ::ros_sensor_msgs::RfRange > RfRangePtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::RfRange const> RfRangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::RfRange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::RfRange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::RfRange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::RfRange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32b87628f581d5bd2a8b44788eff9d27";
  }

  static const char* value(const ::ros_sensor_msgs::RfRange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32b87628f581d5bdULL;
  static const uint64_t static_value2 = 0x2a8b44788eff9d27ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/RfRange";
  }

  static const char* value(const ::ros_sensor_msgs::RfRange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Range to specified object\n\
float64 range\n\
float64 rangeRate\n\
float64 rangeVariance\n\
float64 rangeRateVariance\n\
uint32  timestamp\n\
uint32  sourceId\n\
uint32  destId\n\
uint16  rssi\n\
uint16  quality\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::RfRange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range);
      stream.next(m.rangeRate);
      stream.next(m.rangeVariance);
      stream.next(m.rangeRateVariance);
      stream.next(m.timestamp);
      stream.next(m.sourceId);
      stream.next(m.destId);
      stream.next(m.rssi);
      stream.next(m.quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RfRange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::RfRange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::RfRange_<ContainerAllocator>& v)
  {
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    s << indent << "rangeRate: ";
    Printer<double>::stream(s, indent + "  ", v.rangeRate);
    s << indent << "rangeVariance: ";
    Printer<double>::stream(s, indent + "  ", v.rangeVariance);
    s << indent << "rangeRateVariance: ";
    Printer<double>::stream(s, indent + "  ", v.rangeRateVariance);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "sourceId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sourceId);
    s << indent << "destId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.destId);
    s << indent << "rssi: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rssi);
    s << indent << "quality: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_RFRANGE_H
