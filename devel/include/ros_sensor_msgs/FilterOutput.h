// Generated by gencpp from file ros_sensor_msgs/FilterOutput.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_FILTEROUTPUT_H
#define ROS_SENSOR_MSGS_MESSAGE_FILTEROUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_sensor_msgs/Tags.h>
#include <ros_sensor_msgs/CartesianState.h>
#include <ros_sensor_msgs/CartesianState.h>
#include <ros_sensor_msgs/EulerState.h>
#include <ros_sensor_msgs/EulerState.h>
#include <ros_sensor_msgs/CartesianState.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct FilterOutput_
{
  typedef FilterOutput_<ContainerAllocator> Type;

  FilterOutput_()
    : header()
    , tags()
    , xyzPos()
    , xyzVel()
    , eulerAngles()
    , gyroBias()
    , accelBias()
    , clockBias(0.0)
    , clockDrift(0.0)
    , clockCovariance()
    , rangeCorrection(0.0)  {
      clockCovariance.assign(0.0);
  }
  FilterOutput_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tags(_alloc)
    , xyzPos(_alloc)
    , xyzVel(_alloc)
    , eulerAngles(_alloc)
    , gyroBias(_alloc)
    , accelBias(_alloc)
    , clockBias(0.0)
    , clockDrift(0.0)
    , clockCovariance()
    , rangeCorrection(0.0)  {
  (void)_alloc;
      clockCovariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_sensor_msgs::Tags_<ContainerAllocator>  _tags_type;
  _tags_type tags;

   typedef  ::ros_sensor_msgs::CartesianState_<ContainerAllocator>  _xyzPos_type;
  _xyzPos_type xyzPos;

   typedef  ::ros_sensor_msgs::CartesianState_<ContainerAllocator>  _xyzVel_type;
  _xyzVel_type xyzVel;

   typedef  ::ros_sensor_msgs::EulerState_<ContainerAllocator>  _eulerAngles_type;
  _eulerAngles_type eulerAngles;

   typedef  ::ros_sensor_msgs::EulerState_<ContainerAllocator>  _gyroBias_type;
  _gyroBias_type gyroBias;

   typedef  ::ros_sensor_msgs::CartesianState_<ContainerAllocator>  _accelBias_type;
  _accelBias_type accelBias;

   typedef double _clockBias_type;
  _clockBias_type clockBias;

   typedef double _clockDrift_type;
  _clockDrift_type clockDrift;

   typedef boost::array<double, 4>  _clockCovariance_type;
  _clockCovariance_type clockCovariance;

   typedef double _rangeCorrection_type;
  _rangeCorrection_type rangeCorrection;





  typedef boost::shared_ptr< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> const> ConstPtr;

}; // struct FilterOutput_

typedef ::ros_sensor_msgs::FilterOutput_<std::allocator<void> > FilterOutput;

typedef boost::shared_ptr< ::ros_sensor_msgs::FilterOutput > FilterOutputPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::FilterOutput const> FilterOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5695b591302f0d1858c9347aee166c94";
  }

  static const char* value(const ::ros_sensor_msgs::FilterOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5695b591302f0d18ULL;
  static const uint64_t static_value2 = 0x58c9347aee166c94ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/FilterOutput";
  }

  static const char* value(const ::ros_sensor_msgs::FilterOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
std_msgs/Header   header\n\
\n\
Tags              tags\n\
\n\
CartesianState    xyzPos\n\
CartesianState    xyzVel\n\
EulerState        eulerAngles\n\
EulerState        gyroBias\n\
CartesianState    accelBias\n\
\n\
float64 clockBias\n\
float64 clockDrift\n\
float64[4] clockCovariance\n\
\n\
float64 rangeCorrection\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/Tags\n\
## Header structure for user defined data messages\n\
\n\
GpsTime        gpsTime\n\
SensorType     sensor\n\
ReceiverType   receiver   # String to specify GNSS receiver type\n\
KeyStatus      key\n\
string         sensorName\n\
SourceType     source\n\
bool           dataValid\n\
AssuranceLevel assuranceLevel\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
================================================================================\n\
MSG: ros_sensor_msgs/SensorType\n\
## Sensor Type\n\
\n\
uint8 SensorTypeUnknown = 0\n\
uint8 SensorTypeGps     = 1\n\
uint8 SensorTypeGlonass = 2\n\
uint8 SensorTypeGalileo = 4\n\
uint8 SensorTypeImu     = 8\n\
uint8 SensorRfRange     = 16\n\
uint8 SensorTypeVision  = 32\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/ReceiverType\n\
uint8 RECEIVER_TYPE_UBLOX = 0\n\
uint8 RECEIVER_TYPE_NOVATEL = 1\n\
uint8 RECEIVER_TYPE_DAGR = 2\n\
uint8 RECEIVER_TYPE_MICROGRAM = 3\n\
uint8 RECEIVER_TYPE_TRUTRAK = 4\n\
uint8 RECEIVER_TYPE_GSSIP = 5\n\
uint8 RECEIVER_TYPE_OTHER = 14\n\
uint8 RECEIVER_TYPE_UNKNOWN = 15\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/KeyStatus\n\
## KeyStatus\n\
\n\
uint8 UnauthorizedNotKeyed = 0\n\
uint8 AuthorizedNotKeyed   = 1\n\
uint8 Keyed                = 2\n\
\n\
uint8 status\n\
================================================================================\n\
MSG: ros_sensor_msgs/SourceType\n\
## Source of data\n\
\n\
uint8 SourceTypeUnknown  = 0\n\
uint8 SourceTypeReceiver = 1\n\
uint8 SourceTypeNetwork  = 2\n\
uint8 SourceTypeRinex    = 3\n\
uint8 SourceTypeAny      = 99\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/AssuranceLevel\n\
uint8  Normal   = 0\n\
uint8  Unknown  = 1\n\
uint8  Warning  = 2\n\
uint8  Attack   = 3\n\
\n\
uint8 level\n\
================================================================================\n\
MSG: ros_sensor_msgs/CartesianState\n\
## XYZ position and associated covariance\n\
\n\
float64       x\n\
float64       y\n\
float64       z\n\
\n\
float64[9] covariance\n\
================================================================================\n\
MSG: ros_sensor_msgs/EulerState\n\
## XYZ velocity and associated covariance\n\
\n\
float64       roll\n\
float64       pitch\n\
float64       yaw\n\
\n\
float64[9] covariance\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::FilterOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tags);
      stream.next(m.xyzPos);
      stream.next(m.xyzVel);
      stream.next(m.eulerAngles);
      stream.next(m.gyroBias);
      stream.next(m.accelBias);
      stream.next(m.clockBias);
      stream.next(m.clockDrift);
      stream.next(m.clockCovariance);
      stream.next(m.rangeCorrection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::FilterOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::FilterOutput_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tags: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::Tags_<ContainerAllocator> >::stream(s, indent + "  ", v.tags);
    s << indent << "xyzPos: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::CartesianState_<ContainerAllocator> >::stream(s, indent + "  ", v.xyzPos);
    s << indent << "xyzVel: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::CartesianState_<ContainerAllocator> >::stream(s, indent + "  ", v.xyzVel);
    s << indent << "eulerAngles: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >::stream(s, indent + "  ", v.eulerAngles);
    s << indent << "gyroBias: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >::stream(s, indent + "  ", v.gyroBias);
    s << indent << "accelBias: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::CartesianState_<ContainerAllocator> >::stream(s, indent + "  ", v.accelBias);
    s << indent << "clockBias: ";
    Printer<double>::stream(s, indent + "  ", v.clockBias);
    s << indent << "clockDrift: ";
    Printer<double>::stream(s, indent + "  ", v.clockDrift);
    s << indent << "clockCovariance[]" << std::endl;
    for (size_t i = 0; i < v.clockCovariance.size(); ++i)
    {
      s << indent << "  clockCovariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.clockCovariance[i]);
    }
    s << indent << "rangeCorrection: ";
    Printer<double>::stream(s, indent + "  ", v.rangeCorrection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_FILTEROUTPUT_H
