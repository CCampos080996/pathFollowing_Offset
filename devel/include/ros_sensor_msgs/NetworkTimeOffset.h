// Generated by gencpp from file ros_sensor_msgs/NetworkTimeOffset.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_NETWORKTIMEOFFSET_H
#define ROS_SENSOR_MSGS_MESSAGE_NETWORKTIMEOFFSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/GpsTime.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct NetworkTimeOffset_
{
  typedef NetworkTimeOffset_<ContainerAllocator> Type;

  NetworkTimeOffset_()
    : timeOfValidity()
    , dataValid(false)
    , networkDifferenceCounts(0)
    , networkDriftCounts(0)
    , oscillatorFreqEst(0)
    , networkDifferenceCmdCounts(0)
    , networkDriftCmdCounts(0)
    , networkPpsCount(0)
    , gpsPpsCount(0)  {
    }
  NetworkTimeOffset_(const ContainerAllocator& _alloc)
    : timeOfValidity(_alloc)
    , dataValid(false)
    , networkDifferenceCounts(0)
    , networkDriftCounts(0)
    , oscillatorFreqEst(0)
    , networkDifferenceCmdCounts(0)
    , networkDriftCmdCounts(0)
    , networkPpsCount(0)
    , gpsPpsCount(0)  {
  (void)_alloc;
    }



   typedef  ::ros_sensor_msgs::GpsTime_<ContainerAllocator>  _timeOfValidity_type;
  _timeOfValidity_type timeOfValidity;

   typedef uint8_t _dataValid_type;
  _dataValid_type dataValid;

   typedef int32_t _networkDifferenceCounts_type;
  _networkDifferenceCounts_type networkDifferenceCounts;

   typedef int32_t _networkDriftCounts_type;
  _networkDriftCounts_type networkDriftCounts;

   typedef int32_t _oscillatorFreqEst_type;
  _oscillatorFreqEst_type oscillatorFreqEst;

   typedef int32_t _networkDifferenceCmdCounts_type;
  _networkDifferenceCmdCounts_type networkDifferenceCmdCounts;

   typedef int32_t _networkDriftCmdCounts_type;
  _networkDriftCmdCounts_type networkDriftCmdCounts;

   typedef uint32_t _networkPpsCount_type;
  _networkPpsCount_type networkPpsCount;

   typedef uint32_t _gpsPpsCount_type;
  _gpsPpsCount_type gpsPpsCount;





  typedef boost::shared_ptr< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> const> ConstPtr;

}; // struct NetworkTimeOffset_

typedef ::ros_sensor_msgs::NetworkTimeOffset_<std::allocator<void> > NetworkTimeOffset;

typedef boost::shared_ptr< ::ros_sensor_msgs::NetworkTimeOffset > NetworkTimeOffsetPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::NetworkTimeOffset const> NetworkTimeOffsetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "412c840c046eb987aa756fb5be2c7955";
  }

  static const char* value(const ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x412c840c046eb987ULL;
  static const uint64_t static_value2 = 0xaa756fb5be2c7955ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/NetworkTimeOffset";
  }

  static const char* value(const ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  GpsTime timeOfValidity\n\
  bool    dataValid\n\
  int32   networkDifferenceCounts\n\
  int32   networkDriftCounts\n\
  int32   oscillatorFreqEst\n\
  int32   networkDifferenceCmdCounts\n\
  int32   networkDriftCmdCounts\n\
  uint32  networkPpsCount\n\
  uint32  gpsPpsCount\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeOfValidity);
      stream.next(m.dataValid);
      stream.next(m.networkDifferenceCounts);
      stream.next(m.networkDriftCounts);
      stream.next(m.oscillatorFreqEst);
      stream.next(m.networkDifferenceCmdCounts);
      stream.next(m.networkDriftCmdCounts);
      stream.next(m.networkPpsCount);
      stream.next(m.gpsPpsCount);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NetworkTimeOffset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator>& v)
  {
    s << indent << "timeOfValidity: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::GpsTime_<ContainerAllocator> >::stream(s, indent + "  ", v.timeOfValidity);
    s << indent << "dataValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dataValid);
    s << indent << "networkDifferenceCounts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.networkDifferenceCounts);
    s << indent << "networkDriftCounts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.networkDriftCounts);
    s << indent << "oscillatorFreqEst: ";
    Printer<int32_t>::stream(s, indent + "  ", v.oscillatorFreqEst);
    s << indent << "networkDifferenceCmdCounts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.networkDifferenceCmdCounts);
    s << indent << "networkDriftCmdCounts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.networkDriftCmdCounts);
    s << indent << "networkPpsCount: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.networkPpsCount);
    s << indent << "gpsPpsCount: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gpsPpsCount);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_NETWORKTIMEOFFSET_H
