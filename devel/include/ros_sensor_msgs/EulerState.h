// Generated by gencpp from file ros_sensor_msgs/EulerState.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_EULERSTATE_H
#define ROS_SENSOR_MSGS_MESSAGE_EULERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct EulerState_
{
  typedef EulerState_<ContainerAllocator> Type;

  EulerState_()
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , covariance()  {
      covariance.assign(0.0);
  }
  EulerState_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , covariance()  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef boost::array<double, 9>  _covariance_type;
  _covariance_type covariance;





  typedef boost::shared_ptr< ::ros_sensor_msgs::EulerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::EulerState_<ContainerAllocator> const> ConstPtr;

}; // struct EulerState_

typedef ::ros_sensor_msgs::EulerState_<std::allocator<void> > EulerState;

typedef boost::shared_ptr< ::ros_sensor_msgs::EulerState > EulerStatePtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::EulerState const> EulerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::EulerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::EulerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::EulerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::EulerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4651f6a5328b6bbe00f184a799df153d";
  }

  static const char* value(const ::ros_sensor_msgs::EulerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4651f6a5328b6bbeULL;
  static const uint64_t static_value2 = 0x00f184a799df153dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/EulerState";
  }

  static const char* value(const ::ros_sensor_msgs::EulerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## XYZ velocity and associated covariance\n\
\n\
float64       roll\n\
float64       pitch\n\
float64       yaw\n\
\n\
float64[9] covariance\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::EulerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EulerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::EulerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::EulerState_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_EULERSTATE_H
