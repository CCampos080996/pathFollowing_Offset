// Generated by gencpp from file ros_sensor_msgs/RawMeasurement.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_RAWMEASUREMENT_H
#define ROS_SENSOR_MSGS_MESSAGE_RAWMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/FrequencyType.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct RawMeasurement_
{
  typedef RawMeasurement_<ContainerAllocator> Type;

  RawMeasurement_()
    : prn(0)
    , pseudorange(0.0)
    , pseudorange_variance(0.0)
    , frequency()
    , carrier_phase(0.0)
    , carrier_phase_variance(0.0)
    , doppler(0.0)
    , doppler_variance(0.0)
    , carrier_to_noise(0.0)
    , loss_of_lock(false)  {
    }
  RawMeasurement_(const ContainerAllocator& _alloc)
    : prn(0)
    , pseudorange(0.0)
    , pseudorange_variance(0.0)
    , frequency(_alloc)
    , carrier_phase(0.0)
    , carrier_phase_variance(0.0)
    , doppler(0.0)
    , doppler_variance(0.0)
    , carrier_to_noise(0.0)
    , loss_of_lock(false)  {
  (void)_alloc;
    }



   typedef uint16_t _prn_type;
  _prn_type prn;

   typedef double _pseudorange_type;
  _pseudorange_type pseudorange;

   typedef float _pseudorange_variance_type;
  _pseudorange_variance_type pseudorange_variance;

   typedef  ::ros_sensor_msgs::FrequencyType_<ContainerAllocator>  _frequency_type;
  _frequency_type frequency;

   typedef double _carrier_phase_type;
  _carrier_phase_type carrier_phase;

   typedef float _carrier_phase_variance_type;
  _carrier_phase_variance_type carrier_phase_variance;

   typedef double _doppler_type;
  _doppler_type doppler;

   typedef float _doppler_variance_type;
  _doppler_variance_type doppler_variance;

   typedef double _carrier_to_noise_type;
  _carrier_to_noise_type carrier_to_noise;

   typedef uint8_t _loss_of_lock_type;
  _loss_of_lock_type loss_of_lock;





  typedef boost::shared_ptr< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct RawMeasurement_

typedef ::ros_sensor_msgs::RawMeasurement_<std::allocator<void> > RawMeasurement;

typedef boost::shared_ptr< ::ros_sensor_msgs::RawMeasurement > RawMeasurementPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::RawMeasurement const> RawMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beb1d4f15a4abead550e7439d0f65ebb";
  }

  static const char* value(const ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbeb1d4f15a4abeadULL;
  static const uint64_t static_value2 = 0x550e7439d0f65ebbULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/RawMeasurement";
  }

  static const char* value(const ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Raw measurements for a single channel\n\
\n\
uint16        prn                     # GPS [1-32], GLONASS may be negative\n\
float64       pseudorange             # [m]\n\
float32		  pseudorange_variance	  # [m^2]\n\
FrequencyType frequency               # \n\
float64       carrier_phase           # [m]\n\
float32		  carrier_phase_variance  # [m^2]\n\
float64       doppler                 # [Hz]\n\
float32       doppler_variance		  # [Hz^2]\n\
float64       carrier_to_noise        # [db-Hz]\n\
bool          loss_of_lock            # True - indicates likely loss of\n\
                                      # carrier lock in previous interval\n\
================================================================================\n\
MSG: ros_sensor_msgs/FrequencyType\n\
## Frequency Type\n\
\n\
uint8 FrequencyTypeUnknown      = 0\n\
uint8 FrequencyTypeL1           = 1\n\
uint8 FrequencyTypeL2           = 2\n\
uint8 FrequencyTypeL5           = 3\n\
uint8 FrequencyTypeGalileoE1    = 4\n\
uint8 FrequencyTypeGalileoE5    = 5\n\
uint8 FrequencyTypeGalileoE6    = 6\n\
uint8 FrequencyTypeGalileoC     = 7\n\
uint8 FrequencyTypeGlonassL1F   = 8\n\
uint8 FrequencyTypeGlonassL2F   = 9\n\
uint8 FrequencyTypeGlonassL1C   = 10\n\
uint8 FrequencyTypeGlonassL2C   = 11\n\
uint8 FrequencyTypeGlonassL3C   = 12\n\
\n\
uint8 type\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prn);
      stream.next(m.pseudorange);
      stream.next(m.pseudorange_variance);
      stream.next(m.frequency);
      stream.next(m.carrier_phase);
      stream.next(m.carrier_phase_variance);
      stream.next(m.doppler);
      stream.next(m.doppler_variance);
      stream.next(m.carrier_to_noise);
      stream.next(m.loss_of_lock);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::RawMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "prn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.prn);
    s << indent << "pseudorange: ";
    Printer<double>::stream(s, indent + "  ", v.pseudorange);
    s << indent << "pseudorange_variance: ";
    Printer<float>::stream(s, indent + "  ", v.pseudorange_variance);
    s << indent << "frequency: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >::stream(s, indent + "  ", v.frequency);
    s << indent << "carrier_phase: ";
    Printer<double>::stream(s, indent + "  ", v.carrier_phase);
    s << indent << "carrier_phase_variance: ";
    Printer<float>::stream(s, indent + "  ", v.carrier_phase_variance);
    s << indent << "doppler: ";
    Printer<double>::stream(s, indent + "  ", v.doppler);
    s << indent << "doppler_variance: ";
    Printer<float>::stream(s, indent + "  ", v.doppler_variance);
    s << indent << "carrier_to_noise: ";
    Printer<double>::stream(s, indent + "  ", v.carrier_to_noise);
    s << indent << "loss_of_lock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loss_of_lock);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_RAWMEASUREMENT_H
