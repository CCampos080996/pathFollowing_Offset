// Generated by gencpp from file ros_sensor_msgs/GaitDetection.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_GAITDETECTION_H
#define ROS_SENSOR_MSGS_MESSAGE_GAITDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_sensor_msgs/Vector3Cov.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct GaitDetection_
{
  typedef GaitDetection_<ContainerAllocator> Type;

  GaitDetection_()
    : header()
    , zeroAccBool(false)
    , underLocalAccStdBool(false)
    , zeroAngVelBool(false)
    , stepDetectedBool(false)
    , posBwrtLinR()
    , stepLength(0.0)
    , stepHeight(0.0)
    , stepAngle(0.0)  {
    }
  GaitDetection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , zeroAccBool(false)
    , underLocalAccStdBool(false)
    , zeroAngVelBool(false)
    , stepDetectedBool(false)
    , posBwrtLinR(_alloc)
    , stepLength(0.0)
    , stepHeight(0.0)
    , stepAngle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _zeroAccBool_type;
  _zeroAccBool_type zeroAccBool;

   typedef uint8_t _underLocalAccStdBool_type;
  _underLocalAccStdBool_type underLocalAccStdBool;

   typedef uint8_t _zeroAngVelBool_type;
  _zeroAngVelBool_type zeroAngVelBool;

   typedef uint8_t _stepDetectedBool_type;
  _stepDetectedBool_type stepDetectedBool;

   typedef  ::ros_sensor_msgs::Vector3Cov_<ContainerAllocator>  _posBwrtLinR_type;
  _posBwrtLinR_type posBwrtLinR;

   typedef double _stepLength_type;
  _stepLength_type stepLength;

   typedef double _stepHeight_type;
  _stepHeight_type stepHeight;

   typedef double _stepAngle_type;
  _stepAngle_type stepAngle;





  typedef boost::shared_ptr< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> const> ConstPtr;

}; // struct GaitDetection_

typedef ::ros_sensor_msgs::GaitDetection_<std::allocator<void> > GaitDetection;

typedef boost::shared_ptr< ::ros_sensor_msgs::GaitDetection > GaitDetectionPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::GaitDetection const> GaitDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f261dd9516cbda3f5e7d59b11e4500c5";
  }

  static const char* value(const ::ros_sensor_msgs::GaitDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf261dd9516cbda3fULL;
  static const uint64_t static_value2 = 0x5e7d59b11e4500c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/GaitDetection";
  }

  static const char* value(const ::ros_sensor_msgs::GaitDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
std_msgs/Header header\n\
\n\
bool 		zeroAccBool\n\
bool 		underLocalAccStdBool\n\
bool 		zeroAngVelBool\n\
\n\
bool 		stepDetectedBool\n\
\n\
Vector3Cov 	posBwrtLinR\n\
\n\
float64 	stepLength\n\
float64 	stepHeight\n\
float64 	stepAngle\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/Vector3Cov\n\
geometry_msgs/Vector3 	value 		# unit\n\
float64[9] 				covariance 	# unit^2\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::GaitDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.zeroAccBool);
      stream.next(m.underLocalAccStdBool);
      stream.next(m.zeroAngVelBool);
      stream.next(m.stepDetectedBool);
      stream.next(m.posBwrtLinR);
      stream.next(m.stepLength);
      stream.next(m.stepHeight);
      stream.next(m.stepAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GaitDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::GaitDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::GaitDetection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "zeroAccBool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zeroAccBool);
    s << indent << "underLocalAccStdBool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.underLocalAccStdBool);
    s << indent << "zeroAngVelBool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zeroAngVelBool);
    s << indent << "stepDetectedBool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stepDetectedBool);
    s << indent << "posBwrtLinR: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::Vector3Cov_<ContainerAllocator> >::stream(s, indent + "  ", v.posBwrtLinR);
    s << indent << "stepLength: ";
    Printer<double>::stream(s, indent + "  ", v.stepLength);
    s << indent << "stepHeight: ";
    Printer<double>::stream(s, indent + "  ", v.stepHeight);
    s << indent << "stepAngle: ";
    Printer<double>::stream(s, indent + "  ", v.stepAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_GAITDETECTION_H
