// Generated by gencpp from file ros_sensor_msgs/SingleNodeAssuranceData.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_SINGLENODEASSURANCEDATA_H
#define ROS_SENSOR_MSGS_MESSAGE_SINGLENODEASSURANCEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/PrnDifference.h>
#include <ros_sensor_msgs/AssuranceLevel.h>
#include <ros_sensor_msgs/PrnDifference.h>
#include <ros_sensor_msgs/AssuranceLevel.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct SingleNodeAssuranceData_
{
  typedef SingleNodeAssuranceData_<ContainerAllocator> Type;

  SingleNodeAssuranceData_()
    : pseudoDopplerDiffs()
    , pseudoDopplerDiffAssuranceLevel()
    , carrierToNoiseCheckData()
    , cnoCheckAssuranceLevel()  {
    }
  SingleNodeAssuranceData_(const ContainerAllocator& _alloc)
    : pseudoDopplerDiffs(_alloc)
    , pseudoDopplerDiffAssuranceLevel(_alloc)
    , carrierToNoiseCheckData(_alloc)
    , cnoCheckAssuranceLevel(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::other >  _pseudoDopplerDiffs_type;
  _pseudoDopplerDiffs_type pseudoDopplerDiffs;

   typedef  ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator>  _pseudoDopplerDiffAssuranceLevel_type;
  _pseudoDopplerDiffAssuranceLevel_type pseudoDopplerDiffAssuranceLevel;

   typedef std::vector< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::other >  _carrierToNoiseCheckData_type;
  _carrierToNoiseCheckData_type carrierToNoiseCheckData;

   typedef  ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator>  _cnoCheckAssuranceLevel_type;
  _cnoCheckAssuranceLevel_type cnoCheckAssuranceLevel;





  typedef boost::shared_ptr< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> const> ConstPtr;

}; // struct SingleNodeAssuranceData_

typedef ::ros_sensor_msgs::SingleNodeAssuranceData_<std::allocator<void> > SingleNodeAssuranceData;

typedef boost::shared_ptr< ::ros_sensor_msgs::SingleNodeAssuranceData > SingleNodeAssuranceDataPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::SingleNodeAssuranceData const> SingleNodeAssuranceDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4197bc43f12a41cc3da00c30445631eb";
  }

  static const char* value(const ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4197bc43f12a41ccULL;
  static const uint64_t static_value2 = 0x3da00c30445631ebULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/SingleNodeAssuranceData";
  }

  static const char* value(const ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PrnDifference[]  pseudoDopplerDiffs\n\
AssuranceLevel   pseudoDopplerDiffAssuranceLevel\n\
PrnDifference[]  carrierToNoiseCheckData\n\
AssuranceLevel   cnoCheckAssuranceLevel\n\
================================================================================\n\
MSG: ros_sensor_msgs/PrnDifference\n\
uint32   prn\n\
float64  difference\n\
================================================================================\n\
MSG: ros_sensor_msgs/AssuranceLevel\n\
uint8  Normal   = 0\n\
uint8  Unknown  = 1\n\
uint8  Warning  = 2\n\
uint8  Attack   = 3\n\
\n\
uint8 level\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pseudoDopplerDiffs);
      stream.next(m.pseudoDopplerDiffAssuranceLevel);
      stream.next(m.carrierToNoiseCheckData);
      stream.next(m.cnoCheckAssuranceLevel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleNodeAssuranceData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::SingleNodeAssuranceData_<ContainerAllocator>& v)
  {
    s << indent << "pseudoDopplerDiffs[]" << std::endl;
    for (size_t i = 0; i < v.pseudoDopplerDiffs.size(); ++i)
    {
      s << indent << "  pseudoDopplerDiffs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::stream(s, indent + "    ", v.pseudoDopplerDiffs[i]);
    }
    s << indent << "pseudoDopplerDiffAssuranceLevel: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator> >::stream(s, indent + "  ", v.pseudoDopplerDiffAssuranceLevel);
    s << indent << "carrierToNoiseCheckData[]" << std::endl;
    for (size_t i = 0; i < v.carrierToNoiseCheckData.size(); ++i)
    {
      s << indent << "  carrierToNoiseCheckData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_sensor_msgs::PrnDifference_<ContainerAllocator> >::stream(s, indent + "    ", v.carrierToNoiseCheckData[i]);
    }
    s << indent << "cnoCheckAssuranceLevel: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator> >::stream(s, indent + "  ", v.cnoCheckAssuranceLevel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_SINGLENODEASSURANCEDATA_H
