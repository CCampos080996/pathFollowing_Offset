// Generated by gencpp from file ros_sensor_msgs/WheelSpeed.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_WHEELSPEED_H
#define ROS_SENSOR_MSGS_MESSAGE_WHEELSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct WheelSpeed_
{
  typedef WheelSpeed_<ContainerAllocator> Type;

  WheelSpeed_()
    : wheel_speed(0.0)
    , wheel_speed_variance(0.0)
    , wheel_name()  {
    }
  WheelSpeed_(const ContainerAllocator& _alloc)
    : wheel_speed(0.0)
    , wheel_speed_variance(0.0)
    , wheel_name(_alloc)  {
  (void)_alloc;
    }



   typedef double _wheel_speed_type;
  _wheel_speed_type wheel_speed;

   typedef float _wheel_speed_variance_type;
  _wheel_speed_variance_type wheel_speed_variance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _wheel_name_type;
  _wheel_name_type wheel_name;





  typedef boost::shared_ptr< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct WheelSpeed_

typedef ::ros_sensor_msgs::WheelSpeed_<std::allocator<void> > WheelSpeed;

typedef boost::shared_ptr< ::ros_sensor_msgs::WheelSpeed > WheelSpeedPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::WheelSpeed const> WheelSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a79d594773fea65f5c40acf76550658c";
  }

  static const char* value(const ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa79d594773fea65fULL;
  static const uint64_t static_value2 = 0x5c40acf76550658cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/WheelSpeed";
  }

  static const char* value(const ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 	wheel_speed				    # m/s\n\
float32 	wheel_speed_variance 	# (m/s)^2\n\
string    wheel_name\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_speed);
      stream.next(m.wheel_speed_variance);
      stream.next(m.wheel_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::WheelSpeed_<ContainerAllocator>& v)
  {
    s << indent << "wheel_speed: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_speed);
    s << indent << "wheel_speed_variance: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_variance);
    s << indent << "wheel_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.wheel_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_WHEELSPEED_H
