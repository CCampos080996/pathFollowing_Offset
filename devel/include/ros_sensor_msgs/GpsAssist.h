// Generated by gencpp from file ros_sensor_msgs/GpsAssist.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_GPSASSIST_H
#define ROS_SENSOR_MSGS_MESSAGE_GPSASSIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/LlhPosition.h>
#include <ros_sensor_msgs/CpuTimeOffset.h>
#include <ros_sensor_msgs/GpsEphemeris.h>
#include <ros_sensor_msgs/GpsAlmanac.h>
#include <ros_sensor_msgs/UtcIonosphere.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct GpsAssist_
{
  typedef GpsAssist_<ContainerAllocator> Type;

  GpsAssist_()
    : position()
    , position_valid(false)
    , cpu_time_offset()
    , ephemerides()
    , almanac()
    , utc_iono()
    , utc_iono_valid(false)
    , include_precise_time(false)  {
    }
  GpsAssist_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , position_valid(false)
    , cpu_time_offset(_alloc)
    , ephemerides(_alloc)
    , almanac(_alloc)
    , utc_iono(_alloc)
    , utc_iono_valid(false)
    , include_precise_time(false)  {
  (void)_alloc;
    }



   typedef  ::ros_sensor_msgs::LlhPosition_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef uint8_t _position_valid_type;
  _position_valid_type position_valid;

   typedef  ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator>  _cpu_time_offset_type;
  _cpu_time_offset_type cpu_time_offset;

   typedef std::vector< ::ros_sensor_msgs::GpsEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_sensor_msgs::GpsEphemeris_<ContainerAllocator> >::other >  _ephemerides_type;
  _ephemerides_type ephemerides;

   typedef std::vector< ::ros_sensor_msgs::GpsAlmanac_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_sensor_msgs::GpsAlmanac_<ContainerAllocator> >::other >  _almanac_type;
  _almanac_type almanac;

   typedef  ::ros_sensor_msgs::UtcIonosphere_<ContainerAllocator>  _utc_iono_type;
  _utc_iono_type utc_iono;

   typedef uint8_t _utc_iono_valid_type;
  _utc_iono_valid_type utc_iono_valid;

   typedef uint8_t _include_precise_time_type;
  _include_precise_time_type include_precise_time;





  typedef boost::shared_ptr< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> const> ConstPtr;

}; // struct GpsAssist_

typedef ::ros_sensor_msgs::GpsAssist_<std::allocator<void> > GpsAssist;

typedef boost::shared_ptr< ::ros_sensor_msgs::GpsAssist > GpsAssistPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::GpsAssist const> GpsAssistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2447862b19affe79c50f6956a1e26a6";
  }

  static const char* value(const ::ros_sensor_msgs::GpsAssist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2447862b19affe7ULL;
  static const uint64_t static_value2 = 0x9c50f6956a1e26a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/GpsAssist";
  }

  static const char* value(const ::ros_sensor_msgs::GpsAssist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LlhPosition             position\n\
bool                    position_valid\n\
CpuTimeOffset           cpu_time_offset\n\
GpsEphemeris[]          ephemerides\n\
GpsAlmanac[]            almanac\n\
UtcIonosphere           utc_iono\n\
bool                    utc_iono_valid\n\
bool                    include_precise_time\n\
\n\
#float64                 utc_system_time_offset\n\
#GpsTime                 gps_time\n\
#bool                    gps_time_valid\n\
================================================================================\n\
MSG: ros_sensor_msgs/LlhPosition\n\
# # LlhPosition\n\
\n\
float64                  latitude   # [deg]\n\
float64                  longitude  # [deg]\n\
float64                  altitude   # [m]\n\
uint16                   horizontalAccuracy\n\
uint16                   verticalAccuracy\n\
================================================================================\n\
MSG: ros_sensor_msgs/CpuTimeOffset\n\
bool    valid\n\
float64 secondsOffset\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsEphemeris\n\
## Gps Ephemeris subframes for one satellite\n\
\n\
uint16      prn\n\
uint8[30]   subframe1\n\
uint8[30]   subframe2\n\
uint8[30]   subframe3\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsAlmanac\n\
\n\
uint16      prn\n\
uint16      reference_week\n\
uint8[30]   subframe\n\
================================================================================\n\
MSG: ros_sensor_msgs/UtcIonosphere\n\
## Subframe of UTC and Ionospheric Parameters\n\
\n\
uint8[30]   subframe\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::GpsAssist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.position_valid);
      stream.next(m.cpu_time_offset);
      stream.next(m.ephemerides);
      stream.next(m.almanac);
      stream.next(m.utc_iono);
      stream.next(m.utc_iono_valid);
      stream.next(m.include_precise_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsAssist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::GpsAssist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::GpsAssist_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::LlhPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "position_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_valid);
    s << indent << "cpu_time_offset: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >::stream(s, indent + "  ", v.cpu_time_offset);
    s << indent << "ephemerides[]" << std::endl;
    for (size_t i = 0; i < v.ephemerides.size(); ++i)
    {
      s << indent << "  ephemerides[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_sensor_msgs::GpsEphemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.ephemerides[i]);
    }
    s << indent << "almanac[]" << std::endl;
    for (size_t i = 0; i < v.almanac.size(); ++i)
    {
      s << indent << "  almanac[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_sensor_msgs::GpsAlmanac_<ContainerAllocator> >::stream(s, indent + "    ", v.almanac[i]);
    }
    s << indent << "utc_iono: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::UtcIonosphere_<ContainerAllocator> >::stream(s, indent + "  ", v.utc_iono);
    s << indent << "utc_iono_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utc_iono_valid);
    s << indent << "include_precise_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.include_precise_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_GPSASSIST_H
