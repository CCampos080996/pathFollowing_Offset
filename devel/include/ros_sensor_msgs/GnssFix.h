// Generated by gencpp from file ros_sensor_msgs/GnssFix.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_GNSSFIX_H
#define ROS_SENSOR_MSGS_MESSAGE_GNSSFIX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/FixStatus.h>
#include <ros_sensor_msgs/GpsTime.h>
#include <ros_sensor_msgs/LlhPosition.h>
#include <ros_sensor_msgs/EnuVelocity.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct GnssFix_
{
  typedef GnssFix_<ContainerAllocator> Type;

  GnssFix_()
    : fixStatus()
    , timeOfValidity()
    , llhPosition()
    , enuVelocity()
    , positionCovariance()
    , position_covariance_type(0)  {
      positionCovariance.assign(0.0);
  }
  GnssFix_(const ContainerAllocator& _alloc)
    : fixStatus(_alloc)
    , timeOfValidity(_alloc)
    , llhPosition(_alloc)
    , enuVelocity(_alloc)
    , positionCovariance()
    , position_covariance_type(0)  {
  (void)_alloc;
      positionCovariance.assign(0.0);
  }



   typedef  ::ros_sensor_msgs::FixStatus_<ContainerAllocator>  _fixStatus_type;
  _fixStatus_type fixStatus;

   typedef  ::ros_sensor_msgs::GpsTime_<ContainerAllocator>  _timeOfValidity_type;
  _timeOfValidity_type timeOfValidity;

   typedef  ::ros_sensor_msgs::LlhPosition_<ContainerAllocator>  _llhPosition_type;
  _llhPosition_type llhPosition;

   typedef  ::ros_sensor_msgs::EnuVelocity_<ContainerAllocator>  _enuVelocity_type;
  _enuVelocity_type enuVelocity;

   typedef boost::array<double, 9>  _positionCovariance_type;
  _positionCovariance_type positionCovariance;

   typedef uint8_t _position_covariance_type_type;
  _position_covariance_type_type position_covariance_type;



  enum {
    COVARIANCE_TYPE_UNKNOWN = 0u,
    COVARIANCE_TYPE_APPROXIMATED = 1u,
    COVARIANCE_TYPE_DIAGONAL_KNOWN = 2u,
    COVARIANCE_TYPE_KNOWN = 3u,
  };


  typedef boost::shared_ptr< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> const> ConstPtr;

}; // struct GnssFix_

typedef ::ros_sensor_msgs::GnssFix_<std::allocator<void> > GnssFix;

typedef boost::shared_ptr< ::ros_sensor_msgs::GnssFix > GnssFixPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::GnssFix const> GnssFixConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::GnssFix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e5620648cab804bd0f37c21067cabe9";
  }

  static const char* value(const ::ros_sensor_msgs::GnssFix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e5620648cab804bULL;
  static const uint64_t static_value2 = 0xd0f37c21067cabe9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/GnssFix";
  }

  static const char* value(const ::ros_sensor_msgs::GnssFix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
FixStatus                fixStatus\n\
GpsTime                  timeOfValidity\n\
LlhPosition              llhPosition\n\
EnuVelocity              enuVelocity          \n\
float64[9] 				 positionCovariance\n\
\n\
uint8 COVARIANCE_TYPE_UNKNOWN = 0\n\
uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n\
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n\
uint8 COVARIANCE_TYPE_KNOWN = 3\n\
uint8 position_covariance_type\n\
================================================================================\n\
MSG: ros_sensor_msgs/FixStatus\n\
# # FixStatus\n\
\n\
FixType fix\n\
uint32  numSvs\n\
float64  ttff\n\
================================================================================\n\
MSG: ros_sensor_msgs/FixType\n\
## Fix Type\n\
\n\
uint8 FixTypeNone = 0\n\
uint8 FixTypeDeadReckoning = 1\n\
uint8 FixType2D = 2\n\
uint8 FixType3D = 3\n\
uint8 FixTypeDRand3D = 4 ## Dead reckoning and GPS fix\n\
uint8 FixTypeTimeOnly = 5\n\
uint8 FixTypeStatic = 9\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
================================================================================\n\
MSG: ros_sensor_msgs/LlhPosition\n\
# # LlhPosition\n\
\n\
float64                  latitude   # [deg]\n\
float64                  longitude  # [deg]\n\
float64                  altitude   # [m]\n\
uint16                   horizontalAccuracy\n\
uint16                   verticalAccuracy\n\
================================================================================\n\
MSG: ros_sensor_msgs/EnuVelocity\n\
float64					 eastVelocity\n\
float64                  northVelocity\n\
float64                  upVelocity\n\
float32                  horizontalAccuracy\n\
float32                  verticalAccuracy    \n\
";
  }

  static const char* value(const ::ros_sensor_msgs::GnssFix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fixStatus);
      stream.next(m.timeOfValidity);
      stream.next(m.llhPosition);
      stream.next(m.enuVelocity);
      stream.next(m.positionCovariance);
      stream.next(m.position_covariance_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssFix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::GnssFix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::GnssFix_<ContainerAllocator>& v)
  {
    s << indent << "fixStatus: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::FixStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fixStatus);
    s << indent << "timeOfValidity: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::GpsTime_<ContainerAllocator> >::stream(s, indent + "  ", v.timeOfValidity);
    s << indent << "llhPosition: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::LlhPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.llhPosition);
    s << indent << "enuVelocity: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::EnuVelocity_<ContainerAllocator> >::stream(s, indent + "  ", v.enuVelocity);
    s << indent << "positionCovariance[]" << std::endl;
    for (size_t i = 0; i < v.positionCovariance.size(); ++i)
    {
      s << indent << "  positionCovariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positionCovariance[i]);
    }
    s << indent << "position_covariance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_covariance_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_GNSSFIX_H
