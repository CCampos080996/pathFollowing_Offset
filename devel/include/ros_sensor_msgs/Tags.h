// Generated by gencpp from file ros_sensor_msgs/Tags.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_TAGS_H
#define ROS_SENSOR_MSGS_MESSAGE_TAGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/GpsTime.h>
#include <ros_sensor_msgs/SensorType.h>
#include <ros_sensor_msgs/ReceiverType.h>
#include <ros_sensor_msgs/KeyStatus.h>
#include <ros_sensor_msgs/SourceType.h>
#include <ros_sensor_msgs/AssuranceLevel.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct Tags_
{
  typedef Tags_<ContainerAllocator> Type;

  Tags_()
    : gpsTime()
    , sensor()
    , receiver()
    , key()
    , sensorName()
    , source()
    , dataValid(false)
    , assuranceLevel()  {
    }
  Tags_(const ContainerAllocator& _alloc)
    : gpsTime(_alloc)
    , sensor(_alloc)
    , receiver(_alloc)
    , key(_alloc)
    , sensorName(_alloc)
    , source(_alloc)
    , dataValid(false)
    , assuranceLevel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_sensor_msgs::GpsTime_<ContainerAllocator>  _gpsTime_type;
  _gpsTime_type gpsTime;

   typedef  ::ros_sensor_msgs::SensorType_<ContainerAllocator>  _sensor_type;
  _sensor_type sensor;

   typedef  ::ros_sensor_msgs::ReceiverType_<ContainerAllocator>  _receiver_type;
  _receiver_type receiver;

   typedef  ::ros_sensor_msgs::KeyStatus_<ContainerAllocator>  _key_type;
  _key_type key;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensorName_type;
  _sensorName_type sensorName;

   typedef  ::ros_sensor_msgs::SourceType_<ContainerAllocator>  _source_type;
  _source_type source;

   typedef uint8_t _dataValid_type;
  _dataValid_type dataValid;

   typedef  ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator>  _assuranceLevel_type;
  _assuranceLevel_type assuranceLevel;





  typedef boost::shared_ptr< ::ros_sensor_msgs::Tags_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::Tags_<ContainerAllocator> const> ConstPtr;

}; // struct Tags_

typedef ::ros_sensor_msgs::Tags_<std::allocator<void> > Tags;

typedef boost::shared_ptr< ::ros_sensor_msgs::Tags > TagsPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::Tags const> TagsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::Tags_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::Tags_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::Tags_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::Tags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::Tags_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2af7cb470f851fdf59b411eaf3a14b0c";
  }

  static const char* value(const ::ros_sensor_msgs::Tags_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2af7cb470f851fdfULL;
  static const uint64_t static_value2 = 0x59b411eaf3a14b0cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/Tags";
  }

  static const char* value(const ::ros_sensor_msgs::Tags_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Header structure for user defined data messages\n\
\n\
GpsTime        gpsTime\n\
SensorType     sensor\n\
ReceiverType   receiver   # String to specify GNSS receiver type\n\
KeyStatus      key\n\
string         sensorName\n\
SourceType     source\n\
bool           dataValid\n\
AssuranceLevel assuranceLevel\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
================================================================================\n\
MSG: ros_sensor_msgs/SensorType\n\
## Sensor Type\n\
\n\
uint8 SensorTypeUnknown = 0\n\
uint8 SensorTypeGps     = 1\n\
uint8 SensorTypeGlonass = 2\n\
uint8 SensorTypeGalileo = 4\n\
uint8 SensorTypeImu     = 8\n\
uint8 SensorRfRange     = 16\n\
uint8 SensorTypeVision  = 32\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/ReceiverType\n\
uint8 RECEIVER_TYPE_UBLOX = 0\n\
uint8 RECEIVER_TYPE_NOVATEL = 1\n\
uint8 RECEIVER_TYPE_DAGR = 2\n\
uint8 RECEIVER_TYPE_MICROGRAM = 3\n\
uint8 RECEIVER_TYPE_TRUTRAK = 4\n\
uint8 RECEIVER_TYPE_GSSIP = 5\n\
uint8 RECEIVER_TYPE_OTHER = 14\n\
uint8 RECEIVER_TYPE_UNKNOWN = 15\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/KeyStatus\n\
## KeyStatus\n\
\n\
uint8 UnauthorizedNotKeyed = 0\n\
uint8 AuthorizedNotKeyed   = 1\n\
uint8 Keyed                = 2\n\
\n\
uint8 status\n\
================================================================================\n\
MSG: ros_sensor_msgs/SourceType\n\
## Source of data\n\
\n\
uint8 SourceTypeUnknown  = 0\n\
uint8 SourceTypeReceiver = 1\n\
uint8 SourceTypeNetwork  = 2\n\
uint8 SourceTypeRinex    = 3\n\
uint8 SourceTypeAny      = 99\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/AssuranceLevel\n\
uint8  Normal   = 0\n\
uint8  Unknown  = 1\n\
uint8  Warning  = 2\n\
uint8  Attack   = 3\n\
\n\
uint8 level\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::Tags_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gpsTime);
      stream.next(m.sensor);
      stream.next(m.receiver);
      stream.next(m.key);
      stream.next(m.sensorName);
      stream.next(m.source);
      stream.next(m.dataValid);
      stream.next(m.assuranceLevel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tags_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::Tags_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::Tags_<ContainerAllocator>& v)
  {
    s << indent << "gpsTime: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::GpsTime_<ContainerAllocator> >::stream(s, indent + "  ", v.gpsTime);
    s << indent << "sensor: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::SensorType_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor);
    s << indent << "receiver: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::ReceiverType_<ContainerAllocator> >::stream(s, indent + "  ", v.receiver);
    s << indent << "key: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::KeyStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.key);
    s << indent << "sensorName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensorName);
    s << indent << "source: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::SourceType_<ContainerAllocator> >::stream(s, indent + "  ", v.source);
    s << indent << "dataValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dataValid);
    s << indent << "assuranceLevel: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator> >::stream(s, indent + "  ", v.assuranceLevel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_TAGS_H
