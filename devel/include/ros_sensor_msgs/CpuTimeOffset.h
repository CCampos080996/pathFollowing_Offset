// Generated by gencpp from file ros_sensor_msgs/CpuTimeOffset.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_CPUTIMEOFFSET_H
#define ROS_SENSOR_MSGS_MESSAGE_CPUTIMEOFFSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct CpuTimeOffset_
{
  typedef CpuTimeOffset_<ContainerAllocator> Type;

  CpuTimeOffset_()
    : valid(false)
    , secondsOffset(0.0)  {
    }
  CpuTimeOffset_(const ContainerAllocator& _alloc)
    : valid(false)
    , secondsOffset(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef double _secondsOffset_type;
  _secondsOffset_type secondsOffset;





  typedef boost::shared_ptr< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> const> ConstPtr;

}; // struct CpuTimeOffset_

typedef ::ros_sensor_msgs::CpuTimeOffset_<std::allocator<void> > CpuTimeOffset;

typedef boost::shared_ptr< ::ros_sensor_msgs::CpuTimeOffset > CpuTimeOffsetPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::CpuTimeOffset const> CpuTimeOffsetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe6721beec4e50ad7c1762c7c1827237";
  }

  static const char* value(const ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe6721beec4e50adULL;
  static const uint64_t static_value2 = 0x7c1762c7c1827237ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/CpuTimeOffset";
  }

  static const char* value(const ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool    valid\n\
float64 secondsOffset\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valid);
      stream.next(m.secondsOffset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CpuTimeOffset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator>& v)
  {
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "secondsOffset: ";
    Printer<double>::stream(s, indent + "  ", v.secondsOffset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_CPUTIMEOFFSET_H
