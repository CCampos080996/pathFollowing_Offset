// Generated by gencpp from file ros_sensor_msgs/NavState.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_NAVSTATE_H
#define ROS_SENSOR_MSGS_MESSAGE_NAVSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_sensor_msgs/Vector3Cov.h>
#include <ros_sensor_msgs/Vector3Cov.h>
#include <ros_sensor_msgs/QuaternionCov.h>
#include <ros_sensor_msgs/AssuranceLevel.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct NavState_
{
  typedef NavState_<ContainerAllocator> Type;

  NavState_()
    : header()
    , parent_frame_id()
    , position()
    , velocity()
    , attitude()
    , assuranceLevel()  {
    }
  NavState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , parent_frame_id(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , attitude(_alloc)
    , assuranceLevel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parent_frame_id_type;
  _parent_frame_id_type parent_frame_id;

   typedef  ::ros_sensor_msgs::Vector3Cov_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::ros_sensor_msgs::Vector3Cov_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::ros_sensor_msgs::QuaternionCov_<ContainerAllocator>  _attitude_type;
  _attitude_type attitude;

   typedef  ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator>  _assuranceLevel_type;
  _assuranceLevel_type assuranceLevel;





  typedef boost::shared_ptr< ::ros_sensor_msgs::NavState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::NavState_<ContainerAllocator> const> ConstPtr;

}; // struct NavState_

typedef ::ros_sensor_msgs::NavState_<std::allocator<void> > NavState;

typedef boost::shared_ptr< ::ros_sensor_msgs::NavState > NavStatePtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::NavState const> NavStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::NavState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::NavState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::NavState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::NavState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::NavState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24804c40e60ccc8400a9fcc2cccc88b2";
  }

  static const char* value(const ::ros_sensor_msgs::NavState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24804c40e60ccc84ULL;
  static const uint64_t static_value2 = 0x00a9fcc2cccc88b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/NavState";
  }

  static const char* value(const ::ros_sensor_msgs::NavState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
string 			parent_frame_id\n\
\n\
Vector3Cov 		position		# m, m^2\n\
Vector3Cov 		velocity		# m/s, (m/s)^2\n\
QuaternionCov 	attitude		# none, rad^2\n\
AssuranceLevel  assuranceLevel\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/Vector3Cov\n\
geometry_msgs/Vector3 	value 		# unit\n\
float64[9] 				covariance 	# unit^2\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: ros_sensor_msgs/QuaternionCov\n\
geometry_msgs/Quaternion 	value\n\
float64[9] 				 	covariance 	# rad^2\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/AssuranceLevel\n\
uint8  Normal   = 0\n\
uint8  Unknown  = 1\n\
uint8  Warning  = 2\n\
uint8  Attack   = 3\n\
\n\
uint8 level\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::NavState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.parent_frame_id);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.attitude);
      stream.next(m.assuranceLevel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::NavState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::NavState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "parent_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parent_frame_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::Vector3Cov_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::Vector3Cov_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "attitude: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::QuaternionCov_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "assuranceLevel: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator> >::stream(s, indent + "  ", v.assuranceLevel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_NAVSTATE_H
