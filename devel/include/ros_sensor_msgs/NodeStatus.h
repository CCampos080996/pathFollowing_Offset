// Generated by gencpp from file ros_sensor_msgs/NodeStatus.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_NODESTATUS_H
#define ROS_SENSOR_MSGS_MESSAGE_NODESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_sensor_msgs/Tags.h>
#include <ros_sensor_msgs/FixType.h>
#include <ros_sensor_msgs/AvlSatelliteData.h>
#include <ros_sensor_msgs/AvlSatelliteData.h>
#include <ros_sensor_msgs/NetworkTimeOffset.h>
#include <ros_sensor_msgs/CpuTimeOffset.h>
#include <ros_sensor_msgs/AssuranceLevel.h>
#include <ros_sensor_msgs/AssuranceCheckValue.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct NodeStatus_
{
  typedef NodeStatus_<ContainerAllocator> Type;

  NodeStatus_()
    : header()
    , tags()
    , fix()
    , numSatellitesAvailable(0)
    , timeSinceLastFix(0)
    , availableEphemeris()
    , availableAlmanac()
    , utcIonoAvailable(false)
    , networkTimeOffset()
    , computerTimeOffset()
    , assurance()
    , assuranceCheckVal()
    , isStale(false)  {
    }
  NodeStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tags(_alloc)
    , fix(_alloc)
    , numSatellitesAvailable(0)
    , timeSinceLastFix(0)
    , availableEphemeris(_alloc)
    , availableAlmanac(_alloc)
    , utcIonoAvailable(false)
    , networkTimeOffset(_alloc)
    , computerTimeOffset(_alloc)
    , assurance(_alloc)
    , assuranceCheckVal(_alloc)
    , isStale(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ros_sensor_msgs::Tags_<ContainerAllocator>  _tags_type;
  _tags_type tags;

   typedef  ::ros_sensor_msgs::FixType_<ContainerAllocator>  _fix_type;
  _fix_type fix;

   typedef uint8_t _numSatellitesAvailable_type;
  _numSatellitesAvailable_type numSatellitesAvailable;

   typedef uint16_t _timeSinceLastFix_type;
  _timeSinceLastFix_type timeSinceLastFix;

   typedef  ::ros_sensor_msgs::AvlSatelliteData_<ContainerAllocator>  _availableEphemeris_type;
  _availableEphemeris_type availableEphemeris;

   typedef  ::ros_sensor_msgs::AvlSatelliteData_<ContainerAllocator>  _availableAlmanac_type;
  _availableAlmanac_type availableAlmanac;

   typedef uint8_t _utcIonoAvailable_type;
  _utcIonoAvailable_type utcIonoAvailable;

   typedef  ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator>  _networkTimeOffset_type;
  _networkTimeOffset_type networkTimeOffset;

   typedef  ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator>  _computerTimeOffset_type;
  _computerTimeOffset_type computerTimeOffset;

   typedef  ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator>  _assurance_type;
  _assurance_type assurance;

   typedef std::vector< ::ros_sensor_msgs::AssuranceCheckValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_sensor_msgs::AssuranceCheckValue_<ContainerAllocator> >::other >  _assuranceCheckVal_type;
  _assuranceCheckVal_type assuranceCheckVal;

   typedef uint8_t _isStale_type;
  _isStale_type isStale;





  typedef boost::shared_ptr< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NodeStatus_

typedef ::ros_sensor_msgs::NodeStatus_<std::allocator<void> > NodeStatus;

typedef boost::shared_ptr< ::ros_sensor_msgs::NodeStatus > NodeStatusPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::NodeStatus const> NodeStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "278b370fcaf1e9224bd8b33acea7e9ca";
  }

  static const char* value(const ::ros_sensor_msgs::NodeStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x278b370fcaf1e922ULL;
  static const uint64_t static_value2 = 0x4bd8b33acea7e9caULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/NodeStatus";
  }

  static const char* value(const ::ros_sensor_msgs::NodeStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header       header\n\
Tags                  tags\n\
FixType               fix\n\
uint8                 numSatellitesAvailable\n\
uint16                timeSinceLastFix     # in seconds [s]\n\
AvlSatelliteData      availableEphemeris   # bit field\n\
AvlSatelliteData      availableAlmanac     # bit field\n\
bool                  utcIonoAvailable\n\
NetworkTimeOffset     networkTimeOffset\n\
CpuTimeOffset         computerTimeOffset\n\
AssuranceLevel        assurance\n\
AssuranceCheckValue[] assuranceCheckVal\n\
bool                  isStale\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ros_sensor_msgs/Tags\n\
## Header structure for user defined data messages\n\
\n\
GpsTime        gpsTime\n\
SensorType     sensor\n\
ReceiverType   receiver   # String to specify GNSS receiver type\n\
KeyStatus      key\n\
string         sensorName\n\
SourceType     source\n\
bool           dataValid\n\
AssuranceLevel assuranceLevel\n\
================================================================================\n\
MSG: ros_sensor_msgs/GpsTime\n\
## GPS time structure\n\
uint32          gps_week        # Full GPS week from (0:0:00 Jan 06, 1980)\n\
float64         gps_seconds     # GPS seconds into week [sec]\n\
================================================================================\n\
MSG: ros_sensor_msgs/SensorType\n\
## Sensor Type\n\
\n\
uint8 SensorTypeUnknown = 0\n\
uint8 SensorTypeGps     = 1\n\
uint8 SensorTypeGlonass = 2\n\
uint8 SensorTypeGalileo = 4\n\
uint8 SensorTypeImu     = 8\n\
uint8 SensorRfRange     = 16\n\
uint8 SensorTypeVision  = 32\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/ReceiverType\n\
uint8 RECEIVER_TYPE_UBLOX = 0\n\
uint8 RECEIVER_TYPE_NOVATEL = 1\n\
uint8 RECEIVER_TYPE_DAGR = 2\n\
uint8 RECEIVER_TYPE_MICROGRAM = 3\n\
uint8 RECEIVER_TYPE_TRUTRAK = 4\n\
uint8 RECEIVER_TYPE_GSSIP = 5\n\
uint8 RECEIVER_TYPE_OTHER = 14\n\
uint8 RECEIVER_TYPE_UNKNOWN = 15\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/KeyStatus\n\
## KeyStatus\n\
\n\
uint8 UnauthorizedNotKeyed = 0\n\
uint8 AuthorizedNotKeyed   = 1\n\
uint8 Keyed                = 2\n\
\n\
uint8 status\n\
================================================================================\n\
MSG: ros_sensor_msgs/SourceType\n\
## Source of data\n\
\n\
uint8 SourceTypeUnknown  = 0\n\
uint8 SourceTypeReceiver = 1\n\
uint8 SourceTypeNetwork  = 2\n\
uint8 SourceTypeRinex    = 3\n\
uint8 SourceTypeAny      = 99\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/AssuranceLevel\n\
uint8  Normal   = 0\n\
uint8  Unknown  = 1\n\
uint8  Warning  = 2\n\
uint8  Attack   = 3\n\
\n\
uint8 level\n\
================================================================================\n\
MSG: ros_sensor_msgs/FixType\n\
## Fix Type\n\
\n\
uint8 FixTypeNone = 0\n\
uint8 FixTypeDeadReckoning = 1\n\
uint8 FixType2D = 2\n\
uint8 FixType3D = 3\n\
uint8 FixTypeDRand3D = 4 ## Dead reckoning and GPS fix\n\
uint8 FixTypeTimeOnly = 5\n\
uint8 FixTypeStatic = 9\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/AvlSatelliteData\n\
uint32    fromReceiver\n\
uint32    fromNetwork\n\
uint32    fromRinex\n\
uint32    fromUnknown\n\
================================================================================\n\
MSG: ros_sensor_msgs/NetworkTimeOffset\n\
  GpsTime timeOfValidity\n\
  bool    dataValid\n\
  int32   networkDifferenceCounts\n\
  int32   networkDriftCounts\n\
  int32   oscillatorFreqEst\n\
  int32   networkDifferenceCmdCounts\n\
  int32   networkDriftCmdCounts\n\
  uint32  networkPpsCount\n\
  uint32  gpsPpsCount\n\
================================================================================\n\
MSG: ros_sensor_msgs/CpuTimeOffset\n\
bool    valid\n\
float64 secondsOffset\n\
================================================================================\n\
MSG: ros_sensor_msgs/AssuranceCheckValue\n\
## An assurance check value for a given prn\n\
\n\
uint32    prn\n\
uint32    checkVal\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::NodeStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tags);
      stream.next(m.fix);
      stream.next(m.numSatellitesAvailable);
      stream.next(m.timeSinceLastFix);
      stream.next(m.availableEphemeris);
      stream.next(m.availableAlmanac);
      stream.next(m.utcIonoAvailable);
      stream.next(m.networkTimeOffset);
      stream.next(m.computerTimeOffset);
      stream.next(m.assurance);
      stream.next(m.assuranceCheckVal);
      stream.next(m.isStale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::NodeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::NodeStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tags: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::Tags_<ContainerAllocator> >::stream(s, indent + "  ", v.tags);
    s << indent << "fix: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::FixType_<ContainerAllocator> >::stream(s, indent + "  ", v.fix);
    s << indent << "numSatellitesAvailable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.numSatellitesAvailable);
    s << indent << "timeSinceLastFix: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timeSinceLastFix);
    s << indent << "availableEphemeris: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AvlSatelliteData_<ContainerAllocator> >::stream(s, indent + "  ", v.availableEphemeris);
    s << indent << "availableAlmanac: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AvlSatelliteData_<ContainerAllocator> >::stream(s, indent + "  ", v.availableAlmanac);
    s << indent << "utcIonoAvailable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utcIonoAvailable);
    s << indent << "networkTimeOffset: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::NetworkTimeOffset_<ContainerAllocator> >::stream(s, indent + "  ", v.networkTimeOffset);
    s << indent << "computerTimeOffset: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::CpuTimeOffset_<ContainerAllocator> >::stream(s, indent + "  ", v.computerTimeOffset);
    s << indent << "assurance: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::AssuranceLevel_<ContainerAllocator> >::stream(s, indent + "  ", v.assurance);
    s << indent << "assuranceCheckVal[]" << std::endl;
    for (size_t i = 0; i < v.assuranceCheckVal.size(); ++i)
    {
      s << indent << "  assuranceCheckVal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_sensor_msgs::AssuranceCheckValue_<ContainerAllocator> >::stream(s, indent + "    ", v.assuranceCheckVal[i]);
    }
    s << indent << "isStale: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isStale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_NODESTATUS_H
