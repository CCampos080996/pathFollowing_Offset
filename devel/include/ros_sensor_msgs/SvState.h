// Generated by gencpp from file ros_sensor_msgs/SvState.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_SVSTATE_H
#define ROS_SENSOR_MSGS_MESSAGE_SVSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Twist.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct SvState_
{
  typedef SvState_<ContainerAllocator> Type;

  SvState_()
    : prn(0)
    , position()
    , velocity()
    , svClockCorrection(0.0)  {
    }
  SvState_(const ContainerAllocator& _alloc)
    : prn(0)
    , position(_alloc)
    , velocity(_alloc)
    , svClockCorrection(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _prn_type;
  _prn_type prn;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _svClockCorrection_type;
  _svClockCorrection_type svClockCorrection;





  typedef boost::shared_ptr< ::ros_sensor_msgs::SvState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::SvState_<ContainerAllocator> const> ConstPtr;

}; // struct SvState_

typedef ::ros_sensor_msgs::SvState_<std::allocator<void> > SvState;

typedef boost::shared_ptr< ::ros_sensor_msgs::SvState > SvStatePtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::SvState const> SvStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::SvState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::SvState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::SvState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::SvState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::SvState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2297006b8e3021b7976c30f47c3e4ff";
  }

  static const char* value(const ::ros_sensor_msgs::SvState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2297006b8e3021bULL;
  static const uint64_t static_value2 = 0x7976c30f47c3e4ffULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/SvState";
  }

  static const char* value(const ::ros_sensor_msgs::SvState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Satellite vehicle state information\n\
\n\
uint16                prn                 # GPS [1-32], GLONASS may be negative\n\
geometry_msgs/Point   position            # Satellite position in ECEF [m]\n\
geometry_msgs/Twist   velocity            # Satellite velocity in ECEF [m/s]\n\
float64               svClockCorrection   # Satellite clock correction [m]\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::SvState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prn);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.svClockCorrection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SvState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::SvState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::SvState_<ContainerAllocator>& v)
  {
    s << indent << "prn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.prn);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "svClockCorrection: ";
    Printer<double>::stream(s, indent + "  ", v.svClockCorrection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_SVSTATE_H
