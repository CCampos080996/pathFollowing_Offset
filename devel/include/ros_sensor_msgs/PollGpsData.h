// Generated by gencpp from file ros_sensor_msgs/PollGpsData.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_POLLGPSDATA_H
#define ROS_SENSOR_MSGS_MESSAGE_POLLGPSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct PollGpsData_
{
  typedef PollGpsData_<ContainerAllocator> Type;

  PollGpsData_()
    : pvt(false)
    , ephemeris(false)
    , almanac(false)
    , utc_iono(false)
    , ranges(false)  {
    }
  PollGpsData_(const ContainerAllocator& _alloc)
    : pvt(false)
    , ephemeris(false)
    , almanac(false)
    , utc_iono(false)
    , ranges(false)  {
  (void)_alloc;
    }



   typedef uint8_t _pvt_type;
  _pvt_type pvt;

   typedef uint8_t _ephemeris_type;
  _ephemeris_type ephemeris;

   typedef uint8_t _almanac_type;
  _almanac_type almanac;

   typedef uint8_t _utc_iono_type;
  _utc_iono_type utc_iono;

   typedef uint8_t _ranges_type;
  _ranges_type ranges;





  typedef boost::shared_ptr< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> const> ConstPtr;

}; // struct PollGpsData_

typedef ::ros_sensor_msgs::PollGpsData_<std::allocator<void> > PollGpsData;

typedef boost::shared_ptr< ::ros_sensor_msgs::PollGpsData > PollGpsDataPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::PollGpsData const> PollGpsDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92871acf07b81d655c7b80e6382140a2";
  }

  static const char* value(const ::ros_sensor_msgs::PollGpsData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92871acf07b81d65ULL;
  static const uint64_t static_value2 = 0x5c7b80e6382140a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/PollGpsData";
  }

  static const char* value(const ::ros_sensor_msgs::PollGpsData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool    pvt\n\
bool    ephemeris\n\
bool    almanac\n\
bool    utc_iono\n\
bool    ranges\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::PollGpsData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pvt);
      stream.next(m.ephemeris);
      stream.next(m.almanac);
      stream.next(m.utc_iono);
      stream.next(m.ranges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PollGpsData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::PollGpsData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::PollGpsData_<ContainerAllocator>& v)
  {
    s << indent << "pvt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pvt);
    s << indent << "ephemeris: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ephemeris);
    s << indent << "almanac: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.almanac);
    s << indent << "utc_iono: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utc_iono);
    s << indent << "ranges: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ranges);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_POLLGPSDATA_H
