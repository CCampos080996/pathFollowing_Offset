// Generated by gencpp from file ros_sensor_msgs/ChannelStatus.msg
// DO NOT EDIT!


#ifndef ROS_SENSOR_MSGS_MESSAGE_CHANNELSTATUS_H
#define ROS_SENSOR_MSGS_MESSAGE_CHANNELSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sensor_msgs/TrackingStatus.h>
#include <ros_sensor_msgs/CodeType.h>
#include <ros_sensor_msgs/FrequencyType.h>

namespace ros_sensor_msgs
{
template <class ContainerAllocator>
struct ChannelStatus_
{
  typedef ChannelStatus_<ContainerAllocator> Type;

  ChannelStatus_()
    : prn(0)
    , receiverChannel(0)
    , carrierToNoise(0)
    , azimuth(0.0)
    , elevation(0.0)
    , tracking()
    , code()
    , frequency()
    , usedInSolution(false)  {
    }
  ChannelStatus_(const ContainerAllocator& _alloc)
    : prn(0)
    , receiverChannel(0)
    , carrierToNoise(0)
    , azimuth(0.0)
    , elevation(0.0)
    , tracking(_alloc)
    , code(_alloc)
    , frequency(_alloc)
    , usedInSolution(false)  {
  (void)_alloc;
    }



   typedef uint32_t _prn_type;
  _prn_type prn;

   typedef uint32_t _receiverChannel_type;
  _receiverChannel_type receiverChannel;

   typedef uint32_t _carrierToNoise_type;
  _carrierToNoise_type carrierToNoise;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef float _elevation_type;
  _elevation_type elevation;

   typedef  ::ros_sensor_msgs::TrackingStatus_<ContainerAllocator>  _tracking_type;
  _tracking_type tracking;

   typedef  ::ros_sensor_msgs::CodeType_<ContainerAllocator>  _code_type;
  _code_type code;

   typedef  ::ros_sensor_msgs::FrequencyType_<ContainerAllocator>  _frequency_type;
  _frequency_type frequency;

   typedef uint8_t _usedInSolution_type;
  _usedInSolution_type usedInSolution;





  typedef boost::shared_ptr< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ChannelStatus_

typedef ::ros_sensor_msgs::ChannelStatus_<std::allocator<void> > ChannelStatus;

typedef boost::shared_ptr< ::ros_sensor_msgs::ChannelStatus > ChannelStatusPtr;
typedef boost::shared_ptr< ::ros_sensor_msgs::ChannelStatus const> ChannelStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'ros_sensor_msgs': ['/home/christian/lateralOffset/src/ros-sensor-msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10bf0cee067be1677c1f456497b33d3b";
  }

  static const char* value(const ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10bf0cee067be167ULL;
  static const uint64_t static_value2 = 0x7c1f456497b33d3bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sensor_msgs/ChannelStatus";
  }

  static const char* value(const ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "###Channel Status\n\
\n\
uint32         prn\n\
uint32         receiverChannel\n\
uint32         carrierToNoise   # db-Hz\n\
float32        azimuth\n\
float32        elevation\n\
TrackingStatus tracking\n\
CodeType       code\n\
FrequencyType  frequency\n\
bool           usedInSolution\n\
================================================================================\n\
MSG: ros_sensor_msgs/TrackingStatus\n\
## Tracking Status\n\
\n\
uint8 Idle                        = 0\n\
uint8 SearchingCa                 = 1\n\
uint8 SearchingPy                 = 2\n\
uint8 CodeLock                    = 3\n\
uint8 CarrierLock                 = 4\n\
uint8 CarrierTrackDataCollect     = 5\n\
uint8 SequentialResynchronization = 6\n\
uint8 Reacquisition               = 7\n\
uint8 Unusable                    = 8\n\
\n\
uint8 status\n\
================================================================================\n\
MSG: ros_sensor_msgs/CodeType\n\
## Code Type\n\
\n\
uint8 CodeTypeUnknown         = 0\n\
uint8 CodeTypeGpsCa           = 1\n\
uint8 CodeTypeGpsP            = 2\n\
uint8 CodeTypeGpsPCodeless    = 3\n\
uint8 CodeTypeGpsY            = 4\n\
uint8 CodeTypeGpsC            = 5\n\
uint8 CodeTypeGpsCCodeless    = 6\n\
uint8 CodeTypeGpsM            = 8\n\
uint8 CodeTypeGpsMPrime       = 9\n\
\n\
uint8 CodeTypeGlonass  = 16\n\
uint8 CodeTypeGalileo  = 32\n\
\n\
uint8 type\n\
================================================================================\n\
MSG: ros_sensor_msgs/FrequencyType\n\
## Frequency Type\n\
\n\
uint8 FrequencyTypeUnknown      = 0\n\
uint8 FrequencyTypeL1           = 1\n\
uint8 FrequencyTypeL2           = 2\n\
uint8 FrequencyTypeL5           = 3\n\
uint8 FrequencyTypeGalileoE1    = 4\n\
uint8 FrequencyTypeGalileoE5    = 5\n\
uint8 FrequencyTypeGalileoE6    = 6\n\
uint8 FrequencyTypeGalileoC     = 7\n\
uint8 FrequencyTypeGlonassL1F   = 8\n\
uint8 FrequencyTypeGlonassL2F   = 9\n\
uint8 FrequencyTypeGlonassL1C   = 10\n\
uint8 FrequencyTypeGlonassL2C   = 11\n\
uint8 FrequencyTypeGlonassL3C   = 12\n\
\n\
uint8 type\n\
";
  }

  static const char* value(const ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prn);
      stream.next(m.receiverChannel);
      stream.next(m.carrierToNoise);
      stream.next(m.azimuth);
      stream.next(m.elevation);
      stream.next(m.tracking);
      stream.next(m.code);
      stream.next(m.frequency);
      stream.next(m.usedInSolution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChannelStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sensor_msgs::ChannelStatus_<ContainerAllocator>& v)
  {
    s << indent << "prn: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.prn);
    s << indent << "receiverChannel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.receiverChannel);
    s << indent << "carrierToNoise: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.carrierToNoise);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "elevation: ";
    Printer<float>::stream(s, indent + "  ", v.elevation);
    s << indent << "tracking: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::TrackingStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.tracking);
    s << indent << "code: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::CodeType_<ContainerAllocator> >::stream(s, indent + "  ", v.code);
    s << indent << "frequency: ";
    s << std::endl;
    Printer< ::ros_sensor_msgs::FrequencyType_<ContainerAllocator> >::stream(s, indent + "  ", v.frequency);
    s << indent << "usedInSolution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.usedInSolution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SENSOR_MSGS_MESSAGE_CHANNELSTATUS_H
